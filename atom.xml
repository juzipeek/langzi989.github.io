<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-13T06:53:32.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(langzi989)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux中umask深入理解</title>
    <link href="http://yoursite.com/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/09/13/Linux中umash深入理解/</id>
    <published>2017-09-13T06:53:01.000Z</published>
    <updated>2017-09-13T06:53:32.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux中umask深入理解"><a href="#Linux中umask深入理解" class="headerlink" title="Linux中umask深入理解"></a>Linux中umask深入理解</h1><p>umask(user file-creatiopn mode mask)为用户文件创建掩码，是创建文件或文件夹时默认权限的基础。通常我们可以使用chmod修改linux中文件的权限.umask的作用与chmod的效果相反，具体看下面。</p>
<blockquote>
<p>若没有文件掩码时，文件的默认权限为0666,文件夹的默认权限为0777。</p>
<p>原因:</p>
<ul>
<li>创建文件一般是用来读写，所以默认情况下所有用户都具有读写权限，但是没有可执行权限，所以文件创建的默认权限为0666</li>
<li>而文件夹的x权限表示的是打开权限，所以这个权限必须要有，所以文件夹的默认权限为0777。</li>
</ul>
</blockquote>
<h2 id="用户掩码作用"><a href="#用户掩码作用" class="headerlink" title="用户掩码作用"></a>用户掩码作用</h2><p>上述的权限是在没有umask情况下的默认权限。但是系统为了保护用户创建文件和文件夹的权限,此时系统会有一个默认的用户掩码(umask)，大多数的Linux系统的默认掩码为022。用户掩码的作用是用户在创建文件时从文件的默认权限中去除掩码中的权限。所以文件创建之后的权限实际为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">＃文件创建权限</div><div class="line">默认权限(文件0666,文件夹0777)-umask</div></pre></td></tr></table></figure></p>
<p>所以在用户不修改umask的情况下，创建文件的权限为：0666-0022=0644。创建文件夹的权限为：0777-0022=0755</p>
<h2 id="查看与修改默认掩码"><a href="#查看与修改默认掩码" class="headerlink" title="查看与修改默认掩码"></a>查看与修改默认掩码</h2><p>查看用户掩码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#以数字方式查看掩码</div><div class="line">umask</div><div class="line"># 以符号形式查看掩码</div><div class="line">umask -S</div></pre></td></tr></table></figure></p>
<p>可以使用umask命令直接修改掩码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">umask 0000</div></pre></td></tr></table></figure></p>
<p>上述方法修改的掩码只在当前tty中生效.若要全局生效,可以讲umask值写在/etc/profile或者.bashrc中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux中umask深入理解&quot;&gt;&lt;a href=&quot;#Linux中umask深入理解&quot; class=&quot;headerlink&quot; title=&quot;Linux中umask深入理解&quot;&gt;&lt;/a&gt;Linux中umask深入理解&lt;/h1&gt;&lt;p&gt;umask(user file-cr
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="umask" scheme="http://yoursite.com/tags/umask/"/>
    
  </entry>
  
  <entry>
    <title>Unix高级编程之signal</title>
    <link href="http://yoursite.com/2017/09/10/Unix%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8Bsignal/"/>
    <id>http://yoursite.com/2017/09/10/Unix高级编程之signal/</id>
    <published>2017-09-09T21:24:40.000Z</published>
    <updated>2017-09-10T10:56:47.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix高级编程之signal"><a href="#Unix高级编程之signal" class="headerlink" title="Unix高级编程之signal"></a>Unix高级编程之signal</h1><p>signal函数相关的细节描述详见另外两篇篇博客，这里不详细赘述:<br><a href="https://langzi989.github.io/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/" target="_blank" rel="external">https://langzi989.github.io/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</a><br><a href="https://langzi989.github.io/2017/05/04/Wait%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">https://langzi989.github.io/2017/05/04/Wait%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</a></p>
<h2 id="显示信号的描述"><a href="#显示信号的描述" class="headerlink" title="显示信号的描述"></a>显示信号的描述</h2><p>信号的个数可以用宏<strong>NSIG</strong>获取。</p>
<p>显示信号的描述有三种方法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//first method</span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strsignal</span><span class="params">(<span class="keyword">int</span> sig)</span></span>;</div><div class="line"><span class="comment">//second method,</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">psignal</span><span class="params">(<span class="keyword">int</span> sig, <span class="keyword">char</span>* msg)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//third memthod</span></div><div class="line">sys_siglist[sig];</div></pre></td></tr></table></figure></p>
<h3 id="上述三种方法的区别"><a href="#上述三种方法的区别" class="headerlink" title="上述三种方法的区别"></a>上述三种方法的区别</h3><p>sys_siglist是直接存储信号描述的数组，一般情况下，推荐使用strsignal。</p>
<p>strsignal和psignal函数对locale敏感，会打印出当地的语言。<br>调用psignal会在本地的错误出输出流输出，msg:strsignalmsg；</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//此时错误数据流将会打印出:SIGINT:Interrupt</div><div class="line">psignal(SIGINT, &quot;SIGINT&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h2><p>许多相关的系统调用涉及到一组不同的信号，这时候需要信号集。linux中使用sigset_t结构体来表示信号集。一般情况，信号集是使用掩码实现的，但是可能有一些是其他实现方式。<br>信号集结构体相关的函数.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//初始化空信号集。注意不可使用memset或者静态变量全局变量初始化信号集为空，这样会出问题。因为不是所有的信号集都是通过掩码实现的</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigemptyset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//初始化信号集包括所有的信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigfillset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//向信号集中添加信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaddset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//从信号集中去除信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigdelset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//检查某一信号是不是在当前信号集中。返回1在,０不在</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigismember</span><span class="params">(<span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//以下三个为GNU C中的非标准函数，</span></div><div class="line"></div><div class="line">＃define _GNU_SOURCE</div><div class="line"><span class="comment">//对两个信号集作交集存储于dest中</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigandset</span><span class="params">(<span class="keyword">sigset_t</span>* dest, <span class="keyword">sigset_t</span>* left, <span class="keyword">sigset_t</span>* right)</span></span>;</div><div class="line"><span class="comment">//对两个信号集做并集存储于dest中</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigorset</span><span class="params">(<span class="keyword">sigset_t</span>* dest, <span class="keyword">sigset_t</span>* left, <span class="keyword">sigset_t</span>* right)</span></span>;</div><div class="line"><span class="comment">//判断信号集是否为空</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigisemptyset</span><span class="params">(<span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<h2 id="信号掩码-进程中阻塞信号传递"><a href="#信号掩码-进程中阻塞信号传递" class="headerlink" title="信号掩码(进程中阻塞信号传递)"></a>信号掩码(进程中阻塞信号传递)</h2><p>内核会为每个进程维护一个信号掩码(标识一组信号),当一个信号被传递到该进程的时候，若该信号在信号掩码中,进程会阻塞该信号的传递，直到将该信号从信号掩码中剔除。</p>
<p>向信号掩码中添加一个信号的方式有以下几种：</p>
<ul>
<li>当调用信号处理器程序的时候，可将引发该调用的信号自动添加到信号掩码中，这取决于sigaction函数在安装信号时使用的标志。</li>
<li>使用sigaction函数建立信号处理程序时，可以指定一组额外信号,当调用该处理器程序时将阻塞。</li>
<li>使用<strong>sigprocmask函数</strong>修改进程的信号掩码。</li>
</ul>
<h3 id="sigprocmask函数"><a href="#sigprocmask函数" class="headerlink" title="sigprocmask函数"></a>sigprocmask函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigprocmask</span><span class="params">(<span class="keyword">int</span> how, <span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">sigset_t</span>* old)</span></span>;</div></pre></td></tr></table></figure>
<p>参数:</p>
<ul>
<li>how : 指定修改信号掩码的方式,有三种方式<ul>
<li>SIG_BLOCK : 向指定信号中添加指定信号.</li>
<li>SIG_UNBLOCK:　将指定信号从原有的信号掩码中移除。若被移除的信号掩码不存在不报错</li>
<li>SIG_SETMASK:  直接设置(赋值),覆盖原有的值</li>
</ul>
</li>
<li>set :  需要设置的新的信号掩码集</li>
<li>old:  旧的信号掩码集。可在设置信号掩码集之后回复原有的信号掩码。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">time_t</span> start = time(<span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">sigset_t</span> new_set, pre;</div><div class="line">	sigemptyset(&amp;new_set);</div><div class="line">	sigaddset(&amp;new_set, SIGINT);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;new_set, &amp;pre) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; <span class="string">"sigprocmask set error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">		sleep(<span class="number">1</span>);</div><div class="line">		<span class="keyword">time_t</span> end = time(<span class="literal">NULL</span>);</div><div class="line">		<span class="keyword">if</span> (end - start &gt;= <span class="number">15</span>) &#123;</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hahah 接触阻塞"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">			sigprocmask(SIG_SETMASK, &amp;pre, <span class="literal">NULL</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sigpending获取正在等待状态的信号"><a href="#sigpending获取正在等待状态的信号" class="headerlink" title="sigpending获取正在等待状态的信号"></a>sigpending获取正在等待状态的信号</h2><p>若进程接收信号被阻塞之后，我们希望获取被阻塞的信号，则可以使用sigpending函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigpending</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>使用此函数的场景是:若某个进程接收到被阻塞的信号,如果希望这些信号被移出阻塞队列,此时可以通过sigpending获取被阻塞的信号，然后将此信号的处理器函数IGNORE,并将其剔除信号掩码即可。</p>
<p><strong>在信号被阻塞的时候，不对信号做排队处理，即即使进程阻塞了100个SIGINT信号，此时当SIGINT从信号掩码中去除时，该进程接收的还是只是一个SIGINT信号。</strong></p>
<h2 id="sigaction函数"><a href="#sigaction函数" class="headerlink" title="sigaction函数"></a>sigaction函数</h2><p>除了signal函数之外,sigaction系统调用是设置信号处理的另一个选择。sigaction和signal函数相比更加灵活和具有可移植性。sigaction允许在不改变信号处理器程序的情况下获取信号的默认处理方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix高级编程之signal&quot;&gt;&lt;a href=&quot;#Unix高级编程之signal&quot; class=&quot;headerlink&quot; title=&quot;Unix高级编程之signal&quot;&gt;&lt;/a&gt;Unix高级编程之signal&lt;/h1&gt;&lt;p&gt;signal函数相关的细节描述详见另
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="sigaction" scheme="http://yoursite.com/tags/sigaction/"/>
    
  </entry>
  
  <entry>
    <title>Linux中ulimit命令简单使用</title>
    <link href="http://yoursite.com/2017/09/09/Linux%E4%B8%ADulimit%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/09/Linux中ulimit命令简单使用/</id>
    <published>2017-09-09T02:05:01.000Z</published>
    <updated>2017-09-09T02:06:40.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux中ulimit命令简单使用"><a href="#linux中ulimit命令简单使用" class="headerlink" title="linux中ulimit命令简单使用"></a>linux中ulimit命令简单使用</h1><blockquote>
<p>系统性能是一个受关注的话题，如何通过最简单的设置来实现有效的性能调优，如何在有限资源的条件下保证程序的运作，ulimit是我们在处理问题的时候经常使用的一种手段。ulimit是一种linux系统内置的功能。下面将列举ulimit的一些常用关键字和简单用法。</p>
</blockquote>
<h2 id="ulimit命令参数"><a href="#ulimit命令参数" class="headerlink" title="ulimit命令参数"></a>ulimit命令参数</h2><p>ulimit参数命令</p>
<blockquote>
<p>注意ulimit设置分软硬区别，加-H为硬,-S为软.默认查询是显示的是软，但使用ulimit进行设置的时候为软硬都作用。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-H</td>
<td style="text-align:left">设置硬资源限制，一旦设置不能增加。</td>
<td style="text-align:left">ulimit – Hs 64；限制硬资源，线程栈大小为 64K。</td>
</tr>
<tr>
<td style="text-align:left">-S</td>
<td style="text-align:left">设置软资源限制，设置后可以增加，但是不能超过硬资源设置。</td>
<td style="text-align:left">ulimit – Sn 32；限制软资源，32 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:left">-a</td>
<td style="text-align:left">显示当前所有的 limit 信息。</td>
<td style="text-align:left">ulimit – a；显示当前所有的 limit 信息。</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">最大的 core 文件的大小， 以 blocks 为单位。</td>
<td style="text-align:left">ulimit – c unlimited； 对生成的 core 文件的大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">进程最大的数据段的大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit -d unlimited；对进程的数据段大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:left">进程可以创建文件的最大值，以 blocks 为单位。</td>
<td style="text-align:left">ulimit – f 2048；限制进程可以创建的最大文件大小为 2048 blocks。</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">最大可加锁内存大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – l 32；限制最大可加锁内存大小为 32 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-m</td>
<td style="text-align:left">最大内存大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – m unlimited；对最大内存不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">可以打开最大文件描述符的数量。</td>
<td style="text-align:left">ulimit – n 128；限制最大可以使用 128 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">管道缓冲区的大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – p 512；限制管道缓冲区的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">线程栈大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – s 512；限制线程栈的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">最大的 CPU 占用时间，以秒为单位。</td>
<td style="text-align:left">ulimit – t unlimited；对最大的 CPU 占用时间不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">用户最大可用的进程数。</td>
<td style="text-align:left">ulimit – u 64；限制用户最多可以使用 64 个进程。</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">进程最大可用的虚拟内存，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – v 200000；限制最大可用的虚拟内存为 200000 Kbytes。</td>
</tr>
</tbody>
</table>
<h2 id="ulimit参数作用范围"><a href="#ulimit参数作用范围" class="headerlink" title="ulimit参数作用范围"></a>ulimit参数作用范围</h2><ul>
<li>针对单个tty生效:在tty中直接运行ulimit命令的作用范围是只对当前tty生效</li>
<li>针对单个用户生效:将命令添加到.bashrc中,将对当前用户生效</li>
<li>针对所有用户生效:将命令添加到/etc/security/limits.conf中，可以设置针对特定用户或者所有用户的限制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux中ulimit命令简单使用&quot;&gt;&lt;a href=&quot;#linux中ulimit命令简单使用&quot; class=&quot;headerlink&quot; title=&quot;linux中ulimit命令简单使用&quot;&gt;&lt;/a&gt;linux中ulimit命令简单使用&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ulimit" scheme="http://yoursite.com/tags/ulimit/"/>
    
  </entry>
  
  <entry>
    <title>C++函数指针学习</title>
    <link href="http://yoursite.com/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/08/C++函数指针学习/</id>
    <published>2017-09-08T09:47:20.000Z</published>
    <updated>2017-09-09T02:40:11.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-函数指针学习"><a href="#C-函数指针学习" class="headerlink" title="C++函数指针学习"></a>C++函数指针学习</h1><h2 id="使用函数指针的优点"><a href="#使用函数指针的优点" class="headerlink" title="使用函数指针的优点"></a>使用函数指针的优点</h2><p>使用函数指针有助于我们设计出更优秀，更简洁更高效的程序。在下面的情景中我们常用到函数指针:</p>
<ul>
<li>使用函数指针作为参数</li>
<li>使用函数指针作为返回值</li>
<li>使用函数指针作为回调函数</li>
<li>使用函数指针数组</li>
<li>类的静态方法和非静态方法的函数指针</li>
<li>使用函数指针实现动态绑定</li>
<li>在结构体中定义函数</li>
</ul>
<h2 id="使用函数指针提高函数的效率"><a href="#使用函数指针提高函数的效率" class="headerlink" title="使用函数指针提高函数的效率"></a>使用函数指针提高函数的效率</h2><p>当通过switch case多用多个相同类型的函数的时候，这个时候使用函数指针可以大大简化函数代码并可以明显的提高程序的执行效率。例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;time.h&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sys/time.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define StartTime(id)  struct timeval __now1105##id;\</div><div class="line">                       gettimeofday(&amp;__now1105##id, 0);</div><div class="line">#define EndTime(id) struct timeval __now21105##id; \</div><div class="line">					      gettimeofday(&amp;__now21105##id, 0); \</div><div class="line">						printf(&quot;timer_%s spend time:%d us\n&quot;,#id,(__now21105##id.tv_sec-__now1105##id.tv_sec)* 1000000 + (__now21105##id.tv_usec-__now1105##id.tv_usec));</div><div class="line"></div><div class="line">double add(double a, double b) &#123;</div><div class="line">	return a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double sub(double a, double b) &#123;</div><div class="line">	return a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double multi(double a, double b) &#123;</div><div class="line">	return a * b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double div(double a, double b) &#123;</div><div class="line">	return a/b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">typedef double (*op)(double, double);</div><div class="line"></div><div class="line">void func1(double a, double b, int flag) &#123;</div><div class="line">	switch(flag) &#123;</div><div class="line">		case 0:</div><div class="line">			add(a, b);</div><div class="line">			break;</div><div class="line">		case 1:</div><div class="line">			sub(a, b);</div><div class="line">			break;</div><div class="line">		case 2:</div><div class="line">			multi(a, b);</div><div class="line">			break;</div><div class="line">		case 3:</div><div class="line">			div(a, b);</div><div class="line">			break;</div><div class="line">		default:</div><div class="line">			break;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用函数指针调用函数</div><div class="line">void func2(double a, double b, op cb) &#123;</div><div class="line">	cb(a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">	StartTime(func1);</div><div class="line">		for (int i = 0; i &lt; 100000; i++) &#123;</div><div class="line">			func1(0.2, 0.034, 3);</div><div class="line">		&#125;</div><div class="line">	EndTime(func1);</div><div class="line"></div><div class="line">	StartTime(func2);</div><div class="line">		for (int i = 0; i &lt; 100000; i++) &#123;</div><div class="line">			func2(0.2, 0.034, multi);</div><div class="line">		&#125;</div><div class="line">	EndTime(func2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上面可以看出,由于上述switch,case中调用的函数类型（返回值类型，参数个数以及对应的类型）完全一致，我们将函数指针以参数的形式传到处理函数中。<br>运行上述函数的结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">timer_func1 spend time:2861 us</div><div class="line">timer_func2 spend time:2178 us</div></pre></td></tr></table></figure>
<p>可以看出使用函数指针的效率远远高于switch case</p>
<h2 id="函数指针用做回调函数"><a href="#函数指针用做回调函数" class="headerlink" title="函数指针用做回调函数"></a>函数指针用做回调函数</h2><blockquote>
<p>来源于wiki<br>在计算机程序设计中，回调函数是指通过函数参数传递到其他代码的，某一块可执行代码的引用。这一设计允许底层代码调用在高层定义的子程序。如Linux C中的signal函数就是这样一个例子。</p>
</blockquote>
<p>signal底层的其中一个实现版本如下:由其实现可以看出信号处理的回调函数的主要功能是将处理信号的函数指针替换为用户高层自定义的函数地址fun，从而达到当接收到该信号时底层代码调用高层定义代码的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Sigfunc *</div><div class="line">signal(int signo, Sigfunc *func)</div><div class="line">&#123;</div><div class="line">	struct sigaction	act, oact;</div><div class="line"></div><div class="line">	act.sa_handler = func;</div><div class="line">	sigemptyset(&amp;act.sa_mask);</div><div class="line">	act.sa_flags = 0;</div><div class="line">	if (signo == SIGALRM) &#123;</div><div class="line">#ifdef	SA_INTERRUPT</div><div class="line">		act.sa_flags |= SA_INTERRUPT;</div><div class="line">#endif</div><div class="line">	&#125; else &#123;</div><div class="line">		act.sa_flags |= SA_RESTART;</div><div class="line">	&#125;</div><div class="line">	if (sigaction(signo, &amp;act, &amp;oact) &lt; 0)</div><div class="line">		return(SIG_ERR);</div><div class="line">	return(oact.sa_handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们使用signal函数的时候,如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;signal.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">void signalcb(int signum) &#123;</div><div class="line">  printf(&quot;this is the signal:%d&quot;, signum);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  signal(SIGINT, signalcb);</div><div class="line">  pause();</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="函数指针的本质及声明方法以及赋值"><a href="#函数指针的本质及声明方法以及赋值" class="headerlink" title="函数指针的本质及声明方法以及赋值"></a>函数指针的本质及声明方法以及赋值</h2><h3 id="函数指针的本质"><a href="#函数指针的本质" class="headerlink" title="函数指针的本质"></a>函数指针的本质</h3><p>函数指针类似于数据指针，其本质实质上是一类函数（返回值类型相同，参数个数以及对应的参数类型相同）的入口地址，即该<strong>可执行代码在内存中的起始地址</strong>。函数指针可以让我们通过函数地址去调用该函数。有利于实现函数的动态绑定，即在运行时才决定去调用哪个函数。</p>
<h3 id="函数指针的声明方法"><a href="#函数指针的声明方法" class="headerlink" title="函数指针的声明方法"></a>函数指针的声明方法</h3><p>函数指针的声明方法有两种，包括:</p>
<ul>
<li>普通函数的函数指针和类静态成员函数的函数指针</li>
<li>类非静态成员函数的函数指针</li>
</ul>
<p>普通函数的函数指针和类静态成员函数的函数指针:<br>int (<em>funptr)(int  qa, int qb);<br>类非静态成员函数的函数指针：<br>int MyClass::(</em>funptr)(int  qa, int qb);</p>
<p><strong>注意上述函数指针声明时(*funptr)中的括号不能省略，若省略，有可能会产生歧义，其意义就变成了返回值为int*的函数定义了</strong></p>
<blockquote>
<p>上述两种函数指针声明不兼容的原因如下:(《深度探索C++对象模型》)<br>获取类的静态和非静态函数的函数指针的地址都是其在内存中实际的地址。那为什么非静态成员的指针需要绑定(指明类)？原因是类的非静态成员需要操作类的数据成员,所以类的非静态成员需要绑定this指针找到类的数据成员。故对nonstatic函数取地址是不完整的。</p>
</blockquote>
<h3 id="函数指针的赋值与使用"><a href="#函数指针的赋值与使用" class="headerlink" title="函数指针的赋值与使用"></a>函数指针的赋值与使用</h3><h4 id="函数指针赋值"><a href="#函数指针赋值" class="headerlink" title="函数指针赋值"></a>函数指针赋值</h4><p>对于普通指针和类的静态成员指针，有两种赋值方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">funptr = fnc1</div><div class="line">funptr = &amp;fun1</div></pre></td></tr></table></figure></p>
<p>对于类的非静态成员指针，只能用上面第二种形式赋值。为了保证形式的一致性和避免二义性，一般<strong>统一使用取地址符号进行赋值</strong>可避免错误出现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">funptr = &amp;classInstance.func();</div></pre></td></tr></table></figure></p>
<h4 id="函数指针使用"><a href="#函数指针使用" class="headerlink" title="函数指针使用"></a>函数指针使用</h4><p>函数指针的使用类似于赋值。<br>对于普通指针和类的静态成员函数指针的调用，有两种调用方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">funptr(1,2);</div><div class="line"></div><div class="line">(*funptr)(1,2);</div></pre></td></tr></table></figure></p>
<p>对于类的静态成员函数，只能用上述第二种方式进行调用，为了保持一致性和避免二义性，一般统一使用<strong>使用*来解引用函数指针进行调用</strong>.</p>
<h2 id="函数指针作为参数"><a href="#函数指针作为参数" class="headerlink" title="函数指针作为参数"></a>函数指针作为参数</h2><p>函数指针是一个类型，将函数指针作为参数传入函数中与其他参数类似。使用方式与上述<strong>函数指针用做回调函数</strong>中signal接收参数的方式相同。这里不再详解</p>
<h3 id="函数指针作为返回值"><a href="#函数指针作为返回值" class="headerlink" title="函数指针作为返回值"></a>函数指针作为返回值</h3><p>既然函数指针是函数的入口地址,所以函数指针也可以作为函数的返回值返回。不过函数指针作为函数的返回值的写反比较复杂。<br>若一个函数func只有一个参数int, 其返回值类型是float (*) (float, float)；则其函数原型如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float (*func(int op)) (float, float);</div></pre></td></tr></table></figure></p>
<p>函数指针作为函数返回值的原则是,将函数名以及参数写到*后，函数指针的返回值放在最前面，函数指针的参数放在最后面。</p>
<p>由上面的知识我们可以分析一下signal函数原型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void (*signal)(int signo,void (*func)(int)))(int);</div></pre></td></tr></table></figure></p>
<p>其定义了一个有两个参数分别为int和void (<em>func)(int)，返回值为void (</em>func)(int)的函数。</p>
<p>其本质上是将函数处理指针替换为用户自定义的函数指针。那为什么需要返回值为void (<em>func)(int)呢?原因是<em>*signal函数的返回值是旧的信号处理函数的指针，我们可以通过这个指针暂时改变signal函数处理信号的方式。之后可以通过返回的指针恢复该信号默认的处理方式。</em></em></p>
<blockquote>
<p>注意:signal的信号处理其函数中的int参数的含义是:当信号到达的时候,内核将该信号以整形的方式传给处理器函数，即为void (*func)(int sig)中的sig.</p>
</blockquote>
<h2 id="使用typedef定义函数指针"><a href="#使用typedef定义函数指针" class="headerlink" title="使用typedef定义函数指针"></a>使用typedef定义函数指针</h2><p>一般情况下，如果通过普通的方式定义函数指针，在使用的很不方便。这个时候我们可以通过typedef定义函数指针的新类型。通过typedef定义新类型时与普通类型定义新类型方式不同。对于普通类型，定义方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef int64_t int64;</div></pre></td></tr></table></figure></p>
<p>但是对于函数指针，定义方式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//此处定义个名字为func的类型,它表示函数指针float (*func)(float, float)类型</div><div class="line">typedef float (*func)(float, float);</div><div class="line"></div><div class="line">float function(float a, floatb);</div><div class="line"></div><div class="line">//使用func定义变量</div><div class="line">func test = &amp;function;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-函数指针学习&quot;&gt;&lt;a href=&quot;#C-函数指针学习&quot; class=&quot;headerlink&quot; title=&quot;C++函数指针学习&quot;&gt;&lt;/a&gt;C++函数指针学习&lt;/h1&gt;&lt;h2 id=&quot;使用函数指针的优点&quot;&gt;&lt;a href=&quot;#使用函数指针的优点&quot; class=&quot;
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="函数指针" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
      <category term="回调函数" scheme="http://yoursite.com/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令混淆点记录</title>
    <link href="http://yoursite.com/2017/09/07/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/09/07/Linux常用命令/</id>
    <published>2017-09-07T09:05:01.000Z</published>
    <updated>2017-09-07T09:05:47.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令混淆点记录"><a href="#Linux常用命令混淆点记录" class="headerlink" title="Linux常用命令混淆点记录"></a>Linux常用命令混淆点记录</h1><h2 id="ls命令单位问题"><a href="#ls命令单位问题" class="headerlink" title="ls命令单位问题"></a>ls命令单位问题</h2><p>ls命令的<strong>默认单位为字节</strong>。<br>若使用ls时需要指定单位显示的时候，需要添加参数-h或–block-size进行操作。具体操作方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#-h表示human，即人可读的方式</div><div class="line">#它会按照文件的大小显示单位,</div><div class="line">#若文件小于1k，则不显示单位，表示字节</div><div class="line">#若文件大于1k但是小于1M，显示的单位为k</div><div class="line">#文件大于1M小于1G会显示单位为M，</div><div class="line">#以此类推</div><div class="line">ls -h ~/test</div><div class="line"></div><div class="line">#按照指定的单位显示</div><div class="line">#注意使用此参数需要注意一个问题。若文件小于1G也显示1G。</div><div class="line">ls --block-size=g ~/test    #按照单位为g显示</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令混淆点记录&quot;&gt;&lt;a href=&quot;#Linux常用命令混淆点记录&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令混淆点记录&quot;&gt;&lt;/a&gt;Linux常用命令混淆点记录&lt;/h1&gt;&lt;h2 id=&quot;ls命令单位问题&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ls" scheme="http://yoursite.com/tags/ls/"/>
    
  </entry>
  
  <entry>
    <title>makefile自动变量与隐晦规则推导</title>
    <link href="http://yoursite.com/2017/08/31/makefile%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9A%90%E6%99%A6%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/2017/08/31/makefile自动变量与隐晦规则推导/</id>
    <published>2017-08-31T12:48:59.000Z</published>
    <updated>2017-09-19T01:41:32.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile自动变量与隐晦规则推导"><a href="#makefile自动变量与隐晦规则推导" class="headerlink" title="makefile自动变量与隐晦规则推导"></a>makefile自动变量与隐晦规则推导</h1><p>makefile的使用可以大大简化程序编译的过程，不过对于新手来说makefile的执行规则理解起来还是很让人迷糊的。其中最重要的原因是makefile中使用了大量的隐晦规则和自动变量来简化makefile的编写.本节将记录一下makefile自动变量和隐晦规则的推导过程以及makefile的执行流程。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%.o:%.c</div><div class="line">  $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>对于上面的推导规则，makefile是怎么将%c文件编译汇编成.o文件的？下面将针对这个问题进行讲解</p>
</blockquote>
<h2 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h2><p>makefile中的自动变量实质上是对一类变量的简写，当我们在模式规则中对这类变量处理的时候可以直接使用自动变量简化makefile代码的编写。自动变量包括如目标文件,依赖文件等。下面以实例的方式列出了一些常用的自动变量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a: a.o b.o c.o d.o</div><div class="line">  g++ -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<ul>
<li>$@: 表示模式规则中的目标文件,对于上面的模式规则,$@表示a</li>
<li>$&lt;: 表示依赖中的第一个文件.对于上述规则,$&lt;表示a.o</li>
<li>$^: 表示所有依赖文件的集合,对于上述规则$^表示a.o b.o c.o d.o</li>
<li>$+: 表示所有依赖文件的集合(不去重).对于上述规则$+表示a.o b.o c.o d.o</li>
<li>$%: 仅当目标是函数库文件(.a)文件时，表示规则中目标成员名。如一个目标是(test.a(a.o)),此时$%表示a.o, $@表示test.a</li>
<li>$?: 所有比目标新的依赖目标的集合</li>
<li>$*: 表示目标规则中%以及%之前的部分。如若目标文件为”src/test.o”,目标文件模式为”src/%.o”,此时$*表示”src/test”。</li>
</ul>
<h2 id="隐晦规则自动规则推导"><a href="#隐晦规则自动规则推导" class="headerlink" title="隐晦规则自动规则推导"></a>隐晦规则自动规则推导</h2><p>使用makefile的makefile的隐晦自动规则推导功能也可以让我们的makefile的代码大大简化。使用隐晦规则，我们没必要为每一个类似的规则生成都去写类似的规则。makefile会自动推导依赖文件,并根据隐含规则推导出生成当前目标的命令。<br>如下面的makefile:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">target: a.o b.o c.o</div><div class="line">  g++ -o $@　$^ $(LIB) $(INC) $(LINKER)</div><div class="line">a.o: a.c</div><div class="line">  g++ -c $(CFLAGS) -o a.o a.c</div><div class="line">b.o: b.c</div><div class="line">  g++ -c $(CFLAGS) -o b.o b.c</div><div class="line">c.o: c.c</div><div class="line">  g++ -c $(CFLAGS) -o c.o c.c</div></pre></td></tr></table></figure></p>
<p>上述规则没有使用隐晦规则,对于每一个.o文件的生成都写了一条规则语句.若使用隐晦规则推导，上述makefile可写为如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>从上面的隐晦规则可以看出,对于.o文件的生成命令，makefile都可以由隐晦规则” $(CC) -c $(CFLAGS) -o $@ $&lt;”推导出。即如当目标需要a.隐晦规则将推导出命令”g++ -c $(CFLAGS) -o a.o a.c”用于生成该目标.</p>
<h2 id="makefile执行过程"><a href="#makefile执行过程" class="headerlink" title="makefile执行过程"></a>makefile执行过程</h2><p>由上一节中的makefile简单说一下makefile的执行规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>makefile中首先声明了变量SOURCE和OBJECTS，SOURCE是当前文件夹下的所有.c文件的集合，OBJECTS是所有.c文件对应的目标文件.o的集合.</p>
<p>执行过程:<br>首先,目标target依赖所有的目标文件.o，即a.o,b.o,c.o。当需要依赖a.o时，makefile会根据隐晦规则自动推导出生成a.o文件的命令，(“g++ -c $(CFLAGS) -o a.o a.c”)，生成a.o；类似的也会根据同样的过程生成b.o和c.o文件,这三个文件生成之后,再根据上述规则生成target。</p>
<h2 id="makefile中常用函数"><a href="#makefile中常用函数" class="headerlink" title="makefile中常用函数"></a>makefile中常用函数</h2><h3 id="wildcard函数"><a href="#wildcard函数" class="headerlink" title="wildcard函数"></a>wildcard函数</h3><p>函数参数:一个正则表达式<br>函数功能:wildcard的中文意思是通配符，它的功能类似于正则表达式，用于展开一列所有符合其参数描述的文件名，文件之间用空格分割。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SOURCE=$(wildcard *.cpp)</div></pre></td></tr></table></figure></p>
<p>此时SOURCE的值为所有的以.cpp为后缀的文件集合，以空格隔开。</p>
<h3 id="patsubst函数"><a href="#patsubst函数" class="headerlink" title="patsubst函数"></a>patsubst函数</h3><p>函数参数:　第一个是需要匹配的样式，第二个是表示用什么替换它，第三个被处理的以空格隔开的字符串。<br>函数功能:其功能是一个匹配替换的函数(pattern substitute)。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#TARGET表示与SOURCE中同名的目标文件.</div><div class="line">TARGET = $(patsubst *.cpp, *.o, $(SOURCE))</div></pre></td></tr></table></figure></p>
<h3 id="subst函数"><a href="#subst函数" class="headerlink" title="subst函数"></a>subst函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:字符串替换,将text中的from 替换为to<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值：this is b</div><div class="line">$(subst a, b, this is a)</div></pre></td></tr></table></figure></p>
<h3 id="strip函数"><a href="#strip函数" class="headerlink" title="strip函数"></a>strip函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(strip &lt;string&gt;)</div></pre></td></tr></table></figure>
<p>功能:去除<string>头部和尾部的空格<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#源字符串为&quot;a b c &quot;，返回值为&quot;a b c&quot;</div><div class="line">$(strip a b c )</div></pre></td></tr></table></figure></string></p>
<h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(filter &lt;pattern...&gt;,&lt;text...&gt;)</div></pre></td></tr></table></figure>
<p>功能:过滤特定模式的字符串<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#如source为a.c b.s c.h,则下列的返回值为a.c b.s</div><div class="line">$(filter *.c *.s, $(source))</div></pre></td></tr></table></figure></p>
<h3 id="word函数"><a href="#word函数" class="headerlink" title="word函数"></a>word函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(word &lt;n&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能:取单词函数。取出<text>中的第n个单词(从1开始)，若越界，返回为空</text></p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为bar</div><div class="line">$(word 2,foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="words函数"><a href="#words函数" class="headerlink" title="words函数"></a>words函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(words &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:统计字符串中单词的个数,返回个数<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为3</div><div class="line">$(word foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="wordlist函数"><a href="#wordlist函数" class="headerlink" title="wordlist函数"></a>wordlist函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:取<text>中s-e个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回bar fun</div><div class="line">$(wordlist 2,3, foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="firstword函数"><a href="#firstword函数" class="headerlink" title="firstword函数"></a>firstword函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(firstword &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能：取<text>中的首个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为foo</div><div class="line">$(firstword foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="dir函数"><a href="#dir函数" class="headerlink" title="dir函数"></a>dir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(dir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的目录（即/前面的部分）。如没有/，则返回./<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为/home/ ./</div><div class="line">$(dir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="notdir函数"><a href="#notdir函数" class="headerlink" title="notdir函数"></a>notdir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(notdir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的取出非目录部分（即/后面的部分）。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为test testfile</div><div class="line">$(notdir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="suffix函数"><a href="#suffix函数" class="headerlink" title="suffix函数"></a>suffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(suffix ..)</div></pre></td></tr></table></figure>
<p>功能:取后缀函数,若没有后缀返回为空<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:.c .c</div><div class="line">$(suffix a.c b.c)</div></pre></td></tr></table></figure></p>
<h3 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(basename ...)</div></pre></td></tr></table></figure>
<p>功能:取前缀函数,包括目录。<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:/home/test a</div><div class="line">$(basename /home/test.cpp a.cpp)</div></pre></td></tr></table></figure></p>
<h3 id="addsuffix函数"><a href="#addsuffix函数" class="headerlink" title="addsuffix函数"></a>addsuffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addsuffix &lt;suffix&gt; &lt;name....&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列<name...>添加后缀名<suffix><br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:a.c b.c c.c</div><div class="line">$(addsuffix .c a b c)</div></pre></td></tr></table></figure></suffix></name...></p>
<h3 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addprefix &lt;prefix&gt; &lt;name...&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列添加前缀<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:src/a src/b src/c</div><div class="line">$(addprefix src/ a b c)</div></pre></td></tr></table></figure></p>
<h3 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(join &lt;list1&gt; &lt;list2&gt;)</div></pre></td></tr></table></figure>
<p>功能:将两个字符串中的list对应项连接<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#返回值:an 2b 3</div><div class="line">$(join 1 2 3, a b)</div><div class="line">#返回值:1a 2b c</div><div class="line">$(join 1 2, a b c)</div></pre></td></tr></table></figure></p>
<h2 id="makefile中链接静态库顺序问题"><a href="#makefile中链接静态库顺序问题" class="headerlink" title="makefile中链接静态库顺序问题"></a>makefile中链接静态库顺序问题</h2><p>在链接静态库的时候，如果多个静态库之间存在依赖关系，则有依赖的静态库之间存在顺序问题，若顺序出现错误，则可能出现函数未定义或符号找不到等错误。</p>
<p>静态库链接的顺序的原则是：<strong>被依赖的库一定要放在后面</strong>，因为makefile在链接静态库时的顺序是从右往左(或从后向前).如libb.a依赖于liba.a，此时的链接顺序应该是:-Llibb.a -Lliba.a。</p>
<p>会出现上述问题的原因是:我们在生成静态库的时候并未把依赖库的定义编到生成的库中。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gcc -c a.c</div><div class="line">ar cr liba.a a.o</div><div class="line">gcc -c b.c</div><div class="line">ar cr libb.a b.o # 虽然libb.a使用到了liba.o中的一些函数,但并不会将它们的定义包含进来,所以在链接test时需要指定这两个库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;a href=&quot;#makefile自动变量与隐晦规则推导&quot; class=&quot;headerlink&quot; title=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;/a&gt;makefile自动变量与隐晦规则推导&lt;/h1&gt;&lt;p&gt;ma
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
      <category term="自动变量" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F/"/>
    
      <category term="规则推导" scheme="http://yoursite.com/tags/%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>makefile详解</title>
    <link href="http://yoursite.com/2017/08/31/makefile%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/08/31/makefile详解/</id>
    <published>2017-08-31T09:22:57.000Z</published>
    <updated>2017-08-31T09:28:49.059Z</updated>
    
    <content type="html"><![CDATA[<p>makefile详解</p>
<p>makefile基础<br><a href="http://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="external">http://blog.csdn.net/ruglcc/article/details/7814546/</a></p>
<p>makefile依赖关系详解<br><a href="http://blog.chinaunix.net/uid-20682147-id-76330.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20682147-id-76330.html</a><br><a href="http://blog.csdn.net/aquester/article/details/48547685" target="_blank" rel="external">http://blog.csdn.net/aquester/article/details/48547685</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;makefile详解&lt;/p&gt;
&lt;p&gt;makefile基础&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/ruglcc/article/details/7814546/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>Linux正则表达式以及Sed使用学习</title>
    <link href="http://yoursite.com/2017/08/20/Linux%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/20/Linux正则表达式/</id>
    <published>2017-08-20T07:11:12.000Z</published>
    <updated>2017-08-20T11:58:41.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux正则表达式以及Sed使用学习"><a href="#Linux正则表达式以及Sed使用学习" class="headerlink" title="Linux正则表达式以及Sed使用学习"></a>Linux正则表达式以及Sed使用学习</h1><p>正则表达式是熟悉和使用Linux系统的最重要的基础，其中grep,find,awk以及sed等对其依赖更大。本节将总结一下Linux中常用的正则表达式使用方法。</p>
<h2 id="正则表达式中特殊字符"><a href="#正则表达式中特殊字符" class="headerlink" title="正则表达式中特殊字符"></a>正则表达式中特殊字符</h2><ul>
<li>.   : 表示任何单个字符</li>
<li>[]  : 包含一个字符序列，表示匹配序列中其中一个字符</li>
<li>-  : 出现在[]中,表示一个序列范围.如[a-z]表示26个小写的英文字母</li>
<li>^   : 出现在[]中，表示对序列去反。如[^a-z]表示匹配不是a-z的其他字符</li>
<li>*  : 匹配某一个字符的０个或1个或多个实例</li>
<li>?   : 匹配某一个字符的0个或1个实例</li>
<li>+  : 匹配某一个字符的1个或多个实例</li>
<li>$   : 匹配行尾。如test$指匹配以test结尾的行</li>
<li>^   : 匹配行首。如^test指匹配以test开始的行</li>
<li>\&lt;  : 匹配词首</li>
<li>>  :　匹配词尾</li>
<li>\   : 转移特殊字符,如果需要匹配上述特殊字符，用反斜杠转义</li>
</ul>
<h2 id="sed使用说明"><a href="#sed使用说明" class="headerlink" title="sed使用说明"></a>sed使用说明</h2><h3 id="sed命令："><a href="#sed命令：" class="headerlink" title="sed命令："></a>sed命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</div></pre></td></tr></table></figure>
<h3 id="sed使用"><a href="#sed使用" class="headerlink" title="sed使用"></a>sed使用</h3><p>data文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<h4 id="用s命令进行替换"><a href="#用s命令进行替换" class="headerlink" title="用s命令进行替换"></a>用s命令进行替换</h4><p>替换时若出现单引号，直接将脚本用双引号括起来即可。<br>1.将一行中第一个匹配的特定字符串替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/&quot; data</div></pre></td></tr></table></figure></p>
<p>注意不会改变原文件，只是会打印到标准输出流。若要保存可以重定向到新的文件中。</p>
<p>2.讲一行中所有匹配的特定字符串匹配，使用g参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/g&quot; data</div></pre></td></tr></table></figure></p>
<p>3.使用-i参数直接修改文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i &quot;s/a/an/g&quot; data</div></pre></td></tr></table></figure></p>
<p>4.在每一行的开头添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/^/#/&quot; data</div></pre></td></tr></table></figure></p>
<p>5.在每一行的结尾添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/$/#/&quot; data</div></pre></td></tr></table></figure></p>
<p>6.指定特定行替换,或指定特定范围内的行替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sed &quot;3s/an/a/&quot; data</div><div class="line">sed &quot;1,2s/an/a/&quot; data</div></pre></td></tr></table></figure></p>
<p>7.只替换每一行的第一个a:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/1&quot; data</div></pre></td></tr></table></figure></p>
<p>8.只替换每一行的第二个a:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/2&quot; data</div></pre></td></tr></table></figure></p>
<p>9.只替换每一行第二个以后的所有a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/2g&quot; data</div></pre></td></tr></table></figure></p>
<h4 id="多个匹配"><a href="#多个匹配" class="headerlink" title="多个匹配"></a>多个匹配</h4><p>多个匹配可以用分好将匹配规则连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/an/a/g;s/dog/cat/g&quot; data</div></pre></td></tr></table></figure></p>
<p>上述命令等价于:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -e &quot;s/an/a/g&quot; -e &quot;s/dog/cat/g&quot; data</div></pre></td></tr></table></figure></p>
<h4 id="显示被匹配的变量"><a href="#显示被匹配的变量" class="headerlink" title="显示被匹配的变量"></a>显示被匹配的变量</h4><p>&amp;可以表示被匹配的变量,即若被匹配的变量为”abc”,则&amp;代表abc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#功能为在每个an外加[]</div><div class="line">sed -e &quot;s/an/[&amp;]/g&quot; data</div></pre></td></tr></table></figure></p>
<h3 id="圆括号匹配"><a href="#圆括号匹配" class="headerlink" title="圆括号匹配"></a>圆括号匹配</h3><p>被圆括号括起来的匹配可以当做变量使用，注意圆括号匹配时括号需要”\”转义。变量按顺序使用\1,\2指代。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/this \(.*\) an \(.*\)/\1:\2/&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">is:dog an</div><div class="line">is:cant</div><div class="line">is:money</div><div class="line">is:fish</div></pre></td></tr></table></figure></p>
<h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><p>data内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<h3 id="N命令"><a href="#N命令" class="headerlink" title="N命令"></a>N命令</h3><p>N命令的作用是把下一行的命令纳入当做缓冲区。也就是缓冲区包括两行.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#只匹配缓冲区的第一个this</div><div class="line">sed &quot;N;s/this/that/&quot; data</div></pre></td></tr></table></figure></p>
<p>执行命令结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">that is a dog a</div><div class="line">this is a cat</div><div class="line">that is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;N;s/\n/,/&quot; data</div></pre></td></tr></table></figure>
<p>执行命令结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a,this is a cat</div><div class="line">this is a money,this is a fish</div></pre></td></tr></table></figure></p>
<h3 id="a命令和i命令"><a href="#a命令和i命令" class="headerlink" title="a命令和i命令"></a>a命令和i命令</h3><ol>
<li><p>i命令的作用是在指定行前面插入一行，行号写在i前面，中间空格可有可无；如果不写行号默认在所有行的前面插入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在第一行前面插入 this is my test i</div><div class="line">sed &quot;1i this is my test i&quot; data</div></pre></td></tr></table></figure>
</li>
<li><p>a命令的作用是在指定行后追加内容,行号写在a前面，若不写表示所有行后。也可用$代表最后一行，不过一定要有空格.</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在第一行后插入 this is my test a</div><div class="line">sed &quot;1a this is my test a&quot; data</div></pre></td></tr></table></figure>
<ol>
<li>可以使用匹配来添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#若匹配到cat，则在当前行后追加一行 this is test match a</div><div class="line">sed &quot;/cat/a this is test match a&quot; data</div></pre></td></tr></table></figure>
<h3 id="c命令"><a href="#c命令" class="headerlink" title="c命令"></a>c命令</h3><p>c命令是替换匹配的行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#替换第二行</div><div class="line">sed &quot;2 c this is test c&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is test c</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#用匹配替换</div><div class="line">sed &quot;/fish/c this is the test c&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is the test c</div></pre></td></tr></table></figure></p>
<h3 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h3><p>d命令删除指定的行，可指定范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除第２到3行</div><div class="line">sed &quot;2,3 d&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除找到cat指定的行</div><div class="line">sed &quot;/cat/d&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除第二行到结尾</div><div class="line">sed &quot;2,$ d&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div></pre></td></tr></table></figure></p>
<h3 id="p命令"><a href="#p命令" class="headerlink" title="p命令"></a>p命令</h3><p>p命令的作用是打印匹配到的行.注意打印的时候使用-n参数。sed默认输出处理后的文本，使用-n参数阻止默认输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印匹配到cat的行</div><div class="line">sed -n &quot;/cat/p&quot; data</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印符合从一个模式当另一个模式的行</div><div class="line">sed -n &quot;/dog/,/money/p&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印从第一行到匹配到的哪一行</div><div class="line">sed -n &quot;1,/cat/p&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div></pre></td></tr></table></figure></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="=命令"></a>=命令</h3><p>=参数用于打印匹配到的行号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印含有cat的行号</div><div class="line">sed -n &quot;/cat/=&quot; data</div></pre></td></tr></table></figure></p>
<h2 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h2><p>将下列中所有的100替换为当前行号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div></pre></td></tr></table></figure>
<p>shell命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed = data | sed &quot;N;s/\([0-9]*\)\n\(hmset &apos;99_p_\)[0-9]*\(&apos; &apos;m_19&apos; \)[0-9]*\( &apos;t_19&apos; \)[0-9]*\( &apos;semm_19&apos; \)[0-9]*/\2\1\3\1\4\1\5\1/&quot;</div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hmset &apos;99_p_1&apos; &apos;m_19&apos; 1 &apos;t_19&apos; 1 &apos;semm_19&apos; 1</div><div class="line">hmset &apos;99_p_2&apos; &apos;m_19&apos; 2 &apos;t_19&apos; 2 &apos;semm_19&apos; 2</div><div class="line">hmset &apos;99_p_3&apos; &apos;m_19&apos; 3 &apos;t_19&apos; 3 &apos;semm_19&apos; 3</div><div class="line">hmset &apos;99_p_4&apos; &apos;m_19&apos; 4 &apos;t_19&apos; 4 &apos;semm_19&apos; 4</div><div class="line">hmset &apos;99_p_5&apos; &apos;m_19&apos; 5 &apos;t_19&apos; 5 &apos;semm_19&apos; 5</div><div class="line">hmset &apos;99_p_6&apos; &apos;m_19&apos; 6 &apos;t_19&apos; 6 &apos;semm_19&apos; 6</div><div class="line">hmset &apos;99_p_7&apos; &apos;m_19&apos; 7 &apos;t_19&apos; 7 &apos;semm_19&apos; 7</div><div class="line">hmset &apos;99_p_8&apos; &apos;m_19&apos; 8 &apos;t_19&apos; 8 &apos;semm_19&apos; 8</div><div class="line">hmset &apos;99_p_9&apos; &apos;m_19&apos; 9 &apos;t_19&apos; 9 &apos;semm_19&apos; 9</div><div class="line">hmset &apos;99_p_10&apos; &apos;m_19&apos; 10 &apos;t_19&apos; 10 &apos;semm_19&apos; 10</div><div class="line">hmset &apos;99_p_11&apos; &apos;m_19&apos; 11 &apos;t_19&apos; 11 &apos;semm_19&apos; 11</div><div class="line">hmset &apos;99_p_12&apos; &apos;m_19&apos; 12 &apos;t_19&apos; 12 &apos;semm_19&apos; 12</div><div class="line">hmset &apos;99_p_13&apos; &apos;m_19&apos; 13 &apos;t_19&apos; 13 &apos;semm_19&apos; 13</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux正则表达式以及Sed使用学习&quot;&gt;&lt;a href=&quot;#Linux正则表达式以及Sed使用学习&quot; class=&quot;headerlink&quot; title=&quot;Linux正则表达式以及Sed使用学习&quot;&gt;&lt;/a&gt;Linux正则表达式以及Sed使用学习&lt;/h1&gt;&lt;p&gt;正则
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="sed" scheme="http://yoursite.com/tags/sed/"/>
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>查找含有特定字符串的文件</title>
    <link href="http://yoursite.com/2017/08/20/Linux%E6%9F%A5%E6%89%BE%E5%90%AB%E6%9C%89%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/08/20/Linux查找含有特定字符串的文件/</id>
    <published>2017-08-20T06:25:01.000Z</published>
    <updated>2017-08-20T06:40:10.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux查找含有特定字符串的文件"><a href="#Linux查找含有特定字符串的文件" class="headerlink" title="Linux查找含有特定字符串的文件"></a>Linux查找含有特定字符串的文件</h1><p>Linux查找含有特定字符串的文件命令为grep。以下为详细的使用方法</p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><h3 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令:"></a>Linux命令:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grep [OPTIONS] PATTERN [FILE...]</div><div class="line"></div><div class="line">#实例:递归查找当前文件夹下所有含有test的文件，并显示行号</div><div class="line">grep -rn &quot;test&quot; *</div></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-r      递归查找</div><div class="line">-n      显示行号</div><div class="line">-i      忽略大小写</div><div class="line">-w      只匹配整个单词，而不是字符串的字部分(如pattern为&quot;test&quot;, 不匹配&quot;test1&quot;或&quot;atest&quot;)</div><div class="line">-C num  显示匹配到的行上下n行  </div><div class="line">-l      只列出匹配成功的文件名</div><div class="line">-L      列出不匹配的文件名</div><div class="line">\&lt;      标注单词的开头</div><div class="line">\&gt;      标注单词的结尾</div><div class="line">^       指匹配字符串在行首</div><div class="line">$       指匹配字符串在行尾</div></pre></td></tr></table></figure>
<h3 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#显示匹配pattern1或pattern2的行</div><div class="line">grep pattern1 | pattern2 file</div><div class="line"># 显示即匹配pattern1又匹配pattern2的行</div><div class="line">grep pattern1 file | grep pattern2</div><div class="line">#只匹配test或testA，不匹配Atest</div><div class="line">grep &quot;\&lt;man&quot; *</div><div class="line">#只匹配test或Atest，不匹配testA</div><div class="line">grep &quot;man\&gt;&quot; *</div><div class="line">#只匹配test　不匹配testA和Atest</div><div class="line">grep &quot;\&lt;test\&gt;&quot; *</div><div class="line"></div><div class="line">#匹配行首为test的行:</div><div class="line">grep -rn &quot;^test&quot; *</div><div class="line">#匹配行尾为test的行</div><div class="line">grep -rn &quot;test$&quot; *</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux查找含有特定字符串的文件&quot;&gt;&lt;a href=&quot;#Linux查找含有特定字符串的文件&quot; class=&quot;headerlink&quot; title=&quot;Linux查找含有特定字符串的文件&quot;&gt;&lt;/a&gt;Linux查找含有特定字符串的文件&lt;/h1&gt;&lt;p&gt;Linux查找含有特
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="grep" scheme="http://yoursite.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>C中编码问题</title>
    <link href="http://yoursite.com/2017/07/17/C%E4%B8%AD%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/17/C中编码问题/</id>
    <published>2017-07-17T06:40:31.000Z</published>
    <updated>2017-07-17T12:20:47.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中编码问题"><a href="#C中编码问题" class="headerlink" title="C中编码问题"></a>C中编码问题</h1><h2 id="编码介绍"><a href="#编码介绍" class="headerlink" title="编码介绍"></a>编码介绍</h2><p>在代码中我们通常不可避免的出现一些中文，这个时候我们就要考虑到中文的编码格式，如果不注意可能会导致乱码或者信息失真等问题。我们常用的中文编码有GBK,gb2312,Unicode等等。具体详细的介绍看下面几篇文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/lizhenghn/p/3690406.html" target="_blank" rel="external">http://www.cnblogs.com/lizhenghn/p/3690406.html</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/apas03.html" target="_blank" rel="external">http://docs.linuxtone.org/ebooks/C&amp;CPP/c/apas03.html</a></li>
</ul>
<h2 id="C语言编码转换"><a href="#C语言编码转换" class="headerlink" title="C语言编码转换"></a>C语言编码转换</h2><p>在C语言中，如果需要讲编码进行转换，可以使用iconv系列函数。<br>头文件以及常用函数:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* <span class="keyword">iconv_t</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> iconv_t <span class="title">iconv_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* to_code, <span class="keyword">const</span> <span class="keyword">char</span>* from_code)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">iconv_close</span><span class="params">(<span class="keyword">iconv_t</span> cd)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="iconv-open"><a href="#iconv-open" class="headerlink" title="iconv_open"></a>iconv_open</h3><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><p>此函数说明将要进行哪两种编码的转换，并返回一个转化句柄。</p>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>tocode:目标编码</li>
<li>fromcode : 原编码</li>
</ul>
<h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h4><p>此函数用于从inbuf中读取数据并将转换到指定编码的的数据输出到outbuf中，若转换成功，则输出本次转化的字节数，否则返回sizeof_t(-1)</p>
<h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>cd : 转换描述符,由iconv_open获得</li>
<li>inbuf:输入缓冲区</li>
<li>in_left_buf :输入缓冲区还未转换的字符数</li>
<li>outbuf : 输出缓冲区</li>
<li>out_len_buf:输出缓冲区的剩余空间.</li>
</ul>
<h3 id="iconv-close"><a href="#iconv-close" class="headerlink" title="iconv_close"></a>iconv_close</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">iconv_close</span><span class="params">(<span class="keyword">iconv_t</span> cd)</span></span>;</div></pre></td></tr></table></figure>
<p>用于关闭iconv_open打开的文件描述符</p>
<h2 id="举例转换函数"><a href="#举例转换函数" class="headerlink" title="举例转换函数"></a>举例转换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convertCode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; p_str, <span class="keyword">const</span> <span class="keyword">char</span>* from, <span class="keyword">const</span> <span class="keyword">char</span>* to)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> * <span class="built_in">sin</span>, * sout;</div><div class="line">  <span class="keyword">int</span> lenin, lenout, ret;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> BUF_LEN = <span class="number">10240</span>;</div><div class="line">  <span class="keyword">char</span> bufOut[BUF_LEN];</div><div class="line">  <span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(<span class="string">""</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">memset</span>(bufOut, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(bufOut));</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">iconv_t</span> cd;</div><div class="line">  <span class="keyword">if</span> ((cd = iconv_open(to, from)) == (<span class="keyword">iconv_t</span>)(<span class="number">-1</span>)) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"open iconv error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lenin = p_str.length();</div><div class="line">  lenout = BUF_LEN;</div><div class="line"></div><div class="line">  <span class="built_in">sin</span> = (<span class="keyword">char</span>*)p_str.c_str();</div><div class="line">  sout = bufOut;</div><div class="line"><span class="comment">//  std::cout &lt;&lt; sin &lt;&lt; std::endl;</span></div><div class="line">  <span class="comment">//std::cout &lt;&lt; lenin &lt;&lt; std::endl;</span></div><div class="line">  <span class="comment">//std::cout &lt;&lt; lenout &lt;&lt; std::endl;</span></div><div class="line"></div><div class="line">  ret = iconv(cd, &amp;<span class="built_in">sin</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span> * &gt;(&amp;lenin), &amp;sout, <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span> * &gt;(&amp;lenout));</div><div class="line"></div><div class="line">  <span class="comment">//errno:84:Invalid or incomplate multibyte or wide character</span></div><div class="line">  <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; strerror(errno) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (errno != <span class="number">84</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bufout:"</span> &lt;&lt; bufOut &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bufout end"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  iconv_close(cd);</div><div class="line"></div><div class="line">  result.assign(bufOut, BUF_LEN - lenout);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> s = <span class="string">"哈哈"</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.length() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  s = convertCode(s, <span class="string">"gbk"</span>, <span class="string">"utf-8//IGNORE"</span>);</div><div class="line">  <span class="comment">//std::cout &lt;&lt; s &lt;&lt; std::endl;</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.length() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="iconv函数出现段错误的原因"><a href="#iconv函数出现段错误的原因" class="headerlink" title="iconv函数出现段错误的原因"></a>iconv函数出现段错误的原因</h2><p>使用iconv函数进行转换的时候可能会出现段错误，这里出现这个错误的主要原因是注意看iconv函数的函数原型:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div></pre></td></tr></table></figure></p>
<p>长度为size_t的指针，<strong>int指针转换为size_t指针在一些系统的转换过程会出现问题</strong>，导致长度出现错误，内存越界，出现段错误。错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">from_gbk (irreversible=0x7fffffffb188, outend=0x61d7c0 &quot;&quot;, outptrp=&lt;synthetic pointer&gt;,</div><div class="line">    inend=0xa7ffffffdb76 &lt;error: Cannot access memory at address 0xa7ffffffdb76&gt;,</div><div class="line">    inptrp=0x7fffffffb2e8, step_data=0x6157d0, step=0x615030) at ../iconv/loop.c:325</div><div class="line">325	../iconv/loop.c: No such file or directory.</div></pre></td></tr></table></figure>
<h3 id="size-t与int类型"><a href="#size-t与int类型" class="headerlink" title="size_t与int类型"></a>size_t与int类型</h3><p>size_t类型是在stddef.h文件中定义。size_t的类型与操作系统相关，在32位架构中被普遍定义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">size_t</span>;</div></pre></td></tr></table></figure></p>
<p>在64为机器中被定义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">size_t</span>;</div></pre></td></tr></table></figure></p>
<p>int类型在32和64为机器上的长度都是4位，long在32位机器为4位，在64位机器为8位。所以在64为机器上,size_t和int指针转换的过程中一定会出现问题，在32为系统中的正整数指针不会指针，但是负整数也会出现问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C中编码问题&quot;&gt;&lt;a href=&quot;#C中编码问题&quot; class=&quot;headerlink&quot; title=&quot;C中编码问题&quot;&gt;&lt;/a&gt;C中编码问题&lt;/h1&gt;&lt;h2 id=&quot;编码介绍&quot;&gt;&lt;a href=&quot;#编码介绍&quot; class=&quot;headerlink&quot; title=&quot;编
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>C++中find_if查找vector中的特定struct以及值域查询</title>
    <link href="http://yoursite.com/2017/07/15/C++%E4%B8%ADfind_if%E6%9F%A5%E6%89%BEvector%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9Astruct%E4%BB%A5%E5%8F%8A%E5%80%BC%E5%9F%9F%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/07/15/C++中find_if查找vector中的特定struct以及值域查询/</id>
    <published>2017-07-15T09:47:20.000Z</published>
    <updated>2017-07-15T10:30:01.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中find-if查找vector中的特定struct以及值域查询"><a href="#C-中find-if查找vector中的特定struct以及值域查询" class="headerlink" title="C++中find_if查找vector中的特定struct以及值域查询"></a>C++中find_if查找vector中的特定struct以及值域查询</h1><p>由于struct不是C++中的内置类型所以不能用std::find直接查找，而且find函数不能满足值域的查询。这个时候需要使用find_if来进行查询。</p>
<h2 id="find-if函数"><a href="#find-if函数" class="headerlink" title="find_if函数"></a>find_if函数</h2><p>find_if是一个模板函数，函数原型及函数定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator, <span class="keyword">class</span> Predicate&gt;</div><div class="line"><span class="function">InputIterator <span class="title">find_if</span><span class="params">(InputIterator first, InputIterator end, Predicate pred)</span> </span>&#123;</div><div class="line">  <span class="keyword">while</span> (first != last &amp;&amp; !pred(*first)) ++first;</div><div class="line">  <span class="keyword">return</span> first;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>first : 起始迭代器</li>
<li>end :   结束迭代器</li>
<li>pred : 用于比较数值的函数或者函数对象(仿函数)。遍历条件即为pred()为真.</li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>若有满足pred条件的元素，返回该元素的迭代器，否则返回end.</p>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>该函数最重要的环节是pred，它的<strong>核心环节是重载()运算符，因为每个容器迭代器的*运算符得到的结果都是该容器的value_type的值，所以改重载函数的参数类型是value_type的引用类型</strong>。</p>
<h2 id="find-if函数应用"><a href="#find-if函数应用" class="headerlink" title="find_if函数应用"></a>find_if函数应用</h2><p>在struct的vector中查找特定的对象.<strong>特别注意的是：仿函数的参数类型是值的const引用，但是finder的构造参数是实际要比较的值的类型，在使用过程中,向构造函数中传的值是要比较的值。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> book&#123;</div><div class="line">	<span class="keyword">int</span> m_iID;</div><div class="line">	<span class="built_in">string</span> m_strName;</div><div class="line"></div><div class="line">	book(<span class="keyword">int</span> t_id, <span class="built_in">string</span> t_name):m_iID(t_id), m_strName(t_name) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> book_finder&#123;</div><div class="line">	<span class="keyword">int</span> m_iID;</div><div class="line">	book_finder(<span class="keyword">int</span> t_id):m_iID(t_id) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> book&amp; t)</span> </span>&#123;<span class="keyword">return</span> t.m_iID == m_iID;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;book&gt; bookVc;</div><div class="line">	<span class="function">book <span class="title">book1</span><span class="params">(<span class="number">0</span>, <span class="string">"书0"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book2</span><span class="params">(<span class="number">1</span>, <span class="string">"书1"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book3</span><span class="params">(<span class="number">2</span>, <span class="string">"书2"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book4</span><span class="params">(<span class="number">3</span>, <span class="string">"书3"</span>)</span></span>;</div><div class="line"></div><div class="line">	bookVc.push_back(book1);</div><div class="line">	bookVc.push_back(book2);</div><div class="line">	bookVc.push_back(book3);</div><div class="line">	bookVc.push_back(book4);</div><div class="line"></div><div class="line">	<span class="function">book <span class="title">target</span><span class="params">(<span class="number">1</span>, <span class="string">"书"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::find_if(bookVc.begin(), bookVc.end(), book_finder(target.m_iID)) != bookVc.end()) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"存在1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	target.m_iID = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::find_if(bookVc.begin(), bookVc.end(), book_finder(target.m_iID)) != bookVc.end()) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"存在10"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在10"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-中find-if查找vector中的特定struct以及值域查询&quot;&gt;&lt;a href=&quot;#C-中find-if查找vector中的特定struct以及值域查询&quot; class=&quot;headerlink&quot; title=&quot;C++中find_if查找vector中的特定s
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="struct" scheme="http://yoursite.com/tags/struct/"/>
    
  </entry>
  
  <entry>
    <title>rapidjson创建型</title>
    <link href="http://yoursite.com/2017/06/21/rapidjson%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/21/rapidjson创建型/</id>
    <published>2017-06-21T12:35:00.000Z</published>
    <updated>2017-07-03T02:44:44.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rapidjson创建型"><a href="#rapidjson创建型" class="headerlink" title="rapidjson创建型"></a>rapidjson创建型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &quot;rapidjson/document.h&quot;</div><div class="line">#include &quot;rapidjson/stringbuffer.h&quot;</div><div class="line">#include &quot;rapidjson/writer.h&quot;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace rapidjson;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    Document d;</div><div class="line">    d.SetObject();</div><div class="line">    std::string s = &quot;123&quot;;</div><div class="line">    rapidjson::Document::AllocatorType&amp; allocator = d.GetAllocator();</div><div class="line"></div><div class="line">    //生成含有数组的document，注意在rapidjson中所有的数据都是一个Value，数组的本质也是一个Array;</div><div class="line">    rapidjson::Value arr(rapidjson::kArrayType);</div><div class="line"></div><div class="line">    arr.PushBack(&quot;1&quot;, allocator);</div><div class="line">    arr.PushBack(&quot;2&quot;, allocator);</div><div class="line">    arr.PushBack(rapidjson::StringRef(s.c_str()), allocator);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //生成数组中包含有多个obj的数组</div><div class="line">    rapidjson::Value o1;</div><div class="line">    o1.SetObject();</div><div class="line">    o1.AddMember(&quot;o1&quot;, 1, allocator);</div><div class="line">    arr.PushBack(o1, allocator);</div><div class="line">    rapidjson::Value o2;</div><div class="line">    o2.SetObject();</div><div class="line">    o2.AddMember(&quot;o2&quot;, 2, allocator);</div><div class="line">    arr.PushBack(o2, allocator);</div><div class="line"></div><div class="line">    d.AddMember(&quot;arr&quot;, arr, allocator);</div><div class="line">    rapidjson::StringBuffer buffer;</div><div class="line">    rapidjson::Writer&lt;StringBuffer&gt; writer(buffer);</div><div class="line">    d.Accept(writer);</div><div class="line"></div><div class="line">    std::cout &lt;&lt; buffer.GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rapidjson创建型&quot;&gt;&lt;a href=&quot;#rapidjson创建型&quot; class=&quot;headerlink&quot; title=&quot;rapidjson创建型&quot;&gt;&lt;/a&gt;rapidjson创建型&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="rapidjson学习" scheme="http://yoursite.com/categories/rapidjson%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="rapidjson" scheme="http://yoursite.com/tags/rapidjson/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程之socket异步编程</title>
    <link href="http://yoursite.com/2017/06/15/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8Bsocket%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/06/15/Unix网络编程之socket异步编程/</id>
    <published>2017-06-15T01:48:43.000Z</published>
    <updated>2017-06-15T03:20:13.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程之socket异步编程"><a href="#Unix网络编程之socket异步编程" class="headerlink" title="Unix网络编程之socket异步编程"></a>Unix网络编程之socket异步编程</h1><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>我们常用ioctlsocket的FIONBIO模式对socket进行设置是否启用异步。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctlsocket</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">long</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span>* args)</span></span>;</div></pre></td></tr></table></figure></p>
<p>ioctlsocket函数的作用是获取<strong>与套接字sockfd相关的操作参数，可用于任何状态的任一套接字，与具体的协议无关</strong>.</p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>sockfd : 待操作的socket描述符</li>
<li>cmd : 对sockfd的做操类型,包括以下几种<ul>
<li>FIONBIO : 允许或者禁止套接字sockfd的费阻塞模式，若args为1，则是允许非阻塞模式；若args为0，禁止非阻塞模式。</li>
<li>FIONREAD : 确定套接字sockfd自动读入设为数量，arg存储ioctlsocket的返回值.若sockfd是SOCKET_STREAM类型，则FIONREAD返回一次recv所接受的所有的数据量，这通常与套接字中排队的数据总量相同。如果sockfd是SOC_DGRAM类型,则FIONREAD返回套接字上排队的第一个数据报的大小。</li>
<li>SIOCATMARK : 确定是否所有的带外数据都已经被读入，这个类型只适用于SOCK_STREAM套接字接口。</li>
</ul>
</li>
<li>args :　指示参数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程之socket异步编程&quot;&gt;&lt;a href=&quot;#Unix网络编程之socket异步编程&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程之socket异步编程&quot;&gt;&lt;/a&gt;Unix网络编程之socket异步编程&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="ioctlsocket" scheme="http://yoursite.com/tags/ioctlsocket/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程之读写相关函数</title>
    <link href="http://yoursite.com/2017/06/14/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%AF%BB%E5%86%99%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/06/14/Unix网络编程之读写相关函数/</id>
    <published>2017-06-14T13:37:41.000Z</published>
    <updated>2017-06-14T13:48:18.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程之读写相关函数"><a href="#Unix网络编程之读写相关函数" class="headerlink" title="Unix网络编程之读写相关函数"></a>Unix网络编程之读写相关函数</h1><p>socket编程中常用的输入输出函数(读写函数)总共有五对,它们<strong>都是默认阻塞的</strong>，这就意味着当发出一个不能立即完成的套接字调用的时候，其进程将被投入睡眠，等待相应的进程操作完成，函数才返回继续往下执行。常用的函数如下：</p>
<ul>
<li>read, write</li>
<li>readv, writev</li>
<li>recv, send</li>
<li>recvfrom, sendto</li>
<li>recvmsg, sendmsg</li>
</ul>
<h2 id="read-write函数"><a href="#read-write函数" class="headerlink" title="read/write函数"></a>read/write函数</h2><p>read和write函数的详细用法已经在Unix文件IO中已经讲解，在socket编程中的使用方法与文件IO使用方法相同。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程之读写相关函数&quot;&gt;&lt;a href=&quot;#Unix网络编程之读写相关函数&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程之读写相关函数&quot;&gt;&lt;/a&gt;Unix网络编程之读写相关函数&lt;/h1&gt;&lt;p&gt;socket编程中常用的输入输出函数
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="read" scheme="http://yoursite.com/tags/read/"/>
    
      <category term="write" scheme="http://yoursite.com/tags/write/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="readv" scheme="http://yoursite.com/tags/readv/"/>
    
      <category term="writev" scheme="http://yoursite.com/tags/writev/"/>
    
      <category term="recv" scheme="http://yoursite.com/tags/recv/"/>
    
      <category term="send" scheme="http://yoursite.com/tags/send/"/>
    
      <category term="recvfrom" scheme="http://yoursite.com/tags/recvfrom/"/>
    
      <category term="sendto" scheme="http://yoursite.com/tags/sendto/"/>
    
      <category term="recvmsg" scheme="http://yoursite.com/tags/recvmsg/"/>
    
      <category term="senfmsg" scheme="http://yoursite.com/tags/senfmsg/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程之基础函数(一)</title>
    <link href="http://yoursite.com/2017/06/13/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/06/13/Unix网络编程之基础函数(一)/</id>
    <published>2017-06-13T02:17:56.000Z</published>
    <updated>2017-06-14T13:15:42.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程之基础函数-一"><a href="#Unix网络编程之基础函数-一" class="headerlink" title="Unix网络编程之基础函数(一)"></a>Unix网络编程之基础函数(一)</h1><p>TCP客户端与服务器之间交互过程在程序实现上的体现如下图所示,注意思考这个过程中TCP状态的变化(参考TCP状态转换图)：</p>
<p><img src="/images/客户端与服务器交互图.jpg" alt=""></p>
<p>服务器首先调用socket函数创建socket，通过bind函数将socket与主机地址及端口绑定，然后调用listen函数对主机端口进行监听，然后调用accept函数接收客户端发来的请求，若没有客户端请求，服务端将阻塞在此。客户端建立socket，然后调用connect函数与服务器三次握手建立连接，发送请求给服务器，服务器接收到请求之后对其进行处理并将处理结果返回给客户端，这个过程一直持续下去，一直到客户端与服务器断开连接，服务器接下来将关闭连接或继续等待下一个客户端的连接。</p>
<h2 id="socket函数"><a href="#socket函数" class="headerlink" title="socket函数"></a>socket函数</h2><p>为了执行网络IO,无论是客户端还是服务器，一个进程首先要做的事情就是调用socket函数创建一个socket，并指定socket的协议族，类型以及协议。</p>
<h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>family : 协议族，对应于sockaddr_in中的sin_family，IPv4协议时值为AF_INET.</li>
<li>type : 套接字类型，套接字类型有多种，TCP一般使用SOCK_STREAM,UDP使用SOCK_DGRAM<ul>
<li>SOCK_STREAM : 字节流套接字，是一种<strong>有序可靠双向的面向连接字节流</strong>的套接字</li>
<li>SOCK_DGRAM : 数据报套接字,是一种<strong>长度固定,无连接的不可靠</strong>的套接字。</li>
<li>SOCK_SEQPACKET : 有序分组套接字，是一种<strong>长度固定，有序，可靠的面向连接的</strong>有序分组套接字。</li>
<li>SOCK_RAW : 原始套接字</li>
</ul>
</li>
<li>protocal : 链接层传输协议，包括TCP,UDP,SCTP传输协议<ul>
<li>IPPROTO_TCP : TCP传输协议</li>
<li>IPPROTO_UDP : UDP传输协议</li>
<li>IPPROTO_SCTP : SCTP传输协议</li>
</ul>
</li>
</ul>
<p>一般情况下，我们在使用socket函数的时候，可以只指定前两个参数，将第三个参数设为0，这个时候socket会将protocol设置为默认值，如当family=AF_INET,type=SOCK_STREAM时，这个时候默认的协议为IPv4 TCP协议。但是，注意有些组合是不可用的，组合如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th>AF_TNET</th>
<th>AF_INET6</th>
<th>AF_LOCAL</th>
<th>AF_ROUTE</th>
<th>AF_KEY</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SOCK_STREAM</td>
<td>TCP/SCTP</td>
<td>TCP/SCTP</td>
<td>是</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">SOCK_DGRAM</td>
<td>UDP</td>
<td>UDP</td>
<td>是</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">SOCK_SEQPACKET</td>
<td>SCTP</td>
<td>SCTP</td>
<td>是</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">SOCK_RAW</td>
<td>IPv4</td>
<td>IPv6</td>
<td></td>
<td>是</td>
<td>是</td>
</tr>
</tbody>
</table>
<h3 id="返回值说明"><a href="#返回值说明" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>socket函数与open函数类似，若成功，返回一个较小的非负整数,称为套接字描述符，若失败返回-1;</p>
<h2 id="connect函数"><a href="#connect函数" class="headerlink" title="connect函数"></a>connect函数</h2><p>TCP客户端通过connect函数来与服务器建立连接,注意<strong>客户在调用connect函数之前不必调用bind函数将sockfd与本机的IP端口绑定，因为如果需要的话，内核会确定源IP地址，并选择一个可用的临时端口作为端口号</strong>。</p>
<p>客户端调用connect函数的时候会激发三次握手连接建立。而且只在连接建立成功或失败时返回，否则会一直阻塞在connect函数处。</p>
<p>connect函数出错的情况包括以下几种：</p>
<ul>
<li>若TCP在调用connect之后没有接收到syn分节，则返回ETIMEOUT错误。这种情况通常发生在<strong>目的主机不存在情况下</strong>。这时客户端会隔一段时间发送一次请求，若等待时间超过一定时间(这个过程客户端被阻塞)，返回ETIMEOUT错误。</li>
<li>若T客户端收到RST分节(复位)，则返回ECONNREFUSED错误，这种情况发生在<strong>目的主机存在，但是主机上没有进程监听指定端口。</strong></li>
<li>若客户端发送的分节在某个路由器上返回destination unreachable，此时返回EHOSTUNREACH，这种情况发生在<strong>目的主机和端口存在，但是中间路由出现问题</strong>。</li>
</ul>
<p>从TCP状态图可以看出，connect函数可以使得socket状态从closed转移到SYN_SENT状态,若成功，转换到ESTABLISHED状态。若套接字失败不可用，必须关闭。然后重新调用socket函数。</p>
<h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* servaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>sockfd : 此参数为调用sock函数的返回值，即套接字描述符</li>
<li>servaddr : 指向服务器套接字地址结构的指针,套接字地址结构中必须含有Ip地址以及端口。</li>
<li>addrlen : 上述套接字的长度。</li>
</ul>
<h3 id="返回值说明-1"><a href="#返回值说明-1" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>连接失败，返回-1，并将错误码写入errno中;<br>若连接成功，则返回0.</p>
<h2 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h2><p>在建立socket之后，我们通常会将socket与一个套接字绑定，即将一个协议地址赋予给socket，bind函数的作用就是将socket与socket地址绑定。socket协议地址是32位的IPv4地址或128位的IPv6和16位的TCP或UDP端口的组合。</p>
<p>一般情况下，<strong>客户端一般不调用bind函数进行绑定socket地址(可调用)</strong>,当其调用connect函数的时候，内核会获取主机的IP作为源IP，并选择一个可用的端口作为源端口，当然，客户端可以调用bind为socket指定源端口和IP；<strong>服务端一般要调用bind端口，为socket指定监听的端口和IP</strong>，因为一般情况下服务器是对外提供服务的，如http的80端口,https的443端口等等。</p>
<blockquote>
<p>注意：socket绑定的端口必须是<strong>进程所在主机上的网络接口之一</strong>，不能是其他主机的IP，否则会出现“Cannot assign requested address”,也不能绑定已经在使用的端口。</p>
</blockquote>
<h3 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="comment">//函数参数与connect函数中的参数及意义相同。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* servaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<p>bind函数可以只绑定IP，只绑定端口，也可以两者都绑定，也可以两者都不绑定，具体的制定规则如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">IP地址</th>
<th>端口</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">统配地址(INAAR_ANY)</td>
<td>0</td>
<td>内核选择IP地址和端口</td>
</tr>
<tr>
<td style="text-align:center">统配地址(INADDR_ANY)</td>
<td>非0</td>
<td>内核选择IP地址，进程指定地址</td>
</tr>
<tr>
<td style="text-align:center">本地IP地址</td>
<td>0</td>
<td>进程指定IP,内核选择端口</td>
</tr>
<tr>
<td style="text-align:center">本地IP地址</td>
<td>0</td>
<td>进程指定IP和端口</td>
</tr>
</tbody>
</table>
<p>一般情况下，INADDR_ANY的值为0,将其转化为s_addr的时候使用htonl函数(将主机字节序转化为网络字节序)，若是IPv6则不能使用htonl，因为IPv6的地址是一个128位的地址。需要使用另一种方式，具体参考《Unix网络编程卷一第三版》83页。</p>
<p>若设置为内核选定端口，则必须调用<strong>getsockname</strong>函数获取系统选定的端口。<br>从bind函数返回的一个常见的错误是:EADDRINUSE : address already in use;</p>
<h2 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h2><h3 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</div></pre></td></tr></table></figure>
<p>listen函数仅由TCP服务器调用,一般在调用socket和bind函数之后调用 .当进程调用socket函数创建套接字之后，这个套接字被默认假设为主动套接字，(主动套接字的意思是将会调用connect去和TCP服务器建立连接)。listen函数主要有以下两个作用：</p>
<ul>
<li>将一个未连接的套接字转化为主动套接字，指示内核应该接收指向该套接字的连接请求。调用listen成功之后TCP从CLOSED状态转变为LISTEN状态。</li>
<li>指定内核应该为相应套接字排队的最大连接数。即backlog指定，下面两个队列的和不能超过backlog.若查过backlog还有连接请求，服务器将直接发送RST复位拒绝连接。一般不要吧backlog值设为0，因为不同系统实现对0的解释不同;一般讲backlog的值设为5,因为这是4.2BSD支持的最大值。</li>
</ul>
<blockquote>
<p>内核为任何一个给定的监听套接字维护两个队列:</p>
<ul>
<li>未完成连接队列 ：当服务器收到客户端发来的请求之后，数据还没有处理完，此时会进入SYN_RECV状态，这个时候将进入未完成连接队列，也叫SYN队列</li>
<li>已完成连接队列:服务器与客户端之间建立连接之后，进入ESTABLISHED状态，此时进入已完成连接队列，也叫accept队列。</li>
</ul>
</blockquote>
<h2 id="accept函数"><a href="#accept函数" class="headerlink" title="accept函数"></a>accept函数</h2><p>accept函数的作用是从已经完成连接的队列头返回下一个已经完成的连接，如果已完成的连接为空，则进程进入睡眠状态(阻塞)。</p>
<h3 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> servsockfd, <span class="keyword">struct</span> sockaddr* cliaddr, <span class="keyword">socklen_t</span>* addr_len)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>servsockfd : 监听的套接字描述符</li>
<li>cliaddr : 客户端的sockaddr，如果对客户端的来源不感兴趣，可以将其设置为NULL;</li>
<li>addr_len : aliaddr的字节数。即客户端sockaddr的地址长度。</li>
</ul>
<h3 id="返回值说明-2"><a href="#返回值说明-2" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>若出错返回-1;如果accept成功，返回一个新的socket描述符。其代表与所返回的客户端之间的TCP连接，<strong>它是一个连接套接字,之后服务端接收和发送数据都将使用这个描述符进行操作</strong>.</p>
<h3 id="Invalid-argument常见原因"><a href="#Invalid-argument常见原因" class="headerlink" title="Invalid argument常见原因"></a>Invalid argument常见原因</h3><p>在accept的时候,我们常会遇到Invalid argument的错误，出现这个错误的原因有很多，主要是在accept之前的准备工作出了问题。</p>
<ul>
<li>socket创建不成功，在socket函数后检查一下errno值</li>
<li>绑定socket地址不成功，检查一下返回值，同时检查一下errno</li>
<li>没有listen，或者listen出问题。</li>
</ul>
<p>以上三步有一步出问题或者漏掉一步都有可能出现Invalid　argument错误。</p>
<h2 id="close函数"><a href="#close函数" class="headerlink" title="close函数"></a>close函数</h2><p>我们知道，关闭文件描述符我可使用close函数，同样的close函数也能用来关闭socket文件描述符。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span>;</div></pre></td></tr></table></figure></p>
<p>通常情况下,close一个TCP套接字只是将该socket描述符标记为不可用，这个时候其将不能作为read和write的第一个参数进行数据的发送和接收,然而TCP尝试发送已经排队等待的所有需要发送到对端的数据，发送完毕之后将执行正常的TCP连接终止流程关闭TCP连接.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程之基础函数-一&quot;&gt;&lt;a href=&quot;#Unix网络编程之基础函数-一&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程之基础函数(一)&quot;&gt;&lt;/a&gt;Unix网络编程之基础函数(一)&lt;/h1&gt;&lt;p&gt;TCP客户端与服务器之间交互过程
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程之主机字节序与网络字节序</title>
    <link href="http://yoursite.com/2017/06/12/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/06/12/Unix网络编程之主机字节序与网络字节序/</id>
    <published>2017-06-12T11:20:46.000Z</published>
    <updated>2017-06-12T11:33:25.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程之主机字节序与网络字节序"><a href="#Unix网络编程之主机字节序与网络字节序" class="headerlink" title="Unix网络编程之主机字节序与网络字节序"></a>Unix网络编程之主机字节序与网络字节序</h1><p>在各种计算机体系中，对于字节，字等的存储机制有所不同，但是在网络通信过程中，如果双方交流的信息存储结构不一致，则会导致通信失败的结果。当前计算机中通常采用的字节存储机制主要有两种:<strong>大端规则与小端规则</strong>。<strong>网络通信的过程中的存储机制统一为大端规则。</strong></p>
<h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><blockquote>
<p>参考：<a href="http://www.cppblog.com/tx7do/archive/2015/12/14/71276.html" target="_blank" rel="external">http://www.cppblog.com/tx7do/archive/2015/12/14/71276.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程之主机字节序与网络字节序&quot;&gt;&lt;a href=&quot;#Unix网络编程之主机字节序与网络字节序&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程之主机字节序与网络字节序&quot;&gt;&lt;/a&gt;Unix网络编程之主机字节序与网络字节序&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="主机字节序" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    
      <category term="网络字节序" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程基础之套接字结构</title>
    <link href="http://yoursite.com/2017/06/12/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/06/12/Unix网络编程基础之套接字结构/</id>
    <published>2017-06-12T08:57:47.000Z</published>
    <updated>2017-06-13T02:14:26.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程基础之套接字结构"><a href="#Unix网络编程基础之套接字结构" class="headerlink" title="Unix网络编程基础之套接字结构"></a>Unix网络编程基础之套接字结构</h1><p>大多数的套接字函数都使用到了套接字地址，它们以套接字地址的指针作为参数。每个协议族都定义了自己的套接字地址结构，这些套接字地址结构均以sockaddr_开头，以协议族唯一的后缀结尾。</p>
<h2 id="IPv4套接字地址结构"><a href="#IPv4套接字地址结构" class="headerlink" title="IPv4套接字地址结构"></a>IPv4套接字地址结构</h2><p>IPv4的套接字以sockaddr_in命名，其具体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="keyword">struct</span> in_addr &#123;</div><div class="line">  <span class="keyword">in_addr_t</span> s_addr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> sockaddr_in &#123;</div><div class="line">  uint8 sin_len;            <span class="comment">//套接字的长度,sizeof(struct　sockaddr_in)</span></div><div class="line">  <span class="keyword">sa_family_t</span> sin_family;   <span class="comment">//协议族</span></div><div class="line">  <span class="keyword">in_port_t</span> sin_port;       <span class="comment">//套接字端口</span></div><div class="line"></div><div class="line">  <span class="keyword">struct</span> in_addr sin_addr;  <span class="comment">//套接字地址</span></div><div class="line"></div><div class="line">  <span class="keyword">char</span> sin_zero[<span class="number">8</span>];         <span class="comment">//保留位</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>sin_len : 套接字的长度字段，类型为uint8_t,sizeof(struct sockaddr_in),不是所有的系统都支持。长度字段简化了可变长度的套接字的处理。<strong>在使用过程中无需设置和检查它</strong>，除非涉及路由套接字。</li>
<li>sin_family : 协议族，IPv4的协议族为AF_INET.类型为无符号整形，其长度受系统的影响。若sockaddr_in中含有sin_len字段，其大小为16位，若含有长度字段，其大小为8位。</li>
<li>sin_port : 套接字端口, 一般为uint16_t类型。</li>
<li>sin_addr : 套接字Ip，其类型为in_addr，in_addr中的s_addr类型为uint32_t.</li>
<li>sin_zero : 不常用，若需要在套接字中加入额外字段，使用到此字段，<strong>若不使用将其置为0，一般使用sockaddr_in首先将整个结构置0</strong>。</li>
</ul>
<blockquote>
<p><strong>注意：套接字地址结构仅在本机上使用，虽然结构中的某些字段用在不同主机之间的通信，但是结构体本身不在主机之间传递。</strong></p>
</blockquote>
<h3 id="协议族参数说明"><a href="#协议族参数说明" class="headerlink" title="协议族参数说明"></a>协议族参数说明</h3><p>网络通信过程中有不同的协议族，通常我们在socket地址的sin_family中指出当前通信使用的协议族，不同协议族对应不同的参数，其对应参数如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">sin_family</th>
<th>协议说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AF_INET</td>
<td>IPv4协议</td>
</tr>
<tr>
<td style="text-align:center">AF_INET6</td>
<td>IPv6协议</td>
</tr>
<tr>
<td style="text-align:center">AF_LOCAL</td>
<td>Unix域协议</td>
</tr>
<tr>
<td style="text-align:center">AF_ROUTE</td>
<td>路由套接字协议</td>
</tr>
<tr>
<td style="text-align:center">AF_KEY</td>
<td>密钥套接字</td>
</tr>
</tbody>
</table>
<h2 id="通用套接字地址结构"><a href="#通用套接字地址结构" class="headerlink" title="通用套接字地址结构"></a>通用套接字地址结构</h2><p>套接字函数以套接字地址结构指针作为参数的过程中，由于在C中没有继承的机制，这个时候向套接字函数传递参数的时候，由于不同协议的套接字地址不同，会出现问题。这个时候有一种解决办法就是<strong>传递void*指针给socket函数，但是void空指针的出现在socket函数之后</strong>，所以这个方案不可行。这个时候的解决方案是　<strong>定义一个通用的套接字函数，socket函数的参数为通用套接字地址的指针，传递参数的时候我们将特定的套接字指针强制转换为通用套接字地址指针。</strong>　如bind函数的函数原型为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">struct</span> sockaddr*, <span class="keyword">socklen_t</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<p>通用套接字地址的定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr &#123;</div><div class="line">  <span class="keyword">uint8_t</span> sa_len;</div><div class="line">  <span class="keyword">sa_family_t</span> sa_family;</div><div class="line">  <span class="keyword">char</span> sa_data[<span class="number">14</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Ubuntu16-04中sockaddr-in的定义"><a href="#Ubuntu16-04中sockaddr-in的定义" class="headerlink" title="Ubuntu16.04中sockaddr_in的定义"></a>Ubuntu16.04中sockaddr_in的定义</h2><p>Ubuntu16.04中sockaddr_in的定义在/usr/include/netinet/in.h，注意其不支持sin_len字段，为了保持与通用套接字字符串兼容，其保留字符串的长度直接用通用套接字的大小减去其他字段。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    <span class="keyword">in_port_t</span> sin_port;                 <span class="comment">// Port number.  </span></div><div class="line">    <span class="keyword">struct</span> in_addr sin_addr;            <span class="comment">// Internet address.  </span></div><div class="line"></div><div class="line">    <span class="comment">//Pad to size of struct sockaddr</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr) -</div><div class="line">                          __SOCKADDR_COMMON_SIZE -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程基础之套接字结构&quot;&gt;&lt;a href=&quot;#Unix网络编程基础之套接字结构&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程基础之套接字结构&quot;&gt;&lt;/a&gt;Unix网络编程基础之套接字结构&lt;/h1&gt;&lt;p&gt;大多数的套接字函数都使用到了
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Unix时间相关函数总结.md</title>
    <link href="http://yoursite.com/2017/06/11/Unix%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93-md/"/>
    <id>http://yoursite.com/2017/06/11/Unix时间相关函数总结-md/</id>
    <published>2017-06-11T12:09:08.000Z</published>
    <updated>2017-07-10T08:02:30.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix时间相关函数总结"><a href="#Unix时间相关函数总结" class="headerlink" title="Unix时间相关函数总结"></a>Unix时间相关函数总结</h1><p>在进行Unix编程的过程中，我们不可避免的会遇到需要时间相关的操作，如文件的创建修改时间，数据库中字段插入或更新的时间。</p>
<h2 id="Unix时间相关的类型"><a href="#Unix时间相关的类型" class="headerlink" title="Unix时间相关的类型"></a>Unix时间相关的类型</h2><ul>
<li>time_t</li>
<li>struct timeb</li>
<li>struct timeval</li>
<li>struct timespec</li>
<li>struct tm</li>
<li>clock_t</li>
</ul>
<h3 id="time-t"><a href="#time-t" class="headerlink" title="time_t"></a>time_t</h3><p>time_t是一个有符号的整数类型，表示的含义是从1970年1月1日到某一个时间点的秒数。若为32位系统，由int类型的范围可以推算出，time_t可以表示的时间范围是1901-12-13 20:45:52到2038-０1-19 03:14:07。</p>
<h3 id="struct-ime-b"><a href="#struct-ime-b" class="headerlink" title="struct ime_b"></a>struct ime_b</h3><p>time_b结构体是一个精确到毫秒的结构体，其有四个成员，成员列表如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeb&#123;</div><div class="line">  <span class="keyword">time_t</span> time;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> millitm;</div><div class="line">  <span class="keyword">short</span> timezone;　　　　<span class="comment">//时区标志</span></div><div class="line">  <span class="keyword">short</span> dstflag;　　　　 <span class="comment">//夏令时标志</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可以通过下列函数获取当前的timeb:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ftime</span><span class="params">(<span class="keyword">struct</span> timeb* tb)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="struct-timeval"><a href="#struct-timeval" class="headerlink" title="struct timeval"></a>struct timeval</h3><p>timeval是一个精确到微妙的结构体。其中主要包含两个成员：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeval&#123;</div><div class="line">  <span class="keyword">time_t</span> tv_sec;</div><div class="line">  suseconds tv_usec;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>此值通常通过gettimeofday获取<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval* tv, <span class="keyword">struct</span> timezone* tz)</span></span>; <span class="comment">//timezone参数已废弃，一般设为NULL，</span></div></pre></td></tr></table></figure></p>
<h3 id="struct-timespec"><a href="#struct-timespec" class="headerlink" title="struct timespec"></a>struct timespec</h3><p>timespec是一个精确到纳秒的结构体。其主要包含两个成员<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timespec&#123;</div><div class="line">  <span class="keyword">time_t</span> tv_sec; <span class="comment">//秒</span></div><div class="line">  <span class="keyword">long</span> tv_nsec; <span class="comment">//纳秒</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此结构体一般通过下列函数获取：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">clock_gettime</span><span class="params">(<span class="keyword">clockid_t</span> which_clock, <span class="keyword">struct</span> timespec* tp)</span></span>;</div></pre></td></tr></table></figure></p>
<p>上述参数中which_clock用于标识那种时钟时间，可选值如下</p>
<ul>
<li>CLOCK_REALTIME  　　　　　 : 系统当前时间,1970-1-1开始</li>
<li>CLOCK_MONOTONIC  　　　　　: 系统的启动时间，不能被设置</li>
<li>CLOCK_PROCESS_CPUTIME_ID : 进程运行时间</li>
<li>CLOCK_THREAD_CPUITME_ID  : 线程运行时间</li>
<li>CLOCK_REALTIME_HR        : CLOCK_REALTIME的高精度版本</li>
<li>CLOCK_MONOTONIC_HR       : CLOCK_MONOTONIC的高精度版本</li>
</ul>
<h3 id="struct-tm"><a href="#struct-tm" class="headerlink" title="struct tm"></a>struct tm</h3><p>struct tm被称为一种分解时间，日期和时间被分解成多个独立字段。其形式如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> tm &#123;</div><div class="line">  <span class="keyword">int</span> tm_sec;     <span class="comment">//秒 (0-60)</span></div><div class="line">  <span class="keyword">int</span> tm_min;     <span class="comment">//分 (0-59)</span></div><div class="line">  <span class="keyword">int</span> tm_hour;    <span class="comment">//时 (0-23)</span></div><div class="line">  <span class="keyword">int</span> tm_mday;    <span class="comment">//日 (1-31)</span></div><div class="line">  <span class="keyword">int</span> tm_mon;     <span class="comment">//月 (0-11)</span></div><div class="line">  <span class="keyword">int</span> tm_year;    <span class="comment">//年 (1900-)</span></div><div class="line">  <span class="keyword">int</span> tm_wday;    <span class="comment">//一周中的周几(周日为0)</span></div><div class="line">  <span class="keyword">int</span> tm_yday;    <span class="comment">//一年中的第几天。(1月1号为0)</span></div><div class="line">  <span class="keyword">int</span> m_isdst;    <span class="comment">//DST大于0表示为夏令时时间。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Unix时间相关函数"><a href="#Unix时间相关函数" class="headerlink" title="Unix时间相关函数"></a>Unix时间相关函数</h2><p>Unix时间相关的函数除了上面已经提到的函数还包括以下函数</p>
<ul>
<li>time(time_t timep)</li>
<li>ctime</li>
<li>gmtime</li>
<li>localtime</li>
<li>mktime</li>
<li>asctime</li>
<li>strftime</li>
<li>strptime</li>
</ul>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">time_t</span> time(<span class="keyword">time_t</span>* timep);</div></pre></td></tr></table></figure>
<p>time函数返回当前时间的时间戳，此时间戳为从1970年1月1日到当前时间的时间戳，此值不受时区和夏令时(DST)。此函数的返回值为当前的时间戳，函数参数为time_t指针，当前时间除了返回值之外，还将此时间放入timep中。所以使用time函数时我们<strong>将timep设置为NULL</strong>即可。</p>
<h3 id="ctime"><a href="#ctime" class="headerlink" title="ctime"></a>ctime</h3><h4 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">ctime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">time_t</span>* timep)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h4><p>ctime函数的功能为<strong>将time_t转化为打印字符串格式</strong>。把一个指向time_t的指针timep传入函数ctime,将返回一个长度为26字节的字符串，包含\0和换行符。ctime进行转换的时候，会<strong>考虑时区和夏令时</strong>，所以返回的时间字符串为当地时间。返回时间的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wed Jun  8 14:22:34 2011</div></pre></td></tr></table></figure></p>
<p>特别注意返回的字符串是经由静态分配的，若多次调用此函数，之前获取的时间会受影响。SuSv3规定，调用ctime(),gmtime(),localtime()以及asctime()中的任意一个函数，都可能覆盖其他函数返回的结果。</p>
<blockquote>
<p>静态分配的意思是这些函数返回的数据都是般存在同一个静态变量中，所以下一次的结果会覆盖上一次的数据。如果需要对之前的数据保存，此时需要将结果拷贝到自己分配的内存中。</p>
</blockquote>
<p>###　gmtime和localtime</p>
<h4 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">struct</span> tm* <span class="title">gmtime</span><span class="params">(<span class="keyword">time_t</span>* timep)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> tm* <span class="title">localtime</span><span class="params">(time* timep)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能-1"><a href="#函数功能-1" class="headerlink" title="函数功能"></a>函数功能</h4><p>gmttime和localtime的作用是将time_t值转换为分解时间struct tm类型。他们的主要区别是<strong>gmtime转换为对应于UTC的分解时间，而localtime考虑时区和夏令时</strong>。</p>
<h3 id="mktime"><a href="#mktime" class="headerlink" title="mktime"></a>mktime</h3><h4 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">time_t</span> mktime(<span class="keyword">struct</span> tm* timeptr);</div></pre></td></tr></table></figure>
<p>####　函数功能<br>mktime的作用是将一个<strong>本地时区的分解时间转化为time_t类型</strong>。需要注意的是，mktime可能<strong>改变timeptr所指的内容。若分解时间不符合要求，mktime将其自动转换为有效时间</strong>。如秒为61,此时会将其变成1并讲分加１。</p>
<h3 id="asctime"><a href="#asctime" class="headerlink" title="asctime"></a>asctime</h3><h4 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#incude <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">asctime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> tm* timeptr)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能-2"><a href="#函数功能-2" class="headerlink" title="函数功能"></a>函数功能</h4><p>asc的功能是<strong>将分解时间转化为打印时间，特别注意的是asctime转化的过程中不考虑时区和夏令时</strong>，返回的数据也是静态分配的。</p>
<h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h3><h4 id="函数原型-5"><a href="#函数原型-5" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">size_t</span> strftime(<span class="keyword">char</span>* outstr, <span class="keyword">size_t</span> maxsize, <span class="keyword">const</span> <span class="keyword">char</span>* format, <span class="keyword">const</span> <span class="keyword">struct</span> tm* timeptr);</div></pre></td></tr></table></figure>
<h4 id="函数功能-3"><a href="#函数功能-3" class="headerlink" title="函数功能"></a>函数功能</h4><p>此函数的功能是将分解时间转换为打印时间，并可以指定打印时间的格式为format。不同于ctime和asctime，strftime结果不包含换行符。若返回的字符串超过了maxsize大小，函数返回0指示为转换错误。定义的格式中其格式化字符串可以参考预定义的格式。参考《Linux/Unix系统编程手册.上册》第158页。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix时间相关函数总结&quot;&gt;&lt;a href=&quot;#Unix时间相关函数总结&quot; class=&quot;headerlink&quot; title=&quot;Unix时间相关函数总结&quot;&gt;&lt;/a&gt;Unix时间相关函数总结&lt;/h1&gt;&lt;p&gt;在进行Unix编程的过程中，我们不可避免的会遇到需要时间相关
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="timestap" scheme="http://yoursite.com/tags/timestap/"/>
    
      <category term="分解时间" scheme="http://yoursite.com/tags/%E5%88%86%E8%A7%A3%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>C语言宏定义相关</title>
    <link href="http://yoursite.com/2017/06/11/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/06/11/C语言宏定义相关/</id>
    <published>2017-06-11T08:39:20.000Z</published>
    <updated>2017-06-11T08:53:17.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言宏定义相关"><a href="#C语言宏定义相关" class="headerlink" title="C语言宏定义相关"></a>C语言宏定义相关</h1><p>C语言宏定义在代码编写中很常见，它常会带来一些很高的性能和很方便的写法，在看Linux源码中sockaddr_in的时候遇到宏定义中##。特地在此记录.</p>
<h2 id="宏定义中-用法"><a href="#宏定义中-用法" class="headerlink" title="宏定义中##用法"></a>宏定义中##用法</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>Linux中sockaddr_in的定义在文件/netinet/in.h文件中。具体如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Structure describing an Internet socket address.  */</span></div><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    <span class="keyword">in_port_t</span> sin_port;                 <span class="comment">// Port number.  </span></div><div class="line">    <span class="keyword">struct</span> in_addr sin_addr;            <span class="comment">// Internet address.  </span></div><div class="line"></div><div class="line">    <span class="comment">// Pad to size of struct sockaddr.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr) -</div><div class="line">                           __SOCKADDR_COMMON_SIZE -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __SOCKADDR_COMMON(sa_prefix)\</span></div><div class="line">  sa_family_t sa_prefix##family</div></pre></td></tr></table></figure></p>
<p>从上面可以看出，__SOCKADDR_COMMON的宏定义中出现了##的使用方法。那它在宏定义中的意思是什么呢？</p>
<h3 id="详解"><a href="#详解" class="headerlink" title="##详解"></a>##详解</h3><p>##是一种分隔连接方式。它的作用是先分隔，然后进行强制连接。</p>
<p>在普通的宏定义中，预处理器一般吧空格解释为分段标志，然后进行相应的替换工作。但是这样做的结果是被替换的段之间会出现空格。如果我们不希望这些空格出现，可以使用##来代替空格。</p>
<p>如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> type1(type,name) type name_##type##_type</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> type2(type,name) type name##_##type##_type</span></div></pre></td></tr></table></figure></p>
<p>上述type1(int,c)将被替换为：int name_int_type<br>上述type2(int,c)将被替换为：int c_int_type</p>
<p>故我们再回去看<strong>SOCKADDR_COMMON的宏定义.
</strong>SOCKADDR<em>COMMON (sin</em>);将被解释为sa_family_t sin_family;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C语言宏定义相关&quot;&gt;&lt;a href=&quot;#C语言宏定义相关&quot; class=&quot;headerlink&quot; title=&quot;C语言宏定义相关&quot;&gt;&lt;/a&gt;C语言宏定义相关&lt;/h1&gt;&lt;p&gt;C语言宏定义在代码编写中很常见，它常会带来一些很高的性能和很方便的写法，在看Linux源码中
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="宏定义" scheme="http://yoursite.com/tags/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>protobuffer中string和bytes类型</title>
    <link href="http://yoursite.com/2017/06/07/protoBuffer%E4%B8%ADstring%E4%B8%8Ebyte%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/06/07/protoBuffer中string与byte类型区别/</id>
    <published>2017-06-07T10:04:59.000Z</published>
    <updated>2017-06-07T10:33:18.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="protobuffer中string和bytes类型"><a href="#protobuffer中string和bytes类型" class="headerlink" title="protobuffer中string和bytes类型"></a>protobuffer中string和bytes类型</h1><p>从上一节protobuffer的介绍中我们知道字符串类型在protobuffer中有string和bytes两种类型，那这两种类型有什么区别呢,什么时候用string,什么时候用bytes。在C++中两种类型分别对应的是什么类型.下面将揭开迷雾</p>
<h2 id="string与bytes区别"><a href="#string与bytes区别" class="headerlink" title="string与bytes区别"></a>string与bytes区别</h2><p>按照经验我们知道bytes一般适用于存储二进制数据的，但在C++中,string既可以存储ASCII文本字符串，也能存储任意多个\0的二进制序列，那两者的区别在哪里呢？</p>
<ul>
<li>string类型（protobuffer中的string，与C++区别开）不能存储非法的UTF-8字符，如果遇到该字符，序列化的时候将会出错。</li>
</ul>
<blockquote>
<p>[libprotobuf ERROR google/protobuf/wire_format.cc:1091] String field ‘str’ contains invalid UTF-8 data when serializing a protocol buffer. Use the ‘bytes’ type if you intend to send raw bytes.</p>
</blockquote>
<p>###出现上述错误的原因<br>这里从ProtoBuf的源码进行分析。protoBuf在序列化的过程中，都会调用SerializeFieldWithCachedSizes这个函数。我们看一下序列化string和bytes在序列化过程中的区别。</p>
<p>对于<strong>string</strong>类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> FieldDescriptor::TYPE_STRING: &#123;</div><div class="line">  <span class="built_in">string</span> scratch;</div><div class="line">  <span class="keyword">const</span> <span class="built_in">string</span>&amp; value = field-&gt;is_repeated() ?</div><div class="line">    message_reflection-&gt;GetRepeatedStringReference(</div><div class="line">      message, field, j, &amp;scratch) :</div><div class="line">    message_reflection-&gt;GetStringReference(message, field, &amp;scratch);</div><div class="line">  VerifyUTF8StringNamedField(value.data(), value.length(), SERIALIZE,</div><div class="line">                             field-&gt;name().c_str());</div><div class="line">  WireFormatLite::WriteString(field-&gt;number(), value, output);</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于<strong>bytes</strong>类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> FieldDescriptor::TYPE_BYTES: &#123;</div><div class="line">        <span class="built_in">string</span> scratch;</div><div class="line">        <span class="keyword">const</span> <span class="built_in">string</span>&amp; value = field-&gt;is_repeated() ?</div><div class="line">          message_reflection-&gt;GetRepeatedStringReference(</div><div class="line">            message, field, j, &amp;scratch) :</div><div class="line">          message_reflection-&gt;GetStringReference(message, field, &amp;scratch);</div><div class="line">        WireFormatLite::WriteBytes(field-&gt;number(), value, output);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看到，序列化string和bytes的区别主要在于:<strong>string类型序列化调用了VerifyUTF8StringNamedField函数检验string中是否有非法的UTF-8字符</strong>。其中VerifyUTF8StringNamedField实现如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> WireFormat::VerifyUTF8StringFallback(<span class="keyword">const</span> <span class="keyword">char</span>* data,</div><div class="line">                                          <span class="keyword">int</span> size,</div><div class="line">                                          Operation op,</div><div class="line">                                          <span class="keyword">const</span> <span class="keyword">char</span>* field_name) &#123;</div><div class="line">  <span class="keyword">if</span> (!IsStructurallyValidUTF8(data, size)) &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* operation_str = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">switch</span> (op) &#123;</div><div class="line">      <span class="keyword">case</span> PARSE:</div><div class="line">        operation_str = <span class="string">"parsing"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SERIALIZE:</div><div class="line">        operation_str = <span class="string">"serializing"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="comment">// no default case: have the compiler warn if a case is not covered.</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> quoted_field_name = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (field_name != <span class="literal">NULL</span>) &#123;</div><div class="line">      quoted_field_name = StringPrintf(<span class="string">" '%s'"</span>, field_name);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// no space below to avoid double space when the field name is missing.</span></div><div class="line">    GOOGLE_LOG(ERROR) &lt;&lt; <span class="string">"String field"</span> &lt;&lt; quoted_field_name &lt;&lt; <span class="string">" contains invalid "</span></div><div class="line">               &lt;&lt; <span class="string">"UTF-8 data when "</span> &lt;&lt; operation_str &lt;&lt; <span class="string">" a protocol "</span></div><div class="line">               &lt;&lt; <span class="string">"buffer. Use the 'bytes' type if you intend to send raw "</span></div><div class="line">               &lt;&lt; <span class="string">"bytes. "</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="string和bytes类型在C-和Java中的区别"><a href="#string和bytes类型在C-和Java中的区别" class="headerlink" title="string和bytes类型在C++和Java中的区别"></a>string和bytes类型在C++和Java中的区别</h2><p>protobuf类型在C++和java中的类型对应如下：</p>
<ul>
<li>在C++中，string和bytes的实现都是std::string类型。</li>
<li>在Java中string和bytes类型的实现分别是String和ByteString。</li>
</ul>
<p><strong>为什么bytes类型可以描述string类型，还需要string呢？</strong></p>
<p>根据论坛上说的，string类型在Java中有较多的API可供使用，而bytes较少，所以能定义为string的尽量定义为string，如果字段值确定或者可能含有非法的utf-8编码，则使用bytes类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;protobuffer中string和bytes类型&quot;&gt;&lt;a href=&quot;#protobuffer中string和bytes类型&quot; class=&quot;headerlink&quot; title=&quot;protobuffer中string和bytes类型&quot;&gt;&lt;/a&gt;protobuf
    
    </summary>
    
      <category term="序列化与反序列化" scheme="http://yoursite.com/categories/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="protobuffer" scheme="http://yoursite.com/tags/protobuffer/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
