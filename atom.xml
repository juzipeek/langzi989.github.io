<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-01T10:51:22.245Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(2824759538@qq.com)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案</title>
    <link href="http://yoursite.com/2018/01/01/C%E4%B8%AD%E8%AE%B0%E5%BD%95%E5%9F%BA%E7%A1%80%E5%BA%93%E4%BB%8E32%E4%BD%8D%E5%88%B064%E4%BD%8D%E6%9C%BA%E5%99%A8%E7%A7%BB%E6%A4%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/01/C中记录基础库从32位到64位机器移植导致的一些问题/</id>
    <published>2018-01-01T09:51:00.000Z</published>
    <updated>2018-01-01T10:51:22.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案"><a href="#记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案" class="headerlink" title="记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案"></a>记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案</h1><p>最近程序库从32为向64为机器移植后，在使用过程中出现了一些问题，其中包括上一篇中记录的由于va_list类型不一致导致程序core dump或者出现异常行为的原因，这篇文章记录一下库移植之后出现的小问题。持续更新…</p>
<h2 id="问题一-unsigned-long-int类型长度不兼容并对其按位操作"><a href="#问题一-unsigned-long-int类型长度不兼容并对其按位操作" class="headerlink" title="问题一: unsigned long int类型长度不兼容并对其按位操作"></a>问题一: unsigned long int类型长度不兼容并对其按位操作</h2><p>一般情况下在32位和64位机器单纯使用该类型在不出现数字大小溢出的情况下一般不会出现问题。但是有一种情况需要特别注意，即<strong>当对该unsigned long int进行位操作时，此时的操作结果在32和64位机器的操作结果会不同而导致其他问题。</strong></p>
<p>例如<strong>使用unsigned long int类型作为key对其按位进行加密或哈希</strong>时，这时的加密或哈希结果会出现问题。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>将unsigned long int类型换为uint32_t在64位机器上重新编译</p>
<h2 id="问题二：-32位和64位默认对齐不同导致数据类型大小不同"><a href="#问题二：-32位和64位默认对齐不同导致数据类型大小不同" class="headerlink" title="问题二： 32位和64位默认对齐不同导致数据类型大小不同"></a>问题二： 32位和64位默认对齐不同导致数据类型大小不同</h2><p>在linux系统下，32位机器数据默认以4字节对齐，64为机器默认以8字节对齐。</p>
<p>看如下结构构体:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">char</span>* data[<span class="number">0</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Test) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  Test t;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;t:"</span> &lt;&lt; &amp;t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.a"</span> &lt;&lt; &amp;t.a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.data:"</span> &lt;&lt; &amp;t.data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>32位机器运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8</div><div class="line">&amp;t:0x7ffd49f978b0</div><div class="line">&amp;t.a0x7ffd49f978b0</div><div class="line">&amp;t.data:0x7ffd49f978b4</div></pre></td></tr></table></figure></p>
<p>64位机器运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8</div><div class="line">&amp;t:0x7ffd49f978b0</div><div class="line">&amp;t.a0x7ffd49f978b0</div><div class="line">&amp;t.data:0x7ffd49f978b8</div></pre></td></tr></table></figure></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h4><p>在声明结构体前面加上#pragma pack(1)或#pragma pack(4)，强制改变结构体的对齐方式。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">char</span>* data[<span class="number">0</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Test) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  Test t;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;t:"</span> &lt;&lt; &amp;t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.a"</span> &lt;&lt; &amp;t.a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.data:"</span> &lt;&lt; &amp;t.data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案&quot;&gt;&lt;a href=&quot;#记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案&quot; class=&quot;headerlink&quot; title=&quot;记录C/C++库从32位机器向64为机器移植过程
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="snprintf" scheme="http://yoursite.com/tags/snprintf/"/>
    
      <category term="vsnprintf" scheme="http://yoursite.com/tags/vsnprintf/"/>
    
      <category term="可变参数" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C中va_list在32位和64位机器的区别与差异</title>
    <link href="http://yoursite.com/2018/01/01/C%E4%B8%ADva_list%E7%B1%BB%E5%9E%8B%E5%9C%A832%E4%BD%8D%E5%92%8C64%E4%BD%8D%E6%9C%BA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/01/C中va_list类型在32位和64位机器的区别与使用/</id>
    <published>2018-01-01T07:00:00.000Z</published>
    <updated>2018-01-01T09:49:42.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中va-list在32位和64位机器的区别与差异"><a href="#C中va-list在32位和64位机器的区别与差异" class="headerlink" title="C中va_list在32位和64位机器的区别与差异"></a>C中va_list在32位和64位机器的区别与差异</h1><p>在将程序从32位机器移植到64位机器的过程中经常出现一些奇奇怪怪的错误,这里记录一下在使用可变参数的过程中导致在32位机器上正常运行的程序移植到64位机器上之后出现段错误的发现过程以及解决方案。</p>
<p>首先看下面一段代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(va_list ap)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span>* arg;</div><div class="line">  arg = va_arg(ap, <span class="keyword">char</span>*);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">strlen</span>(arg) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span> </span>&#123;</div><div class="line">  va_list ap;</div><div class="line">  va_start(ap, format);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">    parse(ap);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  va_end(ap);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  test(<span class="string">"hget %s %s"</span>, <span class="string">"abc"</span>, <span class="string">"123456"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<strong>32位机器的运行结果</strong>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">abc</div><div class="line">3</div><div class="line">abc</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>在<strong>64位机器运行结果</strong>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">abc</div><div class="line">3</div><div class="line">123456</div><div class="line">6</div></pre></td></tr></table></figure></p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>出现上述结果的原因是由于va_list类型在32位和64位机器的类型不同导致的.</p>
<h4 id="32位va-list"><a href="#32位va-list" class="headerlink" title="32位va_list"></a>32位va_list</h4><p>在32位上,va_list的定义为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意，由于中间宏过多，这里省去了中间如_VA_LIST宏，直接给出实际定义。</span></div><div class="line"><span class="keyword">typedef</span> va_list <span class="keyword">char</span>**;</div></pre></td></tr></table></figure>
<h4 id="64位va-list"><a href="#64位va-list" class="headerlink" title="64位va_list"></a>64位va_list</h4><p>在64位上va_list定义为一个结构体数组，并且数组中记录了可变参数被读的偏移量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Figure 3.34</div><div class="line">typedef struct &#123;</div><div class="line">   unsigned int gp_offset;</div><div class="line">   unsigned int fp_offset;</div><div class="line">   void *overflow_arg_area;</div><div class="line">   void *reg_save_area;</div><div class="line">&#125; va_list[1];</div></pre></td></tr></table></figure>
<h4 id="程序异常分析"><a href="#程序异常分析" class="headerlink" title="程序异常分析"></a>程序异常分析</h4><p>当在32位机器上将va_list(char**)作为参数传递给函数的时候，该函数将从头开始读取该变长参数，还是使用va_list完毕并<strong>不记录当前va_list被读的偏移量</strong>，所以当第二次传入该va_list还是从头开始读取。</p>
<p>当在64为机器上将va_list(struct 数组)作为参数传递给函数的时候，该函数读取va_list完毕之后，将读取的偏移量记录在结构体中，由于其为数组传入函数，所以该<strong>被调用的函数改变了传入的va_list的偏移量</strong>。导致下次调用该函数从记录的偏移量开始读,造成不可预测或者内存越界等问题。</p>
<h2 id="移植解决方案"><a href="#移植解决方案" class="headerlink" title="移植解决方案"></a>移植解决方案</h2><p>将va_list初始化写到for循环内部，每次调用函数前都初始化va_list即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(va_list ap)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span>* arg;</div><div class="line">  arg = va_arg(ap, <span class="keyword">char</span>*);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">strlen</span>(arg) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">    va_list ap;</div><div class="line">    va_start(ap, format);</div><div class="line">    parse(ap);</div><div class="line">    va_end(ap);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  test(<span class="string">"hget %s %s"</span>, <span class="string">"abc"</span>, <span class="string">"123456"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考:<br><a href="https://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure" target="_blank" rel="external">https://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure</a><br><a href="http://blog.csdn.net/doubleface999/article/details/55798710" target="_blank" rel="external">http://blog.csdn.net/doubleface999/article/details/55798710</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C中va-list在32位和64位机器的区别与差异&quot;&gt;&lt;a href=&quot;#C中va-list在32位和64位机器的区别与差异&quot; class=&quot;headerlink&quot; title=&quot;C中va_list在32位和64位机器的区别与差异&quot;&gt;&lt;/a&gt;C中va_list在3
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="snprintf" scheme="http://yoursite.com/tags/snprintf/"/>
    
      <category term="vsnprintf" scheme="http://yoursite.com/tags/vsnprintf/"/>
    
      <category term="可变参数" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C中snprintf与vsnprintf函数,自定义可变参数格式化字符串</title>
    <link href="http://yoursite.com/2018/01/01/C%E4%B8%ADsnprintf%E4%B8%8Evsnprintf%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/01/C中snprintf与vsnprintf函数/</id>
    <published>2018-01-01T04:59:59.000Z</published>
    <updated>2018-01-01T05:00:17.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中snprintf与vsnprintf函数"><a href="#C中snprintf与vsnprintf函数" class="headerlink" title="C中snprintf与vsnprintf函数"></a>C中snprintf与vsnprintf函数</h1><blockquote>
<p>虽然snprintf函数在开发过程中比较常用,但是其中有一些细节性的问题需要注意。因为snprintf函数不是C中的标准函数，不同的编译器可能对该函数的实现不同，本文说明是基于GCC编译器。</p>
</blockquote>
<h2 id="snprintf函数"><a href="#snprintf函数" class="headerlink" title="snprintf函数"></a>snprintf函数</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>snprintf函数的作用是将格式化的数据写入字符串。其函数原型如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">snprintf</span>(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> n, <span class="keyword">char</span>* format, ...);</div></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>buffer : 存储格式化字符串的buffer</li>
<li>n : 指定格式化字符串的大小,<strong>包括\0</strong></li>
<li>format : 指定需要格式化字符串的format</li>
<li>… : 可变参数</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>该函数的返回值为其期望字符串的长度，而不是实际存入buffer中的字符串的长度。且<strong>不包括\0</strong>。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>特别注意函数原型中的第二个参数包括\0的大小，而返回值为期望大小且不包括\0。</p>
<p>例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line"><span class="comment">//返回值ret = 13,buffer中的内容为123456789</span></div><div class="line"><span class="keyword">int</span> ret = <span class="built_in">snprintf</span>(buffer, <span class="number">10</span>, <span class="string">"%s"</span>, <span class="string">"1234567890abc"</span>);</div><div class="line"></div><div class="line"><span class="built_in">memset</span>(buffer, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(buffer));</div><div class="line"></div><div class="line"><span class="comment">//返回值ret = 3,buffer中的内容为123</span></div><div class="line">ret =<span class="built_in">snprintf</span>(buffer, <span class="number">10</span>, <span class="string">"%s"</span>, <span class="string">"123"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="snprintf与vsnprintf"><a href="#snprintf与vsnprintf" class="headerlink" title="snprintf与vsnprintf"></a>snprintf与vsnprintf</h2><p>snprintf和vsnprintf都是C语言printf家族函数的成员。实际上，snprintf和vsnprintf功能完全一样，只是vsnprintf将snprintf中的可变参数换成了av_list类型。如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span></span>; <span class="comment">//输出到标准输出</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span></span>; <span class="comment">//输出到文件</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span></span>;   <span class="comment">//输出到字符串</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span></span>;   <span class="comment">//输出到字符串</span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, va_list ap)</span></span>; <span class="comment">//输出到标准输出</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">vfprintf</span><span class="params">(FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, va_list ap)</span></span>; <span class="comment">//输出到文件</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">const</span> <span class="keyword">char</span>* format, va_list ap)</span></span>;   <span class="comment">//输出到字符串</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span>* format, va_list ap)</span></span>;   <span class="comment">//输出到字符串</span></div></pre></td></tr></table></figure>
<h3 id="va-list获取"><a href="#va-list获取" class="headerlink" title="va_list获取"></a>va_list获取</h3><p>可变参数va_list获取方式通过下列函数获取,并且总是成对调用</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">va_start(va_list ap, last);</div><div class="line">va_end(va_list ap);</div></pre></td></tr></table></figure>
<h3 id="简单的使用vsnprintf函数实现snprintf"><a href="#简单的使用vsnprintf函数实现snprintf" class="headerlink" title="简单的使用vsnprintf函数实现snprintf"></a>简单的使用vsnprintf函数实现snprintf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_snprintf</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> size, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span> </span>&#123;</div><div class="line">  va_list ap;</div><div class="line">  va_start(ap, format);</div><div class="line">  <span class="keyword">int</span> ret = vsnprintf(buffer, size, format, ap);</div><div class="line">  va_end(ap);</div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C中snprintf与vsnprintf函数&quot;&gt;&lt;a href=&quot;#C中snprintf与vsnprintf函数&quot; class=&quot;headerlink&quot; title=&quot;C中snprintf与vsnprintf函数&quot;&gt;&lt;/a&gt;C中snprintf与vsnprintf
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="snprintf" scheme="http://yoursite.com/tags/snprintf/"/>
    
      <category term="vsnprintf" scheme="http://yoursite.com/tags/vsnprintf/"/>
    
      <category term="可变参数" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux调试工具之strings</title>
    <link href="http://yoursite.com/2017/12/10/Linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B9%8Bstrings/"/>
    <id>http://yoursite.com/2017/12/10/Linux调试工具之strings/</id>
    <published>2017-12-10T10:40:00.000Z</published>
    <updated>2017-12-10T10:42:06.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux调试工具之strings"><a href="#Linux调试工具之strings" class="headerlink" title="Linux调试工具之strings"></a>Linux调试工具之strings</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>strings命令的作用是查找指定<strong>文本文件或者二进制文件</strong>中的可打印字符串。默认打印字符串长度大于等于4的字符串。</p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>-a : 搜索整个文件，而不仅仅是数据段，以寻找可显示的字符串。如果省略这个标志，那么 strings 命令只在对象文件的初始化数据空间内寻找。</li>
<li>-n number(-number):指定寻找打印字符串的最小长度，默认最小长度为4,可以通过此参数设置最小长度为1或2等。最长不能超过4096</li>
<li>-o : 显示可打印字符串以及可打印字符串在文件中的位置，位置以８进制形式显示。</li>
<li>-t format:显示可打印字符串以及可打印字符串在文件中的位置，format可指定显示位置的格式是(o)8,(d)10,(x)16进制。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> l_data =<span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"> a;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>直接使用stirngs,默认只显示长度大于等于4的可打印字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ strings main.cpp</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">int main() &#123;</div><div class="line">  char l_data =0;</div><div class="line">  int a = 0;</div><div class="line">  return 0;</div></pre></td></tr></table></figure>
</li>
<li><p>-n参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$strings -1 main.cpp</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">int main() &#123;</div><div class="line">  char l_data =0;</div><div class="line">  int a = 0;</div><div class="line"> a;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>-o 参数</p>
</li>
</ol>
<p>前面为其在文件中的8进制位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$strings -o main.cpp</div><div class="line">0 #include &lt;stdio.h&gt;</div><div class="line">24 int main() &#123;</div><div class="line">41   char l_data =0;</div><div class="line">63   int a = 0;</div><div class="line">104   return 0;</div></pre></td></tr></table></figure></p>
<ol>
<li>-t format参数<br>-t o参数与-o参数作用一样</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$strings -t d main.cpp</div><div class="line">0 #include &lt;stdio.h&gt;</div><div class="line">20 int main() &#123;</div><div class="line">33   char l_data =0;</div><div class="line">51   int a = 0;</div><div class="line">68   return 0;</div></pre></td></tr></table></figure>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>当我们将多个文件编译到一个库文件或者可执行文件的时候，我们可以通过strings命令查看新增文件的一些可打印字符串是否在库中，来判断该文件是否已经编译到库中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux调试工具之strings&quot;&gt;&lt;a href=&quot;#Linux调试工具之strings&quot; class=&quot;headerlink&quot; title=&quot;Linux调试工具之strings&quot;&gt;&lt;/a&gt;Linux调试工具之strings&lt;/h1&gt;&lt;h2 id=&quot;功能&quot;&gt;&lt;
    
    </summary>
    
      <category term="Linux调试工具" scheme="http://yoursite.com/categories/Linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="调试工具" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
      <category term="strings" scheme="http://yoursite.com/tags/strings/"/>
    
  </entry>
  
  <entry>
    <title>Linux调试工具之readelf</title>
    <link href="http://yoursite.com/2017/12/03/Linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B9%8Breadelf/"/>
    <id>http://yoursite.com/2017/12/03/Linux调试工具之readelf/</id>
    <published>2017-12-03T02:08:00.000Z</published>
    <updated>2017-12-04T12:52:03.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux调试工具之readelf"><a href="#Linux调试工具之readelf" class="headerlink" title="Linux调试工具之readelf"></a>Linux调试工具之readelf</h1><p>readelf命令可以用来查看elf格式文件的信息，与objdump相比,该工具显示的信息较为详细</p>
<h2 id="elf文件"><a href="#elf文件" class="headerlink" title="elf文件"></a>elf文件</h2><p>ELF(excutable and linking format)是一种对象文件格式，用于定义<strong>不同类型的对象文件中存放了那些东西，以及以什么格式存放</strong>。ELF文件可分为三种：</p>
<ul>
<li>可重定位对象文件(relocatable file)</li>
<li>可执行对象文件(excutable file)</li>
<li>可被共享的对象文件(shared object file)</li>
</ul>
<h3 id="可重定位对象文件"><a href="#可重定位对象文件" class="headerlink" title="可重定位对象文件"></a>可重定位对象文件</h3><p>可重定位对象文件中包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据。一般包括如汇编器汇编生成的.o文件</p>
<h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>可执行文件是一个可执行文件，此文件规定了exec()如何创建一个程序的进程映像</p>
<h3 id="可被共享的对象文件"><a href="#可被共享的对象文件" class="headerlink" title="可被共享的对象文件"></a>可被共享的对象文件</h3><p>可被共享的对象文件中包含可在两种上下文中链接的代码和数据。首先链接编辑器可将它与其他可重定位文件和目标文件和可共享目标文件一起处理，生成另外一个目标文件，其次，动态链接器可以将它与某个可执行文件以及其他可共享目标一起组合，创建进程映像。</p>
<h2 id="readelf调试工具"><a href="#readelf调试工具" class="headerlink" title="readelf调试工具"></a>readelf调试工具</h2><p>readelf参数较多，可直接通过readelf -h获取readelf的所有参数及用法，此处只对其中的几个常用参数以及数据详解。</p>
<h3 id="readelf-h"><a href="#readelf-h" class="headerlink" title="readelf -h"></a>readelf -h</h3><p>readelf -h参数的作用是读取指定elf文件的头信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ readelf -h</div><div class="line">ELF Header:</div><div class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</div><div class="line">  Class:                             ELF64</div><div class="line">  Data:                              2&apos;s complement, little endian</div><div class="line">  Version:                           1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI Version:                       0</div><div class="line">  Type:                              EXEC (Executable file)</div><div class="line">  Machine:                           Advanced Micro Devices X86-64</div><div class="line">  Version:                           0x1</div><div class="line">  Entry point address:               0x400800</div><div class="line">  Start of program headers:          64 (bytes into file)</div><div class="line">  Start of section headers:          7344 (bytes into file)</div><div class="line">  Flags:                             0x0</div><div class="line">  Size of this header:               64 (bytes)</div><div class="line">  Size of program headers:           56 (bytes)</div><div class="line">  Number of program headers:         9</div><div class="line">  Size of section headers:           64 (bytes)</div><div class="line">  Number of section headers:         31</div><div class="line">  Section header string table index: 28</div></pre></td></tr></table></figure></p>
<p><strong>重要参数解释:</strong></p>
<ul>
<li>Class : 该elf文件的类型，这里是64位的elf格式</li>
<li>Data : 该参数指明了文件中数据的组织方式是大端规则还是小端规则，此处为二进制存储的小端规则</li>
<li>OS/ABI :　生成该文件的操作系统类型,ABI(Application Binary Interface)</li>
<li>Type : 当前文件的类型,EXEC(可执行文件), REL(可重定位文件)，DYN(可被共享文件)</li>
<li>Machine : 处理器类型</li>
<li>Entry point address : 程序的虚拟地址入口点，可执行文件之外的类型该值为0x0</li>
<li>Start of program headers : 程序头的开始处，从程序入口地址偏移地址开始。程序头table中记录elf文件中段的信息</li>
<li>Start of section headers : 段头的开始处，从程序入口地址偏移地址开始</li>
</ul>
<h3 id="readelf-s"><a href="#readelf-s" class="headerlink" title="readelf -s"></a>readelf -s</h3><p>readelf的作用是用来查看当前elf文件的符号表，符号表中的信息只包括<strong>全局变量和函数名</strong>。<br><strong>动态符号表(.synsym)用来保存与动态链接相关的导入导出符号，不包括模块内的符号;而sy,tab表则保存所有的符号,包括.dynsym中的符号。</strong><br>动态符号表所包含的符号的符号名保存在动态符号字符串表.dynstr中。</p>
<p>如下所示程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//main.c</span></div><div class="line"><span class="keyword">int</span> g_data;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> gs_data;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">  <span class="keyword">char</span> l_data =<span class="number">0</span>;</div><div class="line">  hello();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将上述文件编译汇编成目标文件main.o文件，使用readelf -s main.o，结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Symbol table &apos;.symtab&apos; contains 15 entries:</div><div class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</div><div class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND</div><div class="line">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.cpp</div><div class="line">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1</div><div class="line">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3</div><div class="line">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4</div><div class="line">     5: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    4 _ZL7gs_data</div><div class="line">     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    5</div><div class="line">     7: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    4 _ZZ4mainE7ls_data</div><div class="line">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7</div><div class="line">     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    8</div><div class="line">    10: 0000000000000000     0 SECTION LOCAL  DEFAULT    6</div><div class="line">    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 g_data</div><div class="line">    12: 0000000000000000    22 FUNC    GLOBAL DEFAULT    1 _Z5hellov</div><div class="line">    13: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf</div><div class="line">    14: 0000000000000016    24 FUNC    GLOBAL DEFAULT    1 main</div></pre></td></tr></table></figure></p>
<p>可以看出<strong>全局变量,静态全局变量，静态局部变量，全局函数名</strong>都会出现在符号表中,而局部变量不会被保存在符号表中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux调试工具之readelf&quot;&gt;&lt;a href=&quot;#Linux调试工具之readelf&quot; class=&quot;headerlink&quot; title=&quot;Linux调试工具之readelf&quot;&gt;&lt;/a&gt;Linux调试工具之readelf&lt;/h1&gt;&lt;p&gt;readelf命令可
    
    </summary>
    
      <category term="Linux调试工具" scheme="http://yoursite.com/categories/Linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="调试工具" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
      <category term="readelf" scheme="http://yoursite.com/tags/readelf/"/>
    
  </entry>
  
  <entry>
    <title>VS code配置</title>
    <link href="http://yoursite.com/2017/12/01/VS%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/12/01/VS配置/</id>
    <published>2017-12-01T06:08:00.000Z</published>
    <updated>2017-12-08T08:10:02.048Z</updated>
    
    <content type="html"><![CDATA[<p>#VS Code配置管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;[cpp]&quot;: &#123;</div><div class="line">&quot;editor.quickSuggestions&quot;: false</div><div class="line">&#125;,</div><div class="line">&quot;[c]&quot;: &#123;</div><div class="line">&quot;editor.quickSuggestions&quot;: false</div><div class="line">&#125;,</div><div class="line">&quot;window.zoomLevel&quot;: 0,</div><div class="line">&quot;workbench.colorTheme&quot;: &quot;Monokai&quot;,</div><div class="line">&quot;editor.fontSize&quot;: 22,</div><div class="line">// insert space when type tab</div><div class="line">&quot;editor.insertSpaces&quot;: true,</div><div class="line">&quot;http.proxy&quot;: &quot;http://dev-proxy.oa.com:8080&quot;,</div><div class="line">&quot;files.autoGuessEncoding&quot;: false,</div><div class="line">&quot;files.trimTrailingWhitespace&quot;: true,</div><div class="line">&quot;files.eol&quot;: &quot;\n&quot;,</div><div class="line">&quot;editor.wordWrap&quot;: &quot;on&quot;,</div><div class="line">&quot;editor.minimap.enabled&quot;: false,</div><div class="line">&quot;workbench.editor.enablePreview&quot;: false,</div><div class="line">&quot;codegnuglobal.executable&quot;: &quot;C:\\Program Files\\glo656wb\\bin\\global.exe&quot;,</div><div class="line">&quot;C_Cpp.clang_format_path&quot;: &quot;C:\\Program Files\\LLVM\\bin\\clang-format.exe&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#VS Code配置管理&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;di
    
    </summary>
    
      <category term="配置管理" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++截取定长utf8字符及字符集与字符编码总结.md</title>
    <link href="http://yoursite.com/2017/11/09/C++%E6%88%AA%E5%8F%96utf8%E5%AD%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/09/C++截取utf8字符以及字符编码记录/</id>
    <published>2017-11-09T02:20:08.000Z</published>
    <updated>2017-11-09T03:26:13.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-截取定长utf8字符及字符集与字符编码总结"><a href="#C-截取定长utf8字符及字符集与字符编码总结" class="headerlink" title="C++截取定长utf8字符及字符集与字符编码总结"></a>C++截取定长utf8字符及字符集与字符编码总结</h1><p>之前有个需求要求从一段utf8编码的文字中截取前n个字符，由于文字中包含既有中文又有数字字母等，这些字符所占的字节数都不相同，所以直接截取前Ｍ个字符可能会导致乱码问题。在完成截取之前，需要先了解utf8编码字符的存储规则。后面简单介绍一下常见的字符集及字符编码</p>
<h2 id="utf8编码规则"><a href="#utf8编码规则" class="headerlink" title="utf8编码规则"></a>utf8编码规则</h2><p>在理解utf8编码规则之前先说一下utf16和utf32的编码规则，utf32规定所有的unicode字符集上的所有字符都是用32bit来存储，即可存储的字符数可达2^32个,接近40亿，这明显可以容纳已有的所有字符。utf16编码使用2个字节存储，超过此范围的使用其他特殊技巧处理。使用utf16和utf32有一个问题，就是会受到计算机存储大端规则和小端规则的影响。所以utf16又有utf16_LE和utf16_BE之分。为了解决这个问题，需要在文本文件的开头定义一个BOM(Byte order Mark)，这是一个非打印标志,用此标志来标志当前文本存储是大端存储还是小端存储。</p>
<p>utf8是一种针对unicode的可变长度字符编码，也是一种前缀码，它可以表示unicode标准中的任何字符。且与ascii码兼容，这使得我们处理ascii字符的时候不许做特殊修改。</p>
<p>utf8使用1~6个字符为每个字符编码,但实际使用中只使用了4个。</p>
<p><strong>utf8编码规则</strong>:</p>
<p>(1)对于单字节字符,字节的第一位为0，后面7位为这个字符的unicode码，因此对于ascii码，unicode与ascii保持一致。<br>(2)对于n字节符号(n&gt;1),第一个字节的前n位都为1,第n+1位为0,其他字节的前两位都为10,其余位为实际的unicode位。</p>
<p>规则:</p>
<table>
<thead>
<tr>
<th style="text-align:center">unicode范围</th>
<th style="text-align:left">二进制表示范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">U-00000000 - U-0000007F</td>
<td style="text-align:left">0xxxxxxx</td>
</tr>
<tr>
<td style="text-align:center">U-00000080 - U-000007FF</td>
<td style="text-align:left">110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:center">U-00000800 - U-0000FFFF</td>
<td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:center">U-00010000 - U-001FFFFF</td>
<td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:center">U-00200000 - U-03FFFFFF</td>
<td style="text-align:left">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:center">U-04000000 - U-7FFFFFFF</td>
<td style="text-align:left">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>利用上述utf8编码规则实现C++截取定长字符串。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">string</span> <span class="title">utf8Cut</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;src, <span class="keyword">int</span> utf8Len)</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> ret;</div><div class="line">  <span class="keyword">int</span> utf8LenCnt = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> srcIdx = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> srcLen = src.length();</div><div class="line">  <span class="keyword">int</span> cutLen = <span class="number">0</span>;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</div><div class="line">  <span class="keyword">while</span> (utf8LenCnt &lt; utf8Len &amp;&amp;  srcIdx &lt; srcLen) &#123;</div><div class="line">    tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)src[srcIdx];</div><div class="line">    <span class="keyword">if</span> (tmp &gt;= <span class="number">252</span>)</div><div class="line">      cutLen = <span class="number">6</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt;= <span class="number">248</span>)</div><div class="line">      cutLen = <span class="number">5</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt;= <span class="number">240</span>)</div><div class="line">      cutLen = <span class="number">4</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt;= <span class="number">224</span>)</div><div class="line">      cutLen = <span class="number">3</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt;= <span class="number">192</span>)</div><div class="line">      cutLen = <span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt;= <span class="number">65</span> &amp;&amp; tmp &lt;=<span class="number">90</span>)</div><div class="line">      cutLen = <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      cutLen = <span class="number">1</span>;</div><div class="line">      ret += src.substr(srcIdx, cutLen);</div><div class="line">      srcIdx += cutLen;</div><div class="line">      ++utf8LenCnt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符集与字符编码"><a href="#字符集与字符编码" class="headerlink" title="字符集与字符编码"></a>字符集与字符编码</h2><p><strong>字符集</strong>是一个系统所支持的字符的集合，常见的字符集包括ascii字符集,GB2312字符集,GBK字符集以及unicode字符集。其中ascii字符集包括所有的英文字母数字以及控制字符等等。</p>
<p><strong>字符编码</strong>是用来定义计算机中某个字符的存储和传输规则。</p>
<p>区别：字符集仅仅是一个字符集合，与计算机的存储和传输没有关系,而字符编码规定了计算机中字符的编码规则。</p>
<h3 id="常见的字符集及字符编码"><a href="#常见的字符集及字符编码" class="headerlink" title="常见的字符集及字符编码"></a>常见的字符集及字符编码</h3><ul>
<li>ascii字符集及字符编码:使用一个字符编码,包括所有的字母数字,换行以及控制字符等。</li>
<li>GB*字符集及编码:是一种多字节编码标准,GB表示国标,包括GB2312,GBK等编码，2312是标准号，GB2312涵盖了绝大多数的中文，但是一些生僻字不包含在其中，GBK是对GB2312的扩展.</li>
<li>BIG*:常见的为BIG5字符集及编码，BIG5中收录了大部分的中文繁体，常用语香港台湾等地区。</li>
<li>unicode字符集及编码:unicode又称为统一码，几乎涵盖了所有国家和地区的所有字符，并还在不断的扩充新字符。unicode是一个字符集，而不是编码规则，我们常见的utf8,utf16以及utf32是unicode常见的字符编码.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-截取定长utf8字符及字符集与字符编码总结&quot;&gt;&lt;a href=&quot;#C-截取定长utf8字符及字符集与字符编码总结&quot; class=&quot;headerlink&quot; title=&quot;C++截取定长utf8字符及字符集与字符编码总结&quot;&gt;&lt;/a&gt;C++截取定长utf8字符及字符
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="utf8" scheme="http://yoursite.com/tags/utf8/"/>
    
      <category term="字符串截取" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Unix系统调用hook函数以及使用dl库实现.md</title>
    <link href="http://yoursite.com/2017/10/16/Unix%E7%B3%BB%E7%BB%9Fhook%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8dl%E5%BA%93%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/10/16/Unix系统hook函数以及使用dl库实现/</id>
    <published>2017-10-16T12:30:08.000Z</published>
    <updated>2017-10-16T14:02:34.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix系统调用hook函数以及使用dl库实现"><a href="#Unix系统调用hook函数以及使用dl库实现" class="headerlink" title="Unix系统调用hook函数以及使用dl库实现"></a>Unix系统调用hook函数以及使用dl库实现</h1><blockquote>
<p>参考链接:<a href="http://www.it165.net/os/html/201407/8847.html" target="_blank" rel="external">http://www.it165.net/os/html/201407/8847.html</a></p>
</blockquote>
<p>系统调用属于一种软中断机制(内中断陷阱)，它有操作系统提供的功能入口(sys_call)以及CPU提供的硬件支持(int 3 trap)共同完成。<br>hook系统调用：为当用户代码调用系统调用的时候,我们通过某种手段入侵该系统调用，使得系统调用中除了执行原有的操作,还可以完成我们需要其完成的一些自定义特性，也可以理解为我们为这个函数做了一个钩子。这样我们就可以实现如当一个文件发生写操作的时候，通知所有关注此文件的进程或线程等等。</p>
<h2 id="通过动态链接库挟持系统调用"><a href="#通过动态链接库挟持系统调用" class="headerlink" title="通过动态链接库挟持系统调用"></a>通过动态链接库挟持系统调用</h2><p>在linux操作系统的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接(Runtime linker)，它允许你定义在程序运行前优先加载的动态链接库。loader在进行动态链接的时候，会将有相同符号名的符号覆盖成LD_PRELOAD指定的so文件中的符号。换句话说，可以用我们自己的so库中的函数替换原来库里有的函数，从而达到hook的目的。</p>
<p>上述hook系统调用的方法可以使用dlfcn.h库中的一系列函数实现。<br>example,此函数hook了fcntl系统调用:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="keyword">fcntl_pfn_t</span>)</span><span class="params">(<span class="keyword">int</span> fildes, <span class="keyword">int</span> cmd, ...)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fildes, <span class="keyword">int</span> cmd, ...)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">fcntl_pfn_t</span> g_sys_fcntl_func    = (<span class="keyword">fcntl_pfn_t</span>)dlsym(RTLD_NEXT,<span class="string">"fcntl"</span>);</div><div class="line"></div><div class="line">	va_list arg_list;</div><div class="line">	va_start( arg_list,cmd );</div><div class="line"></div><div class="line">	<span class="keyword">int</span> ret = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">switch</span>( cmd )</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> F_DUPFD:</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> param = va_arg(arg_list,<span class="keyword">int</span>);</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_GETFD:</div><div class="line">		&#123;</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_SETFD:</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> param = va_arg(arg_list,<span class="keyword">int</span>);</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_GETFL:</div><div class="line">		&#123;</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_SETFL:</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> param = va_arg(arg_list,<span class="keyword">int</span>);</div><div class="line">			<span class="keyword">int</span> flag = param;</div><div class="line">			flag |= O_NONBLOCK;</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,flag );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_GETOWN:</div><div class="line">		&#123;</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_SETOWN:</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> param = va_arg(arg_list,<span class="keyword">int</span>);</div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_GETLK:</div><div class="line">		&#123;</div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">flock</span> *<span class="title">param</span> = <span class="title">va_arg</span>(<span class="title">arg_list</span>,<span class="title">struct</span> <span class="title">flock</span> *);</span></div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_SETLK:</div><div class="line">		&#123;</div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">flock</span> *<span class="title">param</span> = <span class="title">va_arg</span>(<span class="title">arg_list</span>,<span class="title">struct</span> <span class="title">flock</span> *);</span></div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> F_SETLKW:</div><div class="line">		&#123;</div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">flock</span> *<span class="title">param</span> = <span class="title">va_arg</span>(<span class="title">arg_list</span>,<span class="title">struct</span> <span class="title">flock</span> *);</span></div><div class="line">			ret = g_sys_fcntl_func( fildes,cmd,param );</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	va_end( arg_list );</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> old = fcntl(STDIN_FILENO, F_GETFL);</div><div class="line">	<span class="built_in">printf</span> (<span class="string">"old:%d\n"</span>, old);</div><div class="line"></div><div class="line">	fcntl(STDIN_FILENO, F_SETFL, old);</div><div class="line"></div><div class="line">	<span class="keyword">int</span> _new = fcntl(STDIN_FILENO, F_GETFL);</div><div class="line">	<span class="built_in">printf</span> (<span class="string">"new:%d\n"</span>, _new);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix系统调用hook函数以及使用dl库实现&quot;&gt;&lt;a href=&quot;#Unix系统调用hook函数以及使用dl库实现&quot; class=&quot;headerlink&quot; title=&quot;Unix系统调用hook函数以及使用dl库实现&quot;&gt;&lt;/a&gt;Unix系统调用hook函数以及使
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="dlopen" scheme="http://yoursite.com/tags/dlopen/"/>
    
      <category term="dlsym" scheme="http://yoursite.com/tags/dlsym/"/>
    
      <category term="动态链接库" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    
      <category term="钩子" scheme="http://yoursite.com/tags/%E9%92%A9%E5%AD%90/"/>
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Linux中dlfcn库相关学习.md</title>
    <link href="http://yoursite.com/2017/10/16/Unix%E4%B8%ADdl%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/10/16/Unix中dl库学习/</id>
    <published>2017-10-16T08:30:08.000Z</published>
    <updated>2017-10-16T08:47:35.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux中dlfcn库相关学习"><a href="#Linux中dlfcn库相关学习" class="headerlink" title="Linux中dlfcn库相关学习"></a>Linux中dlfcn库相关学习</h1><p>在linux中静态链接库和动态链接库是进程之间代码共享的两种方式。Linux在<dlfnc.h>库中提供了加载和处理动态连接库的系统调用,使用非常方便。具体用法如下:</dlfnc.h></p>
<h2 id="dlfcn库中函数说明"><a href="#dlfcn库中函数说明" class="headerlink" title="dlfcn库中函数说明"></a>dlfcn库中函数说明</h2><p>dlfcn库中主要包括四个函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">int</span> flag)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">dlerror</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">dlsym</span><span class="params">(<span class="keyword">void</span>* handler, <span class="keyword">char</span>* symbol)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dlclose</span><span class="params">(<span class="keyword">void</span>* handler)</span></span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>dlopen : 打开一个动态连接库，并返回一个类型为void*的handler,flag为打开模式，可选的模式有两种<ul>
<li>RTLD_LAZY 暂缓决定，等有需要时再解出符号</li>
<li>RTLD_NOW 立即决定，返回前解除所有未决定的符号。</li>
</ul>
</li>
<li>dlerror : 返回dl操作的错误，若没有出现错误，则返回NUlL，否则打印错误信息</li>
<li>dlsym : 查找动态链接库中的符号symbol,并返回该符号所在的地址</li>
<li>dlclose : 关闭动态链接库句柄</li>
</ul>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>动态链接库cal.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cal.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a * b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a / b;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成动态链接库libcal.so<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ -shared -fPIC cal.cpp libcal.so</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIB_LIBRARY_PATH_1 <span class="meta-string">"./libcal.so"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CAC_FUNC)</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">void</span>* handler = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">char</span>* error = <span class="literal">NULL</span>;</div><div class="line">	CAC_FUNC cac_func = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	handler = dlopen(LIB_LIBRARY_PATH_1, RTLD_LAZY);</div><div class="line">	<span class="keyword">if</span> (!handler) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"err:%s\n"</span>, dlerror());</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	dlerror();</div><div class="line"></div><div class="line">  <span class="comment">//此处取对应函数地址,</span></div><div class="line">	*(<span class="keyword">void</span> **) (&amp;cac_func) = dlsym(handler, <span class="string">"add"</span>);</div><div class="line">	<span class="keyword">if</span> ((error = dlerror()) != <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"err:%s"</span>, error);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"add:%d\n"</span>, cac_func(<span class="number">1</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">	cac_func = (CAC_FUNC)dlsym(handler, <span class="string">"sub"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"sub:%d\n"</span>, cac_func(<span class="number">1</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">	cac_func = (CAC_FUNC)dlsym(handler, <span class="string">"mul"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"mul:%d\n"</span>, cac_func(<span class="number">1</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">	cac_func = (CAC_FUNC)dlsym(handler, <span class="string">"div"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"div:%d\n"</span>, cac_func(<span class="number">1</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">	dlclose(handler);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译函数main:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ main.cpp -rdynamic -ldl</div></pre></td></tr></table></figure></p>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add:3</div><div class="line">sub:-1</div><div class="line">mul:2</div><div class="line">div:0</div></pre></td></tr></table></figure></p>
<h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p><strong>特别注意，若使用c++编译动态链接库，一定要在需要使用的符号处添加extern “C”,否则会出现符号找不到的问题。即undefined symbol</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux中dlfcn库相关学习&quot;&gt;&lt;a href=&quot;#Linux中dlfcn库相关学习&quot; class=&quot;headerlink&quot; title=&quot;Linux中dlfcn库相关学习&quot;&gt;&lt;/a&gt;Linux中dlfcn库相关学习&lt;/h1&gt;&lt;p&gt;在linux中静态链接库和动
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="dlopen" scheme="http://yoursite.com/tags/dlopen/"/>
    
      <category term="dlsym" scheme="http://yoursite.com/tags/dlsym/"/>
    
      <category term="动态链接库" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/10/11/AT&amp;T%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/10/11/AT&amp;T汇编学习/</id>
    <published>2017-10-11T02:38:55.297Z</published>
    <updated>2017-10-11T02:38:55.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AT-amp-T汇编学习"><a href="#AT-amp-T汇编学习" class="headerlink" title="AT&amp;T汇编学习"></a>AT&amp;T汇编学习</h1><p>汇编格式主要包括Intel和AT&amp;T汇编格式两种，两种汇编语言的格式在使用上有较大的差别，我们上一章讲解的汇编格式是以intel的风格为例的,但是在Unix和Linux系统中，大部分的汇编语言采用的是AT&amp;T格式。</p>
<blockquote>
<p>注:本节中的实例均以i386处理器中汇编指令为例</p>
</blockquote>
<h2 id="AT-amp-T汇编与intel汇编格式对比"><a href="#AT-amp-T汇编与intel汇编格式对比" class="headerlink" title="AT&amp;T汇编与intel汇编格式对比"></a>AT&amp;T汇编与intel汇编格式对比</h2><table>
<thead>
<tr>
<th style="text-align:center">AT&amp;T</th>
<th style="text-align:center">intel</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pushl %eax</td>
<td style="text-align:center">push eax</td>
<td style="text-align:left">在AT&amp;T格式中，需要在寄存器前面加上%</td>
</tr>
<tr>
<td style="text-align:center">pushl $1</td>
<td style="text-align:center">push 1</td>
<td style="text-align:left">在AT&amp;T中使用$作为前缀表示立即数操作</td>
</tr>
<tr>
<td style="text-align:center">addl $1 %eax</td>
<td style="text-align:center">add eax 1</td>
<td style="text-align:left">AT&amp;T格式的目的操作数和源操作数的顺序与intel格式相反</td>
</tr>
<tr>
<td style="text-align:center">movl val,%al</td>
<td style="text-align:center">mov al, byte ptr val</td>
<td style="text-align:left">AT&amp;T格式操作数的长度由操作符的最后一个字母标识,分别是(movw[word],movl(long)movb[byte])</td>
</tr>
<tr>
<td style="text-align:center">section:disp(base, index, scale)</td>
<td style="text-align:center">section:[base + index*scale + disp]</td>
<td style="text-align:left">内存寻址方式不同</td>
</tr>
</tbody>
</table>
<h2 id="简单汇编代码分析"><a href="#简单汇编代码分析" class="headerlink" title="简单汇编代码分析"></a>简单汇编代码分析</h2><p>下面一段代码的作用是在屏幕上打印helloworld。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.data                             # 数据段，该段的数据为初始化数据</div><div class="line">        msg: .string &quot;helloworld&quot; #定义string类型变量msg，并赋初始值helloworld</div><div class="line">        len = . - msg             #使用段的起始地址和msg地址相减的方式计算msg的长度</div><div class="line">.text                             #代码段初始位置</div><div class="line">.global _start                    #使得连接程序看得到该symbol，这样就可以在其他文件中引用</div><div class="line"></div><div class="line">_start:                 </div><div class="line">        movl    $len,%edx         #edx中存储要打印的数据的长度</div><div class="line">        movl    $msg,%ecx         #ecx中存储打印为数据内容</div><div class="line">        movl    $1,%ebx           #ebx中为文件描述符,其中1为标准输出流的文件描述符</div><div class="line">        movl    $4,%eax           #eax中为系统调用号,4表示sys_write</div><div class="line">        int     $0x80             #调用内核功能执行,此段代码执行后屏幕上打印出helloworld</div><div class="line"></div><div class="line">        movl    $0,%ebx           #0标识退出代码</div><div class="line">        movl    $1,%eax           #1为系统调用号(sys_exit)</div><div class="line">        int     $0x80             #调用内核功能运行代码</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AT-amp-T汇编学习&quot;&gt;&lt;a href=&quot;#AT-amp-T汇编学习&quot; class=&quot;headerlink&quot; title=&quot;AT&amp;amp;T汇编学习&quot;&gt;&lt;/a&gt;AT&amp;amp;T汇编学习&lt;/h1&gt;&lt;p&gt;汇编格式主要包括Intel和AT&amp;amp;T汇编格式两种，两
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Unix中select,poll,epoll详解</title>
    <link href="http://yoursite.com/2017/10/08/Unix%E4%B8%ADSelectPollEpoll%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/08/Unix中SelectPollEpoll详解/</id>
    <published>2017-10-08T09:01:00.000Z</published>
    <updated>2017-10-09T08:17:37.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix中select-poll-epoll详解"><a href="#Unix中select-poll-epoll详解" class="headerlink" title="Unix中select,poll,epoll详解"></a>Unix中select,poll,epoll详解</h1><p>网络应用需要处理的问题无非两类,网络I/O和数据计算问题。<br>在处理计算密集型任务的时候,期间会有一些网络IO操作(如写数据库的操作，非本机)，此时若使用同步IO,则会造成大量的IO等待，造成CPU使用率较低。所以此时考虑其他IO模型如异步模型。</p>
<p>Unix下网络I/O模型包括五类:</p>
<ul>
<li>阻塞式IO</li>
<li>非阻塞式IO</li>
<li>多路复用IO</li>
<li>信号驱动IO(边缘触发)</li>
<li>异步IO</li>
</ul>
<p>其中多路复用I/O机制是通过select,poll以及epoll进行监视。这里暂时只介绍多路复用IO,若想了解其他IO模型,参考《Unix网络编程》第六章</p>
<h2 id="多路复用I-O模型"><a href="#多路复用I-O模型" class="headerlink" title="多路复用I/O模型"></a>多路复用I/O模型</h2><p>网络I/O的本质是socket的读取,socket在linux系统中被抽象为流,所以I/O操作可以理解为对流的操作。这个操作包括两个阶段:</p>
<ul>
<li>等待流数据准备就绪(wait for data be ready)</li>
<li>从内核相进程复制数据</li>
</ul>
<p>由于非阻塞调用的过程中，轮训占据了大部分的过程，所以轮训会占据大量的CPU时间。如果轮训不是进程的用户态，而是有人帮忙就好了。多路复用正好处理这样的问题。</p>
<p>多路复用的过程：多路复用有两个特别的系统调用select和poll。select调用是内核级别的，select轮训相对于非阻塞的轮训区别在于：前者可以等待多个socket，当其中一个socket数据准备好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到进程中，拷贝的过程是阻塞的。</p>
<p>多路复用有两种阻塞，select或poll调用之后，会阻塞进程，与第一种阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。也可以理解为”非阻塞”吧。</p>
<p><img src="/images/multiplex.png" alt=""></p>
<blockquote>
<p>类比钓鱼过程:在钓鱼的时候,我们雇了一个帮手，他可以同时抛下多个鱼竿，任何一个鱼竿的鱼一上钩，他就会拉杆。他只负责帮我们钓鱼，并不处理，所以我们在一旁等着，等他收杆之后，我们再进行处理。</p>
<p>多路复用既然可以处理多个IO,也就带来了新的问题：多个IO的顺序不能保证</p>
<p>多路复用的特点多路复用通过一种机制一个进程能同时等待多个IO文件描述符，内核监视这些文件描述符（socket描述符），其中任意一个进入读就绪状态时，select,poll.epoll函数就可以返回。对于监视的方式，有可以分为select,poll,和epoll三种方式。</p>
</blockquote>
<h2 id="select函数详解"><a href="#select函数详解" class="headerlink" title="select函数详解"></a>select函数详解</h2><p>###　函数原型</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;select.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfdp1, fd_set* readset, fd_set* writeset, fd_set* except_set, <span class="keyword">const</span> struct timeval* timeout)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>该函数允许进程指示内核等待多个事件中的其中一个发生，并只在有一个或多个事件发生或者经历了一段时间之后才唤醒它。</p>
<p>其中等待的事件类型包括三种:指定集合中的描述符处于可读状态,执行集合中的描述符处于可写状态,指定集合中的描述符有异常未处理。</p>
<p>描述符就绪的条件如下:</p>
<h4 id="可读就绪"><a href="#可读就绪" class="headerlink" title="可读就绪"></a>可读就绪</h4><p>当描述符满足下列四个条件中的其中一个,表示该描述符已经准备好读</p>
<ul>
<li>该套接字接收缓冲区的字节数大于等于套接字接收缓冲区的低水位标记的大小。一般对于TCP和UDP该值默认为1,我们也可以通过SO_RCVLOWAT套接字选项设置该套接字的低水位标记。</li>
<li>该连接读半部关闭(接受了FIN的TCP连接)，此时函数返回0。</li>
<li>该套接字是一个监听套接字且完成的连接数不为0。对于这种套接字,accept通常不会阻塞。</li>
<li>其上有一个套接字错误待处理.对这种套接字的读操作将不阻塞病返回-1。</li>
</ul>
<h4 id="可写就绪"><a href="#可写就绪" class="headerlink" title="可写就绪"></a>可写就绪</h4><p>当描述符满足下列四个条件中的其中一个,表示该描述符已经准备好写</p>
<ul>
<li>该套接字的发送缓冲区的可用空间字节大于等于套接字发送缓冲区的低水位标记大小。TCP和UDP的默认大小一般为2048。可以使用SO_SNDLOWAT套接字选项来设置该套接字的低水位标记</li>
<li>该链接的写半部关闭</li>
<li>使用非阻塞式connect的套接字建立连接，或者connect以失败告终</li>
<li>其上有一个套接字错误未处理</li>
</ul>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>maxfdp1 : fd_set中最大的描述符+1(特别注意不要忘了+1)，如readset中有{1,2,4}，writeset中有{5,7,9}，except_set中有{2,3,6,10}，则此时的maxfdp1为11</li>
<li>readset : 需要监听的满足可读条件的描述符集合</li>
<li>writeset : 需要监听的满足可写条件的描述符集合</li>
<li>except_set : 需要监听的满足异常的描述符集合</li>
<li>timeout : 等待的时间，若超过此时间,函数返回</li>
</ul>
<h4 id="timeout的三种情况"><a href="#timeout的三种情况" class="headerlink" title="timeout的三种情况"></a>timeout的三种情况</h4><ul>
<li>timeout=NULL,等待时间无限长,即不限等待时间</li>
<li>timeout-&gt;sec=0,timeout-&gt;usec=0。此时不等待，函数立即返回</li>
<li>timeout-&gt;sec!=0 || timeout-&gt;usec != 0。此时为等待时间</li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>当监视的相应的文件描述符集合中存在满足条件的描述符时，比如说读文件描述符集中有数据到来时,内核IO根据状态修改文件描述符集，并返回一个大于0的数</li>
<li>当没有满足条件的描述符且设置的timeval超时时,select函数返回0</li>
<li>出错返回负数</li>
</ul>
<p>若存在满足条件的描述符时，内核会将满足条件的描述符置位，并将其他描述符清0.这时，我们可以通过FD_ISSET来判断当前描述符是否满足条件.<br>如:<br>假设set为8位表示，起始为0000 0000。此时将{1,2,5}设置到读文件描述符集合中,即:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FD_SET(<span class="number">1</span>, &amp;readset);</div><div class="line">FD_SET(<span class="number">2</span>, &amp;readset);</div><div class="line">FD_SET(<span class="number">3</span>, &amp;readset);</div></pre></td></tr></table></figure></p>
<p>置位以后set的位为:0000 0111</p>
<p>当调用select函数，并文件描述符2准备就绪时,此时select函数返回大于0的值，set的值变为:0000 0010。此时使用FD_ISSET可以检测到文件描述符2已经就绪。</p>
<h3 id="fd-set相关操作"><a href="#fd-set相关操作" class="headerlink" title="fd_set相关操作"></a>fd_set相关操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set* <span class="built_in">set</span>)</span></span>;          <span class="comment">//将fd_set清空，一般声明fd_set第一步现先将其清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;   <span class="comment">//将某个fd置位</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;   <span class="comment">//清空某个fd</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;  <span class="comment">//判断fd是否在set中</span></div></pre></td></tr></table></figure>
<h3 id="select函数底层实现原理"><a href="#select函数底层实现原理" class="headerlink" title="select函数底层实现原理"></a>select函数底层实现原理</h3><p>select底层实现的大致原理是,通过轮训文件描述符集中的文件描述符，检查描述符是否达到条件，若达到符合的相关条件则返回，否则轮训，但是当轮训的机制虽然是死循环，但是不是一直轮训，当内核轮训一遍文件描述符之后，会调用schedule_timeout函数挂起，等待fd设备或定时器来唤醒自己，然后再继续循环体看看哪些fd可用，以此提高效率。</p>
<p>若要了解详细的select实现原理参考如下博客:<br><a href="http://janfan.cn/chinese/2015/01/05/select-poll-impl-inside-the-kernel.html" target="_blank" rel="external">http://janfan.cn/chinese/2015/01/05/select-poll-impl-inside-the-kernel.html</a><br><a href="http://zhangyafeikimi.iteye.com/blog/248815" target="_blank" rel="external">http://zhangyafeikimi.iteye.com/blog/248815</a></p>
<h3 id="select函数的特点"><a href="#select函数的特点" class="headerlink" title="select函数的特点"></a>select函数的特点</h3><p>select和poll为水平触发,epoll即支持水平触发也支持边缘触发。</p>
<p>缺点:</p>
<ul>
<li>最大并发数限制:从上面可以看出，被监听的描述符集合的大小受fe_set大小的限制，所以select监听的描述符的个数是有限制的,一般默认个数为1024或4096个等。</li>
<li>效率问题:从select的底层实现可以看出，select每次调用都会线性扫描全部的fd集合,这样效率会出现线性下降,当把FD_SETSIZE增大可能会出现超时.</li>
<li>内核用户空间拷贝问题:从select实现源码中不难看出,描述符集合以及timeout参数都是通过内存拷贝的方式从用户空间拷贝到了内核空间，也是会影响函数的性能。</li>
</ul>
<h2 id="poll函数详解"><a href="#poll函数详解" class="headerlink" title="poll函数详解"></a>poll函数详解</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> fd;     <span class="comment">//file descriptor</span></div><div class="line">  <span class="keyword">short</span> events; <span class="comment">//被监听的事件状态(即select中监听当前描述符是否可写或者可读或者异常等等)</span></div><div class="line">  shor revents; <span class="comment">//函数返回时该文件描述符的状态</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd* fds, <span class="keyword">unsigned</span> <span class="keyword">long</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="函数功能-1"><a href="#函数功能-1" class="headerlink" title="函数功能"></a>函数功能</h3><p>poll的函数功能与select功能基本类似。但是poll函数可监听的文件描述符的个数基本没有限制，poll管理多个文件描述符的方式与select一致,都是轮训，并且都是讲文件描述符数组从用户空间复制到内核空间。</p>
<h3 id="函数参数-1"><a href="#函数参数-1" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>fds : 被监听的描述符的数组</li>
<li>nfds : 数组中描述符的个数,这个大小足以监听linux所有的文件描述的符</li>
<li>timeout : 等待的时间</li>
</ul>
<p>events的合法事件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POLLIN      ---       有数据可读(普通或优先级带数据)等价于POLLRDNORM||POLLRDBAND</div><div class="line">POLLRDNORM  ---       有普通数据可读</div><div class="line">POLLRDBAND  ---       有优先级带数据可读</div><div class="line">POLLPRI     ---       有高优先级数据可读</div><div class="line"></div><div class="line">POLLOUT     ---       有数据可写(普通数据)等价于POLLWRNORM</div><div class="line">POLLWRNORM  ---       有普通数据可写</div><div class="line">POLLWRBBAND ---       有优先级带数据可写</div></pre></td></tr></table></figure></p>
<p>初此之外,revents返回的事件还有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POLLER      ---       发生错误</div><div class="line">POLLHUP     ---       发生挂起</div><div class="line">POLLNVAL    ---       指定的描述符非法，没有打开</div></pre></td></tr></table></figure></p>
<blockquote>
<p>POLLIN | POLLPRI等价于select的读事件</p>
<p>POLLOUT | POLLWRBBAND 等价于select的写事件</p>
</blockquote>
<h3 id="函数返回值-1"><a href="#函数返回值-1" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>若监听的描述符满足条件,返回revents域不为0的文件描述符的个数</li>
<li>若没有描述符满足条件且已过超时时间,poll返回0</li>
<li>出错返回-1，并设置errno为以下值:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">EBADF      ---        一个或多个结构体中的描述符无效</div><div class="line">EFAULTfds  ---        指针指向的地址超出进程的地址空间</div><div class="line">EINTR      ---        请求的时间之前产生一个信号，调用可以重新发起</div><div class="line">EINVALnfds ---        参数超出PLIMIT_NOFILE的值</div><div class="line">ENOMEM     ---        可用内存不足，无法完成请求</div></pre></td></tr></table></figure>
<h3 id="poll函数优缺点"><a href="#poll函数优缺点" class="headerlink" title="poll函数优缺点"></a>poll函数优缺点</h3><p><strong>优点</strong>：</p>
<ul>
<li>poll函数不需要计算最大的文件描述符加1.</li>
<li>poll函数监听的文件描述符的个数不受限制</li>
<li>poll相对于select函数应付大数目的描述符的效率较高。</li>
</ul>
<p><strong>缺点</strong>:</p>
<ul>
<li>poll函数没有解决select轮训所有文件描述符的问题</li>
<li>poll函数和select相同都是将文件描述符信息从用户空间拷贝到内核空间。</li>
</ul>
<h2 id="epoll函数详解"><a href="#epoll函数详解" class="headerlink" title="epoll函数详解"></a>epoll函数详解</h2><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><p>epoll相关数据结构:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//epoll_data保存触发事件相关的数据。(数据类型与具体使用方式有关)</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data&#123;</div><div class="line">  <span class="keyword">void</span>* ptr;</div><div class="line">  <span class="keyword">int</span> fd;</div><div class="line"></div><div class="line">  <span class="keyword">_uint32_t</span> u32;</div><div class="line">  <span class="keyword">_uint64_t</span> u64;</div><div class="line">&#125; <span class="keyword">epoll_data_t</span>;</div><div class="line"></div><div class="line"><span class="comment">//保存感兴趣的事件和被触发的事件</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>&#123;</span></div><div class="line">  <span class="keyword">_uint32_t</span> events;</div><div class="line">  <span class="keyword">epoll_data_t</span> data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中events是一个美剧类型的集合,我们可以使用”|”来增加感兴趣的事件。枚举类型的值包括下面:</p>
<ul>
<li>EPOLLIN : 表示关联的fd可以进行读操作</li>
<li>EPOLLOUT :表示关联的fd可以进行写操作</li>
<li>EPOLLRDHUP(2.6.17之后):表示套接字关闭了连接，或关闭了正写的一半的连接</li>
<li>EPOLLPRI : 表示关联的fd有紧急优先事件可以进行读操作。</li>
<li>EPOLLERR : 表示关联的fd发生了错误，epoll_wait会一直等待这个事件,所以一般没有必要设置这个属性</li>
<li>EPOLLHUP : 表示关联的fd被挂起，epoll_wait会一直等待这个事件,所以一般没有必要设置这个属性</li>
<li>EPOLLET : 设置关联的fd为ET的工作方式,即边缘触发</li>
<li>EPOLLONESHOT : 设置关联的fd为one-shot工作方式,表示只监听一次事件,如果要再次监听，需要把socket放入到epoll队列中。</li>
</ul>
<p>epoll相关的函数有三个。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event* event)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event* events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>epoll_create : 创建一个epoll句柄，注意创建epoll句柄会占用一个文件描述符，在使用完之后需要关闭。否则可能会导致文件描述符耗尽。<ul>
<li>size : size为最大的监听文件描述符数，监听的文件描述符的个数不能超过size可以手动指定，但是这个数值可以达到系统可以开的最大的文件描述符数。</li>
</ul>
</li>
<li>epoll_ctl : epoll的事件注册函数，它不同于select的是，它不是在监听事件的时候告诉内核要监听什么类型的时间，而是先注册要监听的事件类型。<ul>
<li>epfd : epoll文件描述符，即epoll_ create的返回值，表示该epoll描述符注册事件</li>
<li>op : 注册事件的类型包括以下三类。<ul>
<li>EPOLL_CTL_ADD : 注册行的fd到epfd中</li>
<li>EPOLL_CTL_MOD : 修改已经注册的fd的事件类型</li>
<li>EPOLL_CTL_DEL : 删除已经注册的fd</li>
</ul>
</li>
<li>fd : 注册的文件描述符</li>
<li>event : 注册的时间的类型，告诉内核需要监听什么事件，类型包括上面几种。</li>
</ul>
</li>
<li>epoll_wait :　收集epoll监控的时间中已经就绪的事件，若调用成功，返回就绪的文件描述符的个数，返回0表示超时。<ul>
<li>epfd : epoll的文件描述符</li>
<li>events : 已经就绪的事件集合.内核不分配内存，需要程序自己分配内存传给内核，内核只负责将书复制到这里</li>
<li>maxevents : events数组的大小。</li>
<li>timeout : 超时时间。</li>
</ul>
</li>
</ul>
<h3 id="水平触发-LT-与边缘触发-ET"><a href="#水平触发-LT-与边缘触发-ET" class="headerlink" title="水平触发(LT)与边缘触发(ET)"></a>水平触发(LT)与边缘触发(ET)</h3><p>epoll的默认工作模式是水平触发(LT)。NGINX使用的epoll的ET工作模式</p>
<p><strong>水平触发（level_triggered）</strong>:当被监控的文件描述符上有可读可写事件的时,epoll_wait()会通知处理程序去读写。<strong>如果程序没有一次性把缓冲区的数据读完或者写完,那么下次调用epoll_wait的时候，他还会通知你该文件描述符仍可读写,如果你一直不去读写,它会一直通知你。</strong>如果系统中有大量你不需要读写的文件描述符,而他们每次都返回,这样会大大降低处理程序检索自己关心的就绪文件描述符的效率。</p>
<p><strong>边缘触发(edge-triggered)</strong>:当被监控的文件描述符上有读写事件发生时，epoll_wait会通知处理程序去读写，<strong>如果数据没有一次性读写完,那么下次你再调用epoll_wait的时候,它不会通知你，只有等到下一次发生读写事件的时候,它才会通知你</strong>。这种模式比水平触发的效率高，系统不会充斥大量你不关心的文件描述符。</p>
<p><strong>注意</strong>:epoll工作在ET模式的时候,必须使用非阻塞的套接字,以避免由于一个文件句柄的阻塞读/阻塞写把多个文件描述符的任务饿死。最好以下面两种方式调用epoll接口</p>
<ul>
<li>基于非阻塞文件句柄</li>
<li>只有当read/write返回值为EAGAIN时才需要挂起。但这不是说每次都需要循环读，直到读到产生EAGAIN才结束,只要读取到的长度小于预期的长度就说明缓冲区的数据我们已经读完了。</li>
</ul>
<h3 id="epoll族函数底层实现"><a href="#epoll族函数底层实现" class="headerlink" title="epoll族函数底层实现"></a>epoll族函数底层实现</h3><p>epoll的使用方法上面已经有详细的描述，借口也简单易用。首先我们通过epoll_create创建一个epoll文件描述符，然后在epoll文件描述符上注册需要监听的事件，最后使用epoll_wait等待准备就绪的文件描述符。然而在每一步的过程中，内核都做了哪些操作？底层的实现方式是怎么样的？</p>
<p>内核使用了slab机制，为epoll提供了高效快速的数据结构。在内核中,epoll向内核注册了一个文件系统，用于存储被监控的文件描述符的信息。epoll在被内核初始化的时候（操作系统启动），同时会开辟出epoll自己的告诉cache区，用于安置我们需要监控的fd信息,这些fd信息会以<strong>红黑树</strong>的结构保存在内核cache中，以支持快速的查找,插入删除操作。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p>
<p>epoll fd在内核中对应的数据够如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct eventpoll &#123;</div><div class="line">    spin_lock_t       lock;        //对本数据结构的访问</div><div class="line">    struct mutex      mtx;         //防止使用时被删除</div><div class="line">    wait_queue_head_t     wq;      //sys_epoll_wait() 使用的等待队列</div><div class="line">    wait_queue_head_t   poll_wait;       //file-&gt;poll()使用的等待队列</div><div class="line">    struct list_head    rdllist;        //事件满足条件的链表</div><div class="line">    struct rb_root      rbr;            //用于管理所有fd的红黑树（树根）</div><div class="line">    struct epitem      *ovflist;       //将事件到达的fd进行链接起来发送至用户空间</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当向系统中添加一个fd时，就创建一个epitem结构体，这是内核管理epoll的基本数据结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct epitem &#123;</div><div class="line">    struct rb_node  rbn;        //用于主结构管理的红黑树</div><div class="line">    struct list_head  rdllink;  //事件就绪队列</div><div class="line">    struct epitem  *next;       //用于主结构体中的链表</div><div class="line">    struct epoll_filefd  ffd;   //这个结构体对应的被监听的文件描述符信息</div><div class="line">    int  nwait;                 //poll操作中事件的个数</div><div class="line">    struct list_head  pwqlist;  //双向链表，保存着被监视文件的等待队列，功能类似于select/poll中的poll_table</div><div class="line">    struct eventpoll  *ep;      //该项属于哪个主结构体（多个epitm从属于一个eventpoll）</div><div class="line">    struct list_head  fllink;   //双向链表，用来链接被监视的文件描述符对应的struct file。因为file里有f_ep_link,用来保存所有监视这个文件的epoll节点</div><div class="line">    struct epoll_event  event;  //注册的感兴趣的事件,也就是用户空间的epoll_event</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>当调用epoll_create的时候，会首先在epoll内存中为分配一个eventpoll的内存大小，以保存当前的epoll描述符(epfd)结构，然后在这块内存上打开一个epoll文件。</li>
<li>当调用epoll_ctl的时候，如果增加fd（socket），则检查在红黑树中是否存在，存在立即返回，不存在则添加到红黑树上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪list链表中插入数据。当我们调用epoll_ctl往里塞入百万个fd时，epoll_wait仍然可以飞快的返回，并有效的将发生事件的fd给我们用户。这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的fd外，还会再建立一个list链表，用于存储准备就绪的事件。</li>
<li>调用epoll_wait的时候立即返回准备就绪链表中的数据即可。</li>
</ol>
<p>如此，一颗红黑树，一张准备就绪fd链表，少量的内核cache，就帮我们解决了大并发下的fd（socket）处理问题。</p>
<p>如果需要了解更详细的epoll底层实现，参考一下链接:<br><a href="http://www.cnblogs.com/apprentice89/p/3234677.html" target="_blank" rel="external">http://www.cnblogs.com/apprentice89/p/3234677.html</a></p>
<h3 id="epoll特点"><a href="#epoll特点" class="headerlink" title="epoll特点"></a>epoll特点</h3><ul>
<li>没有文件描述符个数限制</li>
<li>使用注册监听时间的方式，无需每次wait时都将时间从用户空间拷贝到内核空间，节省了内存拷贝的时间。</li>
<li>使用回调机制,无需轮训所有的文件描述符检查状态。</li>
<li>返回值只有准备就绪的文件描述符，检查准备就绪的文件描述符也不需要轮训。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix中select-poll-epoll详解&quot;&gt;&lt;a href=&quot;#Unix中select-poll-epoll详解&quot; class=&quot;headerlink&quot; title=&quot;Unix中select,poll,epoll详解&quot;&gt;&lt;/a&gt;Unix中select,po
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
      <category term="IO模型" scheme="http://yoursite.com/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="epoll" scheme="http://yoursite.com/tags/epoll/"/>
    
      <category term="poll" scheme="http://yoursite.com/tags/poll/"/>
    
      <category term="select" scheme="http://yoursite.com/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>汇编基础之寄存器及汇编指令</title>
    <link href="http://yoursite.com/2017/10/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/06/汇编基础之寄存器与简单指令分析/</id>
    <published>2017-10-06T11:00:48.000Z</published>
    <updated>2017-10-11T02:38:49.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编基础之寄存器及汇编指令"><a href="#汇编基础之寄存器及汇编指令" class="headerlink" title="汇编基础之寄存器及汇编指令"></a>汇编基础之寄存器及汇编指令</h1><blockquote>
<p>参考链接:<br><a href="http://www.cnblogs.com/technology/archive/2010/05/16/1736782.html" target="_blank" rel="external">http://www.cnblogs.com/technology/archive/2010/05/16/1736782.html</a><br><a href="http://anonymalias.github.io/2017/01/09/ucontext-theory/" target="_blank" rel="external">http://anonymalias.github.io/2017/01/09/ucontext-theory/</a></p>
</blockquote>
<p>最近在学习协程方面的知识,在协程的一种实现方式中有一种是用汇编实现的,所以这里再把汇编知识复习一下。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器按照其用途可分为以下4类:</p>
<ul>
<li>数据寄存器</li>
<li>指针及变址寄存器</li>
<li>段寄存器</li>
<li>控制寄存器</li>
</ul>
<h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><p>数据寄存器包括４个16位的寄存器(AX,BX,CX,DX)或者8个8位的寄存器(AH,AL,BH,BL,CH,CL,DH,DL)，这些寄存器都是用来暂时存放操作数，运算结果或者其他信息，但同时又具有某些专门的用途。</p>
<ul>
<li>AX(累加寄存器):算术运算中的主要寄存器,在乘除运算中用来指定除数和被除数,也是乘除运算后积和商的默认存储单元。,另外<strong>IO指令均使用该寄存器与IO设备传送信息</strong></li>
<li>BX(基址寄存器):指令寻址时常用作基址寄存器，存入偏移量或者偏移量的构成部分。</li>
<li>CX(计数寄存器):在循环指令操作或者串处理指令中隐含计数</li>
<li>DX(数据寄存器):在双字节运算中，与AX构成32位操作数，DX为高16位。在某些IO指令中,DX被用来存放端口地址</li>
</ul>
<h3 id="指针及变址寄存器"><a href="#指针及变址寄存器" class="headerlink" title="指针及变址寄存器"></a>指针及变址寄存器</h3><p>这些寄存器都是16位的寄存器,用来存放16为的操作数或者中间结果，但是更常见的是存放偏移量或者位移量</p>
<ul>
<li>SP(堆栈指针寄存器):指向栈顶的位置,与SS寄存器一起组成栈顶数据的物理地址</li>
<li>BP(基址指针寄存器):系统默认其指向堆栈中的某一单元，即提供栈中该单元偏移量，加段前缀后，BP可作为非堆栈段的地址指针。一般用于识别栈帧的起始位置。</li>
<li>SI(源变址寄存器):与DS联用, 指示数据段中某操作的偏移量. 在做串处理时, SI指示源操作数地址, 并有自动增量或自动减量的功能. 变址寻址时, SI与某一位移量共同构成操作数的偏移量</li>
<li>DI(目的变址寄存器):与DS联用, 指示数据段中某操作数的偏移量, 或与某一位移量共同构成操作数的偏移量. 串处理操作时, DI指示附加段中目的地址, 并有自动增量或减量的功能</li>
</ul>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><ul>
<li>CS(代码段):存放当前程序的指令代码</li>
<li>DS(数据段):存放程序所涉及的源数据以及结果</li>
<li>SS(堆栈段):以先进后出原则的数据区</li>
<li>ES(附加段):辅助数据区，存放串或者其他数据</li>
</ul>
<h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><ul>
<li>IP（指令寄存器）: 存放下一条要执行的指令的偏移量</li>
<li>FR(控制标志位):<ul>
<li>CF(进位标识位):进行加减运算时, 如果最高二进制位产生进位或错位, CF则为1, 否则为0. 程序设计中, 常用条件转移指令JC, JNC指令据此标志位实现转移</li>
<li>PF(奇偶标志位):操作结果中二进制位1的个数为偶数是, PF为1, 某则为0</li>
<li>AF(辅助进位标志位):运算时半字节产生进位或借位时, AF为1, 某则为0. 主要用于BCD码的调整</li>
<li>ZF(零标志位):运算结果为0时, ZF为1, 否则为0</li>
<li>SF(符号标志位):当运算结果的最高位为1时, SF为1, 否则为0. 最高位表示符号数的正和负</li>
<li>TF(跟踪标志位):用于调试程序时进入单步方式工作. TF=1时, 每条指令执行完后产生一个内部中断, 让用户检查指令运行后寄存器, 存储器和各标志位的内容. TF=0时, CPU工作正常, 不产生内部中断</li>
<li>IF(中断允许标志位):IF=1同时中断屏蔽寄存器的相应位为0, 允许系统响应可屏蔽中断, 反之, 不接收外部发出的中断请求</li>
<li>DF(方向位标志位):用于控制串操作时地址指针位移方向. 当DF=1时, 指针向高地址方向移动</li>
<li>OF(溢出标志位):算术运算时结果超出系统所能表示的数的范围. 溢出时, OF=1</li>
</ul>
</li>
</ul>
<p>注意:上述为16位处理其器中的寄存器的名字，在32和64位系统中，寄存器中名字有相应的变化，具体看下面(32位在前面加E,64在前面加R，64位系统的中含有16个64位的通用寄存器):</p>
<p><img src="/images/register.png" alt=""></p>
<h2 id="i386常用的16个寄存器"><a href="#i386常用的16个寄存器" class="headerlink" title="i386常用的16个寄存器"></a>i386常用的16个寄存器</h2><ul>
<li>EAX、EBX、ECX、EDX这四个寄存器，主要就是用来暂时存放计算过程中所用的操作数、结果或其它信息。</li>
<li>ESP为堆栈指针寄存，它和堆栈段寄存器SS共同决定了当前的栈指针，每当执行push,pull操作时，或者因为某些原因（如中断），CPU自动将数据入栈时，就会使用该指针来找到堆栈栈顶（或栈底）的位置，然后执行压栈、出栈的操作。系统管理软件，如操作系统会根据其分配的栈空间地址来设定这两个寄存器的值。</li>
<li>EBP称为基址指针寄存器，它和ESP都可以与堆栈段寄存器SS联用来确定堆栈中的某一存储单元的地址，ESP用来指示段顶的偏移地址，而EBP可作为堆栈区中的一个基地址以便访问堆栈中的信息。</li>
<li>ESI（源变址寄存器）和EDI（目的变址寄存器）一般与数据段寄存器DS联用，用来确定数据段中某一存储单元的地址。这两个变址寄存器有自动增量和自动减量的功能，可以很方便地用于变址。在串处理指令中，ESI和EDI作为隐含的源变址和目的变址寄存器时，ESI和DS联用，EDI和附加段ES联用，分别达到在数据段和附加段中寻址的目的。</li>
<li>EIP指令指针寄存器，它用来存放代码段中的偏移地址。在程序运行的过程中，它始终指向下一条指令的首地址。它与段寄存器CS联用确定下一条指令的物理地址。当这一地址送到存储器后，控制器可以取得下一条要执行的指令，而控制器一旦取得这条指令就马上修改EIP的内容，使它始终指向下一条指令的首地址。那些跳转指令，就是通过修改EIP的值来达到相应的目的的</li>
<li>FLAGS标志寄存器，又称PSW(program status word)，即程序状态寄存器。这一个是存放条件标志码、控制标志和系统标志的寄存器。</li>
<li>段寄存器：一共六个，分别是CS代码段，DS数据段，ES附加段，SS堆栈段，FS以及GS这两个还是附加段。<br>EFLAGS寄存器中的IF位表示是否允许中断，为1允许，否则不允许。</li>
<li>TR寄存器:用来指向当前任务的TSS段</li>
<li>IDTR寄存器:用来指向当前IDT（中断表述符表或者说是中断向量表），因为在保护模式下，IDT的起始地址可以在任何位置，而不仅限于地址0。</li>
<li>GDT和LDT : 前者是全局描述符表，位置由GDTR寄存器确定，后者是局部描述符表，位置由LDTR寄存器确定，具体使用哪一个，取决于段选择码中的TI位。</li>
</ul>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><h3 id="汇编指令格式"><a href="#汇编指令格式" class="headerlink" title="汇编指令格式"></a>汇编指令格式</h3><p>汇编指令的格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[标号:]　指令助记符[[目的操作数][,源操作数]][;注释]</div></pre></td></tr></table></figure></p>
<ul>
<li>指令助记符:如MOV,ADD之类标识传送,加法。不区分大小写</li>
<li>目的操作数:作用有两个,1.参与指令操作2,暂时存储操作结果</li>
<li>源操作数:主要提供原始数据或操作对象。面向所有寻址方式</li>
<li>注释:用分号隔开</li>
</ul>
<p>汇编指令中常见的符号:</p>
<ul>
<li>imme:立即数</li>
<li>DST:目的操作数</li>
<li>SRC:源操作数</li>
<li>mem:存储器操作数</li>
<li>OPR:操作数</li>
<li>reg:通用寄存器</li>
<li>EA:偏移地址</li>
<li>Sreg:段寄存器</li>
<li>Port:端口地址</li>
<li>Lable:标号</li>
</ul>
<p>汇编指令可以分成六类:</p>
<ul>
<li>数据传送指令</li>
<li>算数运算指</li>
<li>逻辑运算与移位指令</li>
<li>串操作指令</li>
<li>程序控制指令</li>
<li>处理器控制指令<h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><h4 id="数据传送指令-1"><a href="#数据传送指令-1" class="headerlink" title="数据传送指令"></a>数据传送指令</h4></li>
<li>MOV DST,SRC(传送指令):把源操作数的内容送入目的操作数<ul>
<li>立即数做源操作数时,立即数的长度必须小于等于目的操作数的长度</li>
<li>操作数分别为reg,reg或reg,sreg或sreg,sreg或reg,sreg时，两者的长度必须保持一致</li>
<li>立即数不能作为目的操作数</li>
<li>CS和IP寄存器不能做目的操作数,不允许用立即数为段寄存器赋值</li>
<li>不能将一个段寄存器的内容直接送到另一个段寄存器中, 可借助通用寄存器或PUSH, POP指令实现这一要求</li>
</ul>
</li>
<li>PUSH SRC(压栈指令): 将一个字数据压入当前栈顶, 位移量disp=-2的地址单元. 数据进栈时, 栈指针SP首先向低地址方向移动两个字节位置, 接着数据进栈, 形成新的栈顶</li>
<li>POP DST(出栈指令):弹出栈顶元素, 后将栈顶指针向栈底方向移动一个字</li>
<li>XCHG OPR1, OPR2(交换指令):交换指令: 将这两个操作数交换</li>
</ul>
<h4 id="地址传送指令"><a href="#地址传送指令" class="headerlink" title="地址传送指令"></a>地址传送指令</h4><ul>
<li>LEA DST, SRC(装载有效指令):该指令将源操作数的偏移量OA装载到目的操作数中</li>
<li>LDS DST, SRC(装载数据段指针指令):将当前数据段中的一个双字数据装入到一个通用寄存器SI(双字数据的低字)和数据段寄存器DS(双字数据的高字)中</li>
<li>LES DST,SRC(装载附加段指针指令):将附加数据段中的一个32位地址数据指针(附加段指针)送到DI(低字)和ES(高字)寄存器中</li>
</ul>
<h4 id="标志传送指令"><a href="#标志传送指令" class="headerlink" title="标志传送指令"></a>标志传送指令</h4><ul>
<li>LAHF(标志寄存器送AH指令): 将标志寄存器的低字节送入AH中</li>
<li>SAHF(AH送标志寄存器指令): 将AH寄存器内容送标志寄存器FR的低字节</li>
<li>PUSHF(标志进栈指令): 标志寄存器进栈</li>
<li>POPF (标志出栈指令): 标志寄存器出栈</li>
</ul>
<h4 id="累加器专用传送指令"><a href="#累加器专用传送指令" class="headerlink" title="累加器专用传送指令"></a>累加器专用传送指令</h4><ul>
<li>IN   AL, Port:从端口读入数据, 存放在AL中</li>
<li>OUT PORT,AL:传送AL中的数据到端口</li>
<li>XLAT OPR或XLAT:用于将AL中当前内容转换为一种代码</li>
</ul>
<h3 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h3><h4 id="加法指令"><a href="#加法指令" class="headerlink" title="加法指令"></a>加法指令</h4><ul>
<li>ADD DST, SRC:DST+SRC的和存放到DST中去</li>
<li>ADC DST, SRC:带进位加法指令, DST+SRC+CF</li>
<li>INC DST:增1指令</li>
</ul>
<h4 id="减法指令"><a href="#减法指令" class="headerlink" title="减法指令"></a>减法指令</h4><ul>
<li>SUB DST, RSC:DST-SRC, 存放到DST中</li>
<li>SBB DST, SRC:带借位减法指令, DST-SRC-CF</li>
<li>DEC DST :减1指令</li>
<li>NEG DST:求补指令, 求补码</li>
<li>CMP OPR1, OPR2:比较指令</li>
</ul>
<h4 id="乘法指令"><a href="#乘法指令" class="headerlink" title="乘法指令"></a>乘法指令</h4><ul>
<li>MUL SRC:无符号数乘指令, AL*SRC, 结果放入AX中</li>
<li>IMUL SRC:有符号数乘指令, AL*SRC, 结果放入AX中</li>
</ul>
<h4 id="除法指令"><a href="#除法指令" class="headerlink" title="除法指令"></a>除法指令</h4><ul>
<li>DIV SRC :无符号数除指令, AX/SRC, 商放入AL中, 余数放在AH中</li>
<li>IDIV SRC:符号数除指令, AX/SRC, 上放入AL中, 余数放在AH中</li>
<li>CBW, CWD:都是符号扩展指令. 将AL的符号扩到AX中; 将AX的符号扩到DX</li>
</ul>
<h3 id="逻辑运算与移位指令"><a href="#逻辑运算与移位指令" class="headerlink" title="逻辑运算与移位指令"></a>逻辑运算与移位指令</h3><h4 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h4><ul>
<li>NOT OPR:逻辑非指令</li>
<li>AND OPR:逻辑与指令</li>
<li>OR OPR:逻辑或指令</li>
<li>XOR OPR :逻辑异或指令</li>
</ul>
<h4 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令:"></a>移位指令:</h4><ul>
<li>SHL DST, CNT:逻辑左移</li>
<li>SHR DST, CNT:逻辑右移</li>
<li>SAL DST, CNT:算术左移</li>
<li>SAR DST, CNT:算术右移</li>
</ul>
<h4 id="循环移位指令"><a href="#循环移位指令" class="headerlink" title="循环移位指令"></a>循环移位指令</h4><ul>
<li>ROL              DST, CNT:循环左移</li>
<li>ROR       DST, CNT:循环右移</li>
<li>RCL        DST, CNT:带进位循环左移</li>
<li>RCR              DST, CNT:带进位循环右移</li>
</ul>
<h3 id="串操作指令"><a href="#串操作指令" class="headerlink" title="串操作指令"></a>串操作指令</h3><ul>
<li>MOVS:串传送指令</li>
<li>CMPS:串比较指令</li>
<li>SCAS:串扫描指令</li>
<li>LODS:装入串指令</li>
<li>STOS:存储串指令</li>
</ul>
<h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><h4 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令:"></a>转移指令:</h4><ul>
<li>JMP:无条件转移指令</li>
<li>JX:条件转移指令(JC/JNC, JZ/JNZ, JE/JNE, JS/JNS, JO/JNO, JP/JNP…)</li>
</ul>
<h4 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h4><ul>
<li>LOOP 标号:该指令执行时, 技术寄存器CXX首先减1, 然后判断CX, 若为0, 跳出循环</li>
</ul>
<h4 id="条件循环指令"><a href="#条件循环指令" class="headerlink" title="条件循环指令"></a>条件循环指令</h4><ul>
<li>LOOPZ/LOOPE, LOOPNZ/LOOPNE:前者用于找到第一个不为0的事件, 后者用于找到第一个为0的事件</li>
</ul>
<h4 id="子程序调用指令"><a href="#子程序调用指令" class="headerlink" title="子程序调用指令"></a>子程序调用指令</h4><ul>
<li>CALL  子程序名:段内直接调用</li>
<li>RET</li>
</ul>
<h4 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h4><ul>
<li>INT N(中断类型号):软中断指令</li>
<li>IRET:中断返回指令</li>
</ul>
<h3 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h3><h4 id="标志处理指令"><a href="#标志处理指令" class="headerlink" title="标志处理指令:"></a>标志处理指令:</h4><ul>
<li>CLC:进位标志CF置0</li>
<li>CMC:进位标志CF求反</li>
<li>STC:进位标志值1</li>
<li>CLD:方向标志置0</li>
<li>STD:方向标志置1</li>
<li>CLI:中断允许标志置0</li>
<li>STI:中断允许标志置1</li>
</ul>
<h4 id="其他处理器控制指令"><a href="#其他处理器控制指令" class="headerlink" title="其他处理器控制指令:"></a>其他处理器控制指令:</h4><ul>
<li>NOP:空操作</li>
<li>HLT:停机</li>
<li>WAIT:等待</li>
<li>ESC:换码</li>
<li>LOCK:封锁</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;汇编基础之寄存器及汇编指令&quot;&gt;&lt;a href=&quot;#汇编基础之寄存器及汇编指令&quot; class=&quot;headerlink&quot; title=&quot;汇编基础之寄存器及汇编指令&quot;&gt;&lt;/a&gt;汇编基础之寄存器及汇编指令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考链接:&lt;br&gt;&lt;a h
    
    </summary>
    
      <category term="汇编" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="寄存器" scheme="http://yoursite.com/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C++协程实现及原理</title>
    <link href="http://yoursite.com/2017/10/06/C++%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/10/06/C++协程实现/</id>
    <published>2017-10-06T09:00:48.000Z</published>
    <updated>2017-10-06T09:20:40.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-协程及其原理"><a href="#C-协程及其原理" class="headerlink" title="C++协程及其原理"></a>C++协程及其原理</h1><h2 id="协程的几种实现方式及原理"><a href="#协程的几种实现方式及原理" class="headerlink" title="协程的几种实现方式及原理"></a>协程的几种实现方式及原理</h2><p>协程又可以称为用户线程,微线程，可以将其理解为单个进程或线程中的多个<strong>用户态线程</strong>，这些微线程在用户态进程控制和调度.协程的实现方式有很多种，包括</p>
<ol>
<li>使用glibc中的ucontext库实现</li>
<li>利用汇编代码切换上下文</li>
<li>利用C语言语法中的switch-case的奇淫技巧实现(protothreads)</li>
<li>利用C语言的setjmp和longjmp实现</li>
</ol>
<p>实际上，无论是上述那种方式实现协程,其原理是相同的，都是通过保存和恢复寄存器的状态，来进行各协程上下文的保存和切换。</p>
<h2 id="协程较于函数和线程的优点"><a href="#协程较于函数和线程的优点" class="headerlink" title="协程较于函数和线程的优点"></a>协程较于函数和线程的优点</h2><ul>
<li>相比于函数:协程避免了传统的函数调用栈，几乎可以无限地递归</li>
<li>相比与线程:协程没有内核态的上下文切换，近乎可以无限并发。协程在用户态进程显式的调度，可以把异步操作转换为同步操作，也意味着不需要加锁,避免了加锁过程中不必要的开销。</li>
</ul>
<p>进程,线程以及协程的设计都是为了并发任务可以更好的利用CPU资源，他们之间最大的区别在于CPU资源的使用上:</p>
<ul>
<li>进程和线程的任务调度是由内核控制的，是抢占式的；</li>
<li>协程的任务调度是在用户态完成,需要代码里显式地将CPU交给其他协程,是协作式的</li>
</ul>
<p>由于我们可以在用户态调度协程任务，所以我们可以把<strong>一组相互依赖的任务设计为协程。这样,当一个协程任务完成之后,可以手动的进行任务切换，把当前任务挂起(yield),切换到另一个协程区工作</strong>.由于我们可以控制程序主动让出资源，很多情况下将不需要对资源进行加锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-协程及其原理&quot;&gt;&lt;a href=&quot;#C-协程及其原理&quot; class=&quot;headerlink&quot; title=&quot;C++协程及其原理&quot;&gt;&lt;/a&gt;C++协程及其原理&lt;/h1&gt;&lt;h2 id=&quot;协程的几种实现方式及原理&quot;&gt;&lt;a href=&quot;#协程的几种实现方式及原理&quot; c
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ucontext_t" scheme="http://yoursite.com/tags/ucontext-t/"/>
    
      <category term="上下文切换" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ucontext族函数详解</title>
    <link href="http://yoursite.com/2017/10/06/ucontext%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/06/ucontext函数详解/</id>
    <published>2017-10-06T08:00:48.000Z</published>
    <updated>2017-10-06T08:05:11.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ucontext族函数详解"><a href="#ucontext族函数详解" class="headerlink" title="ucontext族函数详解"></a>ucontext族函数详解</h1><blockquote>
<p>the ucontext_t type is a structure type suitable for holding the context for the user thread of execution. A thread’s context include stack,saved registersm a list of block signals</p>
<p>上述为ncontext_t结构体的定义，ucontext机制是GNU C库提供的一组创建，保存，切换用户态执行上下文的API，从上面的描述可以看出ucontext_t结构体使得用户在程序中保存当前的上下文成为可能。我们也可以利用此实现用户级线程，即协程。</p>
</blockquote>
<h2 id="ucontext-t以及ucontext族函数"><a href="#ucontext-t以及ucontext族函数" class="headerlink" title="ucontext_t以及ucontext族函数"></a>ucontext_t以及ucontext族函数</h2><h3 id="ucontext-t结构体"><a href="#ucontext-t结构体" class="headerlink" title="ucontext_t结构体"></a>ucontext_t结构体</h3><p>ucontext_t结构体定义,一个ucontext_t至少包括以下四个成员,可能依据不同系统包括其他不同的成员。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> &#123;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span>* <span class="title">uc_link</span>;</span></div><div class="line">  <span class="keyword">sigset_t</span> uc_sigmask;</div><div class="line">  <span class="keyword">stack_t</span> uc_stack;</div><div class="line">  <span class="keyword">mcontext_t</span> uc_mcontext;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>类成员解释:</p>
<ul>
<li>uc_link:为当前context执行结束之后要执行的下一个context，若uc_link为空，执行完当前context之后退出程序。</li>
<li>uc_sigmask : 执行当前上下文过程中需要屏蔽的信号列表，即信号掩码</li>
<li>uc_stack : 为当前context运行的栈信息。</li>
<li>uc_mcontext : 保存具体的程序执行上下文，如PC值，堆栈指针以及寄存器值等信息。它的实现依赖于底层，是平台硬件相关的。此实现不透明。</li>
</ul>
<h3 id="ucontext族函数"><a href="#ucontext族函数" class="headerlink" title="ucontext族函数"></a>ucontext族函数</h3><p>ucontext族函数主要包括以下四个:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;ucontext.h&gt;</div><div class="line">void makecontext(ucontext_t* ucp, void (*func)(), int argc, ...);</div><div class="line">int swapcontext(ucontext_t* olducp, ucontext_t* newucp);</div><div class="line">int getcontext(ucontext_t* ucp);</div><div class="line">int setcontext(const ucontext_t* ucp);</div></pre></td></tr></table></figure></p>
<ul>
<li>makecontext:初始化一个ucontext_t,func参数指明了该context的入口函数，argc为入口参数的个数，每个参数的类型必须是int类型。另外在makecontext之前，一般需要显示的初始化栈信息以及信号掩码集同时也需要初始化uc_link，以便程序退出上下文后继续执行。</li>
<li>swapcontext:原子操作，该函数的工作是保存当前上下文并将上下文切换到新的上下文运行。</li>
<li>getcontext:将当前的执行上下文保存在ucp中，以便后续恢复上下文</li>
<li>setcontext : 将当前程序切换到新的context,在执行正确的情况下该函数直接切换到新的执行状态，不会返回。</li>
</ul>
<blockquote>
<p>注意:setcontext执行成功不返回，getcontext执行成功返回0，若执行失败都返回-1。若uc_link为NULL,执行完新的上下文之后程序结束。</p>
</blockquote>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">newContextFun</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is the new context"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> <span class="built_in">stack</span>[<span class="number">10</span>*<span class="number">1204</span>];</div><div class="line"></div><div class="line">  <span class="comment">//get current context</span></div><div class="line">  <span class="keyword">ucontext_t</span> curContext;</div><div class="line">  getcontext(&amp;curContext);</div><div class="line"></div><div class="line">  <span class="comment">//modify the current context</span></div><div class="line">  <span class="keyword">ucontext_t</span> newContext = curContext;</div><div class="line">  newContext.uc_stack.ss_sp = <span class="built_in">stack</span>;</div><div class="line">  newContext.uc_stack.ss_size = <span class="keyword">sizeof</span>(<span class="built_in">stack</span>);</div><div class="line">  newContext.uc_stack.ss_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">  newContext.uc_link = &amp;curContext;</div><div class="line"></div><div class="line">  <span class="comment">//register the new context</span></div><div class="line">  makecontext(&amp;newContext, (<span class="keyword">void</span>(*)(<span class="keyword">void</span>))newContextFun, <span class="number">0</span>);</div><div class="line">  swapcontext(&amp;curContext, &amp;newContext);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"main\n"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ucontext族函数详解&quot;&gt;&lt;a href=&quot;#ucontext族函数详解&quot; class=&quot;headerlink&quot; title=&quot;ucontext族函数详解&quot;&gt;&lt;/a&gt;ucontext族函数详解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;the ucontext_
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ucontext_t" scheme="http://yoursite.com/tags/ucontext-t/"/>
    
      <category term="上下文切换" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C/C++语言内存对齐</title>
    <link href="http://yoursite.com/2017/10/02/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%AF%B9%E5%85%B6%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/10/02/C语言内存对其相关/</id>
    <published>2017-10-02T06:30:08.000Z</published>
    <updated>2017-10-02T06:31:43.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-C-语言内存对齐"><a href="#C-C-语言内存对齐" class="headerlink" title="C/C++语言内存对齐"></a>C/C++语言内存对齐</h1><p><strong>内存对齐</strong>:在计算机中，内存空间按照字节划分，理论上可以从任何起始地址访问任何类型的变量。但实际上在访问特定类型的变量的时候需要从特定的地址开始，这就需要各种类型的数据按照一定的规则在空间上排列，而不是顺序的一个接一个的存放，这就是内存对齐，也叫字节对齐。</p>
<p><strong>内存对齐的作用</strong>:</p>
<ul>
<li>可移植性:因为不同平台对数据的在内存中的访问规则不同,不是所有的硬件都可以访问任意地址上的数据，某些硬件平台只能在特定的地址开始访问数据。所以需要内存对齐。</li>
<li>性能原因:一般使用内存对齐可以提高CPU访问内存的效率。如32位的intel处理器通过总线访问内存数据，每个总线周期从偶地址开始访问32位的内存数据，内存数据以字节为单位存放。如果32为的数据没有存放在４字节整除的内存地址处，那么处理器需要<strong>两个总线周期</strong>对数据进行访问，显然效率下降很多；另外合理的利用字节对齐可以有效的节省存储空间。</li>
</ul>
<p><strong>默认内存对齐影响因素</strong>:与平台架构(位数)和编译器的默认设置有关。</p>
<blockquote>
<p>总线周期:CPU通过总线和存储器或者IO设备进行一次数据传输需要的时间，通常为四个或者多个时钟周期组成。</p>
</blockquote>
<h2 id="内存对齐规则"><a href="#内存对齐规则" class="headerlink" title="内存对齐规则"></a>内存对齐规则</h2><ol>
<li>整体类型的对齐规则:若设置了内存对齐为m个字节,类中的最大成员的对齐字节为n，则该数据类型的对齐字节为p=min(m,n)。(一般32位机器的默认pack为4位；64位机器的默认pack为8位,程序中可以显式设置pack的大小)</li>
<li>类型中成员的对齐规则:类中的第一个成员放在offset为0的位置；对于其他成员，若设置了内存对齐为m个字节,假设该数据成员的对齐字节数(即当前成员所占的字节数)为k,则该数据成员的起始位置是min(m,k)的整数倍。</li>
<li>整体对齐规则:最后整个类型的大小为p=min(m,n)的整数倍。</li>
<li>当设置对齐字节数大于类中最大成员的对齐字节数的时候，这个设置实际不产生任何效果；当设置对齐字节数为1时,类的大小就是简单的把所有成员大小相加。</li>
</ol>
<p>实例:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//前提条件:32位机器，当前编译器默认pack为4</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">short</span> b;</div><div class="line">  <span class="keyword">int</span> c;</div><div class="line">  <span class="keyword">double</span> d;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; offsetof(T, a) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, b) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, c) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, d) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据上面的分析:</p>
<ul>
<li>a为第一个成员,offset为0。</li>
<li>b为short，对齐字节数为2,所以其对齐字节为min(2,4)=2，故offset为4</li>
<li>c为int,对齐字节数为4,所以其对齐字节数为min(4,4)=4，故offset为8</li>
<li>d为double，对齐字节数为8,故对齐字节数为min(4,8)=8，故offset为12</li>
<li>总的大小为20,是,min(8,4)的倍数．</li>
</ul>
<h2 id="使用pragma-pack修改系统默认pack"><a href="#使用pragma-pack修改系统默认pack" class="headerlink" title="使用pragma pack修改系统默认pack"></a>使用pragma pack修改系统默认pack</h2><p>修改系统的默认pack可以使用系统函数pragma的pack参数，但是修改之后的<strong>pack一定是2的n次幂</strong>。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(16)     <span class="comment">//修改pack修改为16</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()       <span class="comment">//恢复系统的默认pack</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(show)   <span class="comment">//返回系统当前的pack，由警告信息显示，注意gcc不支持。只有VS支持</span></span></div></pre></td></tr></table></figure></p>
<p>此外pack还有push,pop其他参数可选，但是不同的编译器对这些参数的实现有不同的含义，如果需要了解可以参考对应的资料。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-C-语言内存对齐&quot;&gt;&lt;a href=&quot;#C-C-语言内存对齐&quot; class=&quot;headerlink&quot; title=&quot;C/C++语言内存对齐&quot;&gt;&lt;/a&gt;C/C++语言内存对齐&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;内存对齐&lt;/strong&gt;:在计算机中，内存空间按照字节
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="内存对齐" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    
      <category term="pack" scheme="http://yoursite.com/tags/pack/"/>
    
  </entry>
  
  <entry>
    <title>异步刷盘与同步刷盘的区别</title>
    <link href="http://yoursite.com/2017/09/29/Message%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%AD%A5%E5%88%B7%E7%9B%98%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    <id>http://yoursite.com/2017/09/29/Message存储服务同步刷盘与异步刷盘/</id>
    <published>2017-09-29T09:05:01.000Z</published>
    <updated>2017-09-29T09:10:34.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步刷盘与同步刷盘的区别"><a href="#异步刷盘与同步刷盘的区别" class="headerlink" title="异步刷盘与同步刷盘的区别"></a>异步刷盘与同步刷盘的区别</h1><p>存储系统往往追求尽量高的吞吐,无论是传统的MySQl还是分布式存储系统Hbase，在写入的时候会尽量提升系统的吞吐。一般来说，提升系统性能的方式是先将数据写入内存中，然后再刷盘到磁盘中进行持久化。</p>
<p>刷盘对应于MySQL中的fsync和hbase中的flush，在mysql中标识将写入的redo log以及bin　Log持久化到磁盘中，这样就保证mysql可以持续的对外提供数据服务;在hbase中表示将MainStore中的数据持久化到磁盘中。一般来说刷盘的方式有<strong>同步刷盘和异步刷盘</strong>两种。</p>
<p>同步刷盘和异步刷盘的区别如下:</p>
<ul>
<li>同步刷盘:当数据写如到内存中之后立刻刷盘(同步)，在保证刷盘成功的前提下响应client。</li>
<li>异步刷盘:数据写入内存后，直接响应client。异步将内存中的数据持久化到磁盘上。</li>
</ul>
<p>同步刷盘和异步输盘的优劣:</p>
<ul>
<li>同步刷盘保证了数据的可靠性,保证数据不会丢失。</li>
<li>同步刷盘效率较低,因为client获取响应需要等待刷盘时间，为了提升效率，通常采用批量输盘的方式，每次刷盘将会flush内存中的所有数据。(若底层的存储为mmap，则每次刷盘将刷新所有的dirty页)</li>
<li>异步刷盘不能保证数据的可靠性.</li>
<li>异步刷盘可以提高系统的吞吐量.</li>
<li>常见的异步刷盘方式有两种,分别是定时刷盘和触发式刷盘。定时刷盘可设置为如每1s刷新一次内存.触发刷盘为当内存中数据到达一定的值，会触发异步刷盘程序进行刷盘。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异步刷盘与同步刷盘的区别&quot;&gt;&lt;a href=&quot;#异步刷盘与同步刷盘的区别&quot; class=&quot;headerlink&quot; title=&quot;异步刷盘与同步刷盘的区别&quot;&gt;&lt;/a&gt;异步刷盘与同步刷盘的区别&lt;/h1&gt;&lt;p&gt;存储系统往往追求尽量高的吞吐,无论是传统的MySQl还是分布
    
    </summary>
    
      <category term="消息队列" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="同步刷盘" scheme="http://yoursite.com/tags/%E5%90%8C%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    
      <category term="异步刷盘" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>LinuxPs命令详解</title>
    <link href="http://yoursite.com/2017/09/29/LinuxPs%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/29/LinuxPs命令使用/</id>
    <published>2017-09-29T06:05:01.000Z</published>
    <updated>2017-09-29T06:57:53.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-ps命令使用详解"><a href="#Linux-ps命令使用详解" class="headerlink" title="Linux ps命令使用详解"></a>Linux ps命令使用详解</h1><p>ps命令常见使用方法有两种，另外我们可以通过一写参数对ps结果进行筛选和过滤。分别是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef</div><div class="line">ps aux</div></pre></td></tr></table></figure></p>
<p>那这两个命令有什么区别呢？下面将对这两个命令进行详细说明和解释。</p>
<h2 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h2><p>返回信息的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         1     0  0 9月24 ?       00:00:25 /sbin/init</div><div class="line">root         2     0  0 9月24 ?       00:00:00 [kthreadd]</div><div class="line">root         3     2  0 9月24 ?       00:00:00 [ksoftirqd/0]</div><div class="line">root         5     2  0 9月24 ?       00:00:00 [kworker/0:0H]</div><div class="line">root         7     2  0 9月24 ?       00:09:13 [rcu_sched]</div><div class="line">root         8     2  0 9月24 ?       00:00:00 [rcu_bh]</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>对以上各列信息进行解释:</p>
<ul>
<li>uid : 用户id</li>
<li>pid : 当前进程的id</li>
<li>ppid : 当前进程的父进程id</li>
<li>C : 进程占用CPU的百分比</li>
<li>STIME : 进程启动时间</li>
<li>CMD : 进程启动命令</li>
</ul>
<p>上述返回值比较容易理解，不一一解释</p>
<h2 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h2><p>返回信息的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.0 120060  5392 ?        Ss   9月24   0:25 /sbin/init</div><div class="line">root         2  0.0  0.0      0     0 ?        S    9月24   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S    9月24   0:00 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S&lt;   9月24   0:00 [kworker/0:0H]</div><div class="line">root         7  0.1  0.0      0     0 ?        S    9月24   9:14 [rcu_sched]</div><div class="line">root         8  0.0  0.0      0     0 ?        S    9月24   0:00 [rcu_bh]</div><div class="line">root         9  0.0  0.0      0     0 ?        S    9月24   0:00 [migration/0]</div></pre></td></tr></table></figure></p>
<p>对以上信息解释：</p>
<ul>
<li>user : 用户名</li>
<li>pid : 进程id</li>
<li>%CPU : 进程运行占用CPU的百分比</li>
<li>%MEM : 进程占用内存的百分比</li>
<li>VSZ : 该进程使用的虚拟内存量，表示一个程序完全驻留在内存中占用的虚拟内存量</li>
<li>RSS : 该进程占用的固定内存量</li>
<li>TTY : 终端名</li>
<li>START : 进程开启时间</li>
<li>STAT : 进程的状态</li>
<li>TIME : 该进程实际使用的CPU时间</li>
<li>COMMAND : 进程运行指令</li>
</ul>
<p>上述比较重要的信息主要包括VSZ,RSS以及STAT。<br>VSZ表示一个程序完全驻留在内存中占用的内存量，其包括程序链接的动态链接库的大小,栈的大小以及代码段的大小。(手动算过，但是栈的大小很迷，貌似数组在栈中的大小与同类型变量的大小相同，待验证)。<br>RSS包括运行过程中实际被加载到内存中的动态链接库，可执行文件以及栈的大小。<br>STAT为当前进程的运行状态。其包括多种状态，具体解释如下所述:</p>
<ul>
<li>D : 不可中断(通常是IO进程)</li>
<li>R : 正在运行或者在队列中的进程</li>
<li>S : 处在休眠状态的进程</li>
<li>T : 停止或者被追踪</li>
<li>Z : 僵尸进程</li>
<li>W : 进入内存交换</li>
<li>X : 死掉的进程</li>
<li>&lt; : 优先级较高的进程</li>
<li>n : 优先级较低的进程</li>
<li>s : 包含子进程</li>
<li>+ : 位于后台进程组</li>
</ul>
<p><strong>可以在上述命令的基础上对查询结果进行筛选</strong>，如我们想要对内存占用量进行排序，方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux --sort -pMEM</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-ps命令使用详解&quot;&gt;&lt;a href=&quot;#Linux-ps命令使用详解&quot; class=&quot;headerlink&quot; title=&quot;Linux ps命令使用详解&quot;&gt;&lt;/a&gt;Linux ps命令使用详解&lt;/h1&gt;&lt;p&gt;ps命令常见使用方法有两种，另外我们可以通过
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>makefile自动变量与隐晦规则推导</title>
    <link href="http://yoursite.com/2017/09/20/makefile%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9A%90%E6%99%A6%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/2017/09/20/makefile自动变量与隐晦规则推导/</id>
    <published>2017-09-20T12:48:59.000Z</published>
    <updated>2017-09-24T08:48:44.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile自动变量与隐晦规则推导"><a href="#makefile自动变量与隐晦规则推导" class="headerlink" title="makefile自动变量与隐晦规则推导"></a>makefile自动变量与隐晦规则推导</h1><p>makefile的使用可以大大简化程序编译的过程，不过对于新手来说makefile的执行规则理解起来还是很让人迷糊的。其中最重要的原因是makefile中使用了大量的隐晦规则和自动变量来简化makefile的编写.本节将记录一下makefile自动变量和隐晦规则的推导过程以及makefile的执行流程。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%.o:%.c</div><div class="line">  $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>对于上面的推导规则，makefile是怎么将%c文件编译汇编成.o文件的？下面将针对这个问题进行讲解</p>
</blockquote>
<h2 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h2><p>makefile中的自动变量实质上是对一类变量的简写，当我们在模式规则中对这类变量处理的时候可以直接使用自动变量简化makefile代码的编写。自动变量包括如目标文件,依赖文件等。下面以实例的方式列出了一些常用的自动变量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a: a.o b.o c.o d.o</div><div class="line">  g++ -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<ul>
<li>$@: 表示模式规则中的目标文件,对于上面的模式规则,$@表示a</li>
<li>$&lt;: 表示依赖中的第一个文件.对于上述规则,$&lt;表示a.o</li>
<li>$^: 表示所有依赖文件的集合,对于上述规则$^表示a.o b.o c.o d.o</li>
<li>$+: 表示所有依赖文件的集合(不去重).对于上述规则$+表示a.o b.o c.o d.o</li>
<li>$%: 仅当目标是函数库文件(.a)文件时，表示规则中目标成员名。如一个目标是(test.a(a.o)),此时$%表示a.o, $@表示test.a</li>
<li>$?: 所有比目标新的依赖目标的集合</li>
<li>$*: 表示目标规则中%以及%之前的部分。如若目标文件为”src/test.o”,目标文件模式为”src/%.o”,此时$*表示”src/test”。</li>
</ul>
<h2 id="隐晦规则自动规则推导"><a href="#隐晦规则自动规则推导" class="headerlink" title="隐晦规则自动规则推导"></a>隐晦规则自动规则推导</h2><p>使用makefile的makefile的隐晦自动规则推导功能也可以让我们的makefile的代码大大简化。使用隐晦规则，我们没必要为每一个类似的规则生成都去写类似的规则。makefile会自动推导依赖文件,并根据隐含规则推导出生成当前目标的命令。<br>如下面的makefile:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">target: a.o b.o c.o</div><div class="line">  g++ -o $@　$^ $(LIB) $(INC) $(LINKER)</div><div class="line">a.o: a.c</div><div class="line">  g++ -c $(CFLAGS) -o a.o a.c</div><div class="line">b.o: b.c</div><div class="line">  g++ -c $(CFLAGS) -o b.o b.c</div><div class="line">c.o: c.c</div><div class="line">  g++ -c $(CFLAGS) -o c.o c.c</div></pre></td></tr></table></figure></p>
<p>上述规则没有使用隐晦规则,对于每一个.o文件的生成都写了一条规则语句.若使用隐晦规则推导，上述makefile可写为如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>从上面的隐晦规则可以看出,对于.o文件的生成命令，makefile都可以由隐晦规则” $(CC) -c $(CFLAGS) -o $@ $&lt;”推导出。即如当目标需要a.隐晦规则将推导出命令”g++ -c $(CFLAGS) -o a.o a.c”用于生成该目标.</p>
<h2 id="makefile执行过程"><a href="#makefile执行过程" class="headerlink" title="makefile执行过程"></a>makefile执行过程</h2><p>由上一节中的makefile简单说一下makefile的执行规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>makefile中首先声明了变量SOURCE和OBJECTS，SOURCE是当前文件夹下的所有.c文件的集合，OBJECTS是所有.c文件对应的目标文件.o的集合.</p>
<p>执行过程:<br>首先,目标target依赖所有的目标文件.o，即a.o,b.o,c.o。当需要依赖a.o时，makefile会根据隐晦规则自动推导出生成a.o文件的命令，(“g++ -c $(CFLAGS) -o a.o a.c”)，生成a.o；类似的也会根据同样的过程生成b.o和c.o文件,这三个文件生成之后,再根据上述规则生成target。</p>
<h2 id="makefile中常用函数"><a href="#makefile中常用函数" class="headerlink" title="makefile中常用函数"></a>makefile中常用函数</h2><h3 id="wildcard函数"><a href="#wildcard函数" class="headerlink" title="wildcard函数"></a>wildcard函数</h3><p>函数参数:一个正则表达式<br>函数功能:wildcard的中文意思是通配符，它的功能类似于正则表达式，用于展开一列所有符合其参数描述的文件名，文件之间用空格分割。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SOURCE=$(wildcard *.cpp)</div></pre></td></tr></table></figure></p>
<p>此时SOURCE的值为所有的以.cpp为后缀的文件集合，以空格隔开。</p>
<h3 id="patsubst函数"><a href="#patsubst函数" class="headerlink" title="patsubst函数"></a>patsubst函数</h3><p>函数参数:　第一个是需要匹配的样式，第二个是表示用什么替换它，第三个被处理的以空格隔开的字符串。<br>函数功能:其功能是一个匹配替换的函数(pattern substitute)。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#TARGET表示与SOURCE中同名的目标文件.</div><div class="line">TARGET = $(patsubst *.cpp, *.o, $(SOURCE))</div></pre></td></tr></table></figure></p>
<h3 id="subst函数"><a href="#subst函数" class="headerlink" title="subst函数"></a>subst函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:字符串替换,将text中的from 替换为to<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值：this is b</div><div class="line">$(subst a, b, this is a)</div></pre></td></tr></table></figure></p>
<h3 id="strip函数"><a href="#strip函数" class="headerlink" title="strip函数"></a>strip函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(strip &lt;string&gt;)</div></pre></td></tr></table></figure>
<p>功能:去除<string>头部和尾部的空格<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#源字符串为&quot;a b c &quot;，返回值为&quot;a b c&quot;</div><div class="line">$(strip a b c )</div></pre></td></tr></table></figure></string></p>
<h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(filter &lt;pattern...&gt;,&lt;text...&gt;)</div></pre></td></tr></table></figure>
<p>功能:过滤特定模式的字符串<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#如source为a.c b.s c.h,则下列的返回值为a.c b.s</div><div class="line">$(filter *.c *.s, $(source))</div></pre></td></tr></table></figure></p>
<h3 id="word函数"><a href="#word函数" class="headerlink" title="word函数"></a>word函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(word &lt;n&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能:取单词函数。取出<text>中的第n个单词(从1开始)，若越界，返回为空</text></p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为bar</div><div class="line">$(word 2,foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="words函数"><a href="#words函数" class="headerlink" title="words函数"></a>words函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(words &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:统计字符串中单词的个数,返回个数<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为3</div><div class="line">$(word foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="wordlist函数"><a href="#wordlist函数" class="headerlink" title="wordlist函数"></a>wordlist函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:取<text>中s-e个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回bar fun</div><div class="line">$(wordlist 2,3, foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="firstword函数"><a href="#firstword函数" class="headerlink" title="firstword函数"></a>firstword函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(firstword &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能：取<text>中的首个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为foo</div><div class="line">$(firstword foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="dir函数"><a href="#dir函数" class="headerlink" title="dir函数"></a>dir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(dir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的目录（即/前面的部分）。如没有/，则返回./<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为/home/ ./</div><div class="line">$(dir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="notdir函数"><a href="#notdir函数" class="headerlink" title="notdir函数"></a>notdir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(notdir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的取出非目录部分（即/后面的部分）。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为test testfile</div><div class="line">$(notdir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="suffix函数"><a href="#suffix函数" class="headerlink" title="suffix函数"></a>suffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(suffix ..)</div></pre></td></tr></table></figure>
<p>功能:取后缀函数,若没有后缀返回为空<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:.c .c</div><div class="line">$(suffix a.c b.c)</div></pre></td></tr></table></figure></p>
<h3 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(basename ...)</div></pre></td></tr></table></figure>
<p>功能:取前缀函数,包括目录。<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:/home/test a</div><div class="line">$(basename /home/test.cpp a.cpp)</div></pre></td></tr></table></figure></p>
<h3 id="addsuffix函数"><a href="#addsuffix函数" class="headerlink" title="addsuffix函数"></a>addsuffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addsuffix &lt;suffix&gt; &lt;name....&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列<name...>添加后缀名<suffix><br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:a.c b.c c.c</div><div class="line">$(addsuffix .c a b c)</div></pre></td></tr></table></figure></suffix></name...></p>
<h3 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addprefix &lt;prefix&gt; &lt;name...&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列添加前缀<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:src/a src/b src/c</div><div class="line">$(addprefix src/ a b c)</div></pre></td></tr></table></figure></p>
<h3 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(join &lt;list1&gt; &lt;list2&gt;)</div></pre></td></tr></table></figure>
<p>功能:将两个字符串中的list对应项连接<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#返回值:an 2b 3</div><div class="line">$(join 1 2 3, a b)</div><div class="line">#返回值:1a 2b c</div><div class="line">$(join 1 2, a b c)</div></pre></td></tr></table></figure></p>
<h2 id="makefile中链接静态库顺序问题"><a href="#makefile中链接静态库顺序问题" class="headerlink" title="makefile中链接静态库顺序问题"></a>makefile中链接静态库顺序问题</h2><p>在链接静态库的时候，如果多个静态库之间存在依赖关系，则有依赖的静态库之间存在顺序问题，若顺序出现错误，则可能出现函数未定义或符号找不到等错误。</p>
<p>静态库链接的顺序的原则是：<strong>被依赖的库一定要放在后面</strong>，因为makefile在链接静态库时的顺序是从右往左(或从后向前).如libb.a依赖于liba.a，此时的链接顺序应该是:-Llibb.a -Lliba.a。</p>
<p>会出现上述问题的原因是:我们在生成静态库的时候并未把依赖库的定义编到生成的库中。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gcc -c a.c</div><div class="line">ar cr liba.a a.o</div><div class="line">gcc -c b.c</div><div class="line">ar cr libb.a b.o # 虽然libb.a使用到了liba.o中的一些函数,但并不会将它们的定义包含进来,所以在链接test时需要指定这两个库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;a href=&quot;#makefile自动变量与隐晦规则推导&quot; class=&quot;headerlink&quot; title=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;/a&gt;makefile自动变量与隐晦规则推导&lt;/h1&gt;&lt;p&gt;ma
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
      <category term="自动变量" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F/"/>
    
      <category term="规则推导" scheme="http://yoursite.com/tags/%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>UnixIPC 机制和key_t本质类型</title>
    <link href="http://yoursite.com/2017/09/20/UnixIPC%E4%B8%ADkey_t%E7%B1%BB%E5%9E%8B%E6%9C%AC%E8%B4%A8/"/>
    <id>http://yoursite.com/2017/09/20/UnixIPC中key_t类型本质/</id>
    <published>2017-09-20T12:09:08.000Z</published>
    <updated>2017-09-24T10:16:56.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="System-V-IPC-机制和key-t本质类型"><a href="#System-V-IPC-机制和key-t本质类型" class="headerlink" title="System V IPC 机制和key_t本质类型"></a>System V IPC 机制和key_t本质类型</h1><h2 id="System-V三种IPC机制"><a href="#System-V三种IPC机制" class="headerlink" title="System V三种IPC机制"></a>System V三种IPC机制</h2><p>System V IPC包括三种不同的通信机制</p>
<ul>
<li>消息队列:消息队列类似于管道,但是又有很大的差别。第一,消息队列是有边界的，所以消息队列的通信机制是通过消息进行传递，而管道是通过字节流进行通信。第二，每条消息包括一个完整的整形字段，消息队列可以通过类型来选择消息。</li>
<li>信号量:用于同步两个进程。</li>
<li>共享内存:共享内存允许两个进程共享同一个内存段。即一块内存被映射到不同进程的虚拟内存中。</li>
</ul>
<h2 id="key-t本质"><a href="#key-t本质" class="headerlink" title="key_t本质"></a>key_t本质</h2><p>System V系统调用都有一个相关的get系统调用，它与文件io中的open函数类似，不同的是它的参数是一个整数，给定一个整数之后，系统会做以下操作:</p>
<ul>
<li>使用给定key创建一个新的IPC对象，并将IPC对象标识key_t返回给调用者.</li>
<li>若该key对应的IPC对象存在，直接将标识返回给调用者，相当于使用key换取标识,而不做创建操作.</li>
</ul>
<p>上述IPC对象的标识类型为key_t。key_t的本质是什么?我们可以通过grep命令追踪到</p>
<p>在文件/usr/include/sys/ipc.h中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#ifndef __key_t_defined</div><div class="line">typedef __key_t key_t;</div><div class="line"># define __key_t_defined</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>在文件/usr/include/bits/types.h中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */</div></pre></td></tr></table></figure></p>
<p>在文件/usr/include/bits/typesizes.h中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define __KEY_T_TYPE            __S32_TYPE</div></pre></td></tr></table></figure>
<p>在文件中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define __S32_TYPE              int</div></pre></td></tr></table></figure>
<p>故从上面的追踪，可以看出key_t的本质为int类型.</p>
<h2 id="获取key-t方法"><a href="#获取key-t方法" class="headerlink" title="获取key_t方法"></a>获取key_t方法</h2><p>获取ket_t的方法三种</p>
<ul>
<li>随机选取一个整数值作为key值，多个进程共享一个key值。注意此时不能使用已经存在的key</li>
<li>在创建IPC对象的get方法中用IPC_PRIVATE作为key值，这样会导致每个调用都会创建一个新的IPC对象</li>
<li>使用ftok函数生成一个key,这个方法产生的key接近唯一。</li>
</ul>
<h3 id="IPC-PRIVATE"><a href="#IPC-PRIVATE" class="headerlink" title="IPC_PRIVATE"></a>IPC_PRIVATE</h3><p>IPC_PRIVATE本质上为0的宏定义.使用方法是直接使用IPC_PRIVATE作为key生成一个IPC对象。这种做法保证每次产生的都是全新的IPC对象。<br>这种做法适用于在父进程fork前创建IPC对象，从而达到子进程继承IPC对象的目的。</p>
<h3 id="ftok生成key"><a href="#ftok生成key" class="headerlink" title="ftok生成key"></a>ftok生成key</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型:"></a>函数原型:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="keyword">key_t</span> ftok(<span class="keyword">char</span>* pathname, <span class="keyword">int</span> proj);</div></pre></td></tr></table></figure>
<h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能:"></a>函数功能:</h4><p>此函数的功能是根据pathname和proj的值生成key，该算法只使用proj的最低的8个有效位，应用程序必须确保pathname引用一个可以应用stat()的既有文件。否则该函数会返回-1。</p>
<p>在linux中，key_t一般是32位的值。它通过取<strong>proj参数的最低８个有效位，包含该文件所属的文件系统的设备的设备号的最低8个有效位以及pathname所引用文件的inode号的最低16个有效位组合而成，这样保证了唯一性</strong>。所以从上面可以看出，对于同意个文件的不同路径(inode值相同),proj值相同，此时产生的key是相同的。　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;System-V-IPC-机制和key-t本质类型&quot;&gt;&lt;a href=&quot;#System-V-IPC-机制和key-t本质类型&quot; class=&quot;headerlink&quot; title=&quot;System V IPC 机制和key_t本质类型&quot;&gt;&lt;/a&gt;System V IP
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ipc" scheme="http://yoursite.com/tags/ipc/"/>
    
      <category term="key_t" scheme="http://yoursite.com/tags/key-t/"/>
    
  </entry>
  
  <entry>
    <title>UnixIPC 关联数据结构与对象权限</title>
    <link href="http://yoursite.com/2017/09/20/UnixIPC%E5%85%B3%E8%81%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/09/20/UnixIPC关联数据结构与对象权限/</id>
    <published>2017-09-20T12:09:08.000Z</published>
    <updated>2017-09-24T11:34:39.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UnixIPC-关联数据结构与对象权限"><a href="#UnixIPC-关联数据结构与对象权限" class="headerlink" title="UnixIPC 关联数据结构与对象权限"></a>UnixIPC 关联数据结构与对象权限</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UnixIPC-关联数据结构与对象权限&quot;&gt;&lt;a href=&quot;#UnixIPC-关联数据结构与对象权限&quot; class=&quot;headerlink&quot; title=&quot;UnixIPC 关联数据结构与对象权限&quot;&gt;&lt;/a&gt;UnixIPC 关联数据结构与对象权限&lt;/h1&gt;
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ipc" scheme="http://yoursite.com/tags/ipc/"/>
    
      <category term="ipc_perm" scheme="http://yoursite.com/tags/ipc-perm/"/>
    
  </entry>
  
</feed>
