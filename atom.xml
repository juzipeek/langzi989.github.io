<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-01T14:35:53.523Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(2824759538@qq.com)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uname命令解析</title>
    <link href="http://yoursite.com/2018/12/25/uname%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/12/25/uname命令说明/</id>
    <published>2018-12-25T12:25:01.000Z</published>
    <updated>2019-01-01T14:35:53.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uname命令解析"><a href="#uname命令解析" class="headerlink" title="uname命令解析"></a>uname命令解析</h1><blockquote>
<p>使用uname命令可以帮助我们了解当前使用的系统的硬件信息，内核信息，处理器信息和当前使用的系统信息等。该命令可以在Fedora, Debian, CentOS, SUSE Linux 或者其他Linux操作系统的发行版本上运行。</p>
</blockquote>
<p>uname命令的使用方法在网络上已经有很多，甚至直接使用<strong>man uname</strong>命令就可以获取uname的用法，所以不再赘述，本文主要记录uname打印的信息的具体信息的分析。</p>
<h2 id="1-查看内核信息"><a href="#1-查看内核信息" class="headerlink" title="1. 查看内核信息"></a>1. 查看内核信息</h2><blockquote>
<p>内核简单的理解就是硬件与用户程序之间的一层系统软件，它为应用程序提供了对计算机硬件访问的一套统一的接口，使得应用程序设计和编写更加简介和易用。</p>
</blockquote>
<h4 id="1-1-查看内核名称"><a href="#1-1-查看内核名称" class="headerlink" title="1.1 查看内核名称"></a>1.1 查看内核名称</h4><p>uname -s[–sysname]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -s</div><div class="line">Linux</div></pre></td></tr></table></figure></p>
<p>上述说明当前系统使用的是Linux内核，内核可以分为四大类：<strong>单内核、微内核、混合内核、外内核</strong>，Linux属于单内核。<br>详细可参考博客</p>
<p><a href="https://blog.csdn.net/ciahi/article/details/1630083" target="_blank" rel="external">https://blog.csdn.net/ciahi/article/details/1630083</a></p>
<p><a href="https://blog.csdn.net/force_eagle/article/details/8729675" target="_blank" rel="external">https://blog.csdn.net/force_eagle/article/details/8729675</a></p>
<h4 id="1-2-查看内核发行版本"><a href="#1-2-查看内核发行版本" class="headerlink" title="1.2 查看内核发行版本"></a>1.2 查看内核发行版本</h4><p>uname -r[–kernel-release]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div><div class="line">4.4.0-97-generic</div></pre></td></tr></table></figure>
<p>上述结果表示你使用的Linux内核版本为4.4版本的内核。下面解释一下每个数字对应的含义：</p>
<ul>
<li>4  : 内核版本</li>
<li>4  : 主要修订版本</li>
<li>0  : 次要修订版本</li>
<li>97 : Bug fix版本号</li>
<li>generic : 当前内核版本为通用版本，另有表示不同含义的server（服务器版本）、i386（针对老式英特尔处理器），或使用者定制的版本。</li>
</ul>
<h4 id="1-3-查看内核版本"><a href="#1-3-查看内核版本" class="headerlink" title="1.3 查看内核版本"></a>1.3 查看内核版本</h4><p>uname -v[–kernel-version]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -v</div><div class="line">#1 SMP Wed Nov 19 10:24:30 CST 2014</div></pre></td></tr></table></figure>
<ul>
<li>SMP: 对称多处理机，表示内核支持多核、多处理器</li>
<li>Wed Nov 19 10:24:30 CST 2014 : 内核的编译时间(build date)为(2014/11/19 10:24:30)</li>
</ul>
<h2 id="2-硬件与处理器信息"><a href="#2-硬件与处理器信息" class="headerlink" title="2. 硬件与处理器信息"></a>2. 硬件与处理器信息</h2><h4 id="2-1-查看硬件名称"><a href="#2-1-查看硬件名称" class="headerlink" title="2.1 查看硬件名称"></a>2.1 查看硬件名称</h4><p>uname -m[–machine]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -m</div><div class="line">i686</div></pre></td></tr></table></figure>
<p>该命令打印硬件名称，我们可以通过此属性<strong>判断操作系统的架构</strong>。</p>
<ul>
<li>x86_64 : 64位系统</li>
<li>ix86   : 32位系统(x表示3、4、5、6)</li>
</ul>
<h4 id="2-2-查看硬件平台"><a href="#2-2-查看硬件平台" class="headerlink" title="2.2 查看硬件平台"></a>2.2 查看硬件平台</h4><p>uname -i[–hardware-platform]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -i</div><div class="line">i386</div></pre></td></tr></table></figure>
<p>硬件平台告诉我们<strong>构建内核的架构</strong>（可能会针对更高版本进行优化）。</p>
<h4 id="2-3-查看处理器类型"><a href="#2-3-查看处理器类型" class="headerlink" title="2.3 查看处理器类型"></a>2.3 查看处理器类型</h4><p>uname -p</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -p</div><div class="line">i686</div></pre></td></tr></table></figure>
<p>该属性表示该机器处理器的类型(CPU)</p>
<h2 id="3-其他信息"><a href="#3-其他信息" class="headerlink" title="3. 其他信息"></a>3. 其他信息</h2><h4 id="3-1-查看操作系统类型"><a href="#3-1-查看操作系统类型" class="headerlink" title="3.1 查看操作系统类型"></a>3.1 查看操作系统类型</h4><p>uname -o[–operating-system]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ uname -o</div><div class="line"></div><div class="line">GNU/Linux</div></pre></td></tr></table></figure>
<p>该属性表名当前运行的操作系统为GNU/Linux</p>
<h4 id="3-2-查看主机名"><a href="#3-2-查看主机名" class="headerlink" title="3.2 查看主机名"></a>3.2 查看主机名</h4><p>uname -n[–nodename]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$uname -n</div><div class="line">wing</div></pre></td></tr></table></figure>
<h4 id="3-3-查看全部信息"><a href="#3-3-查看全部信息" class="headerlink" title="3.3 查看全部信息"></a>3.3 查看全部信息</h4><p>uname -a</p>
<p>参考链接：<br><a href="http://man.linuxde.net/uname" target="_blank" rel="external">http://man.linuxde.net/uname</a><br><a href="https://blog.csdn.net/digimon/article/details/8607482" target="_blank" rel="external">https://blog.csdn.net/digimon/article/details/8607482</a><br><a href="https://itsfoss.com/find-which-kernel-version-is-running-in-ubuntu/" target="_blank" rel="external">https://itsfoss.com/find-which-kernel-version-is-running-in-ubuntu/</a><br><a href="https://blog.csdn.net/ciahi/article/details/1630083](https://blog.csdn.net/ciahi/article/details/1630083" target="_blank" rel="external">https://blog.csdn.net/ciahi/article/details/1630083](https://blog.csdn.net/ciahi/article/details/1630083</a><br><a href="https://ubuntu.dovov.com/2841/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E6%88%91%E7%9A%84pc%E5%92%8Cubuntu%E7%9A%84%E6%9E%B6%E6%9E%84%EF%BC%9F.html" target="_blank" rel="external">https://ubuntu.dovov.com/2841/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E6%88%91%E7%9A%84pc%E5%92%8Cubuntu%E7%9A%84%E6%9E%B6%E6%9E%84%EF%BC%9F.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;uname命令解析&quot;&gt;&lt;a href=&quot;#uname命令解析&quot; class=&quot;headerlink&quot; title=&quot;uname命令解析&quot;&gt;&lt;/a&gt;uname命令解析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用uname命令可以帮助我们了解当前使用的系统的硬件信息
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="uname" scheme="http://yoursite.com/tags/uname/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统CAP定理与BASE理论</title>
    <link href="http://yoursite.com/2018/11/28/CAP%E5%AE%9A%E7%90%86%E4%B8%8EBase%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/11/28/CAP定理与Base理论/</id>
    <published>2018-11-28T14:37:19.000Z</published>
    <updated>2018-11-28T14:39:56.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式系统CAP定理与BASE理论"><a href="#分布式系统CAP定理与BASE理论" class="headerlink" title="分布式系统CAP定理与BASE理论"></a>分布式系统CAP定理与BASE理论</h1><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>在计算机科学中，CAP定理指出，对于一个分布式系统，不能同时满足一下三点，最多只能同时满足其中两点：</p>
<ul>
<li>一致性(Consistency)：在分布式系统环境下，数据在多台机器上有多个副本。当对数据执行更新操作时，数据更新操作完成后，所有节点<strong>在同一时间的数据完全一致</strong>，客户端读取的数据永远是更新后的最新数据。</li>
<li>可用性(<strong>A</strong>vailability) : 服务一直可用，即<strong>对于客户端每次读或写请求都能在有限时间内得到正确的响应</strong>，但不保证获取的数据为最新数据。 “有限时间内”是指对于客户端的每一个操作请求，系统必能够在指定的时间内返回对应的处理结果，如果超过了这个时间范围，系统将被认为是不可用的。</li>
<li>分区容错性(Partition tolerance) : 在<strong>网络分区出现故障时保证系统不受影响</strong>，仍让可以对外提供一致性和可用性服务。网络分区出现故障通常指的是节点之间的网络故障，但是节点内部网络是完好的，这种情况导致的问题就是节点之间无法进行数据复制。</li>
</ul>
<h4 id="CAP定理简单证明"><a href="#CAP定理简单证明" class="headerlink" title="CAP定理简单证明"></a>CAP定理简单证明</h4><p>由于分布式系统中多个节点分布在不同的机器（当然也可以是单台机器上的多个节点），节点之间通过网络进行通信，由于网络不完全可靠，所以在分布式系统中我们<strong>必须要满足分区容错性</strong>。若要舍弃分区容错性，也就是只有一个分区，何谈分布式系统，所以下面的讨论总是围绕分区容错性来讨论。当网络分区出现故障的时候，我们可以通过一定策略来达到一致性或可用性的要求。</p>
<p> 一个简单的分布式系统如下：系统中有两个节点对外提供服务，Server1和Server2，Server1和Server2各自维护和访问自己的数据库DB1和DB2，DB1和DB2数据通过复制技术保证数据之间的同步。</p>
<p><img src="/images/cap理论.png" alt=""></p>
<p>在理想情况下，即同时满足CAP的情况，DB1和DB2的数据是完全一致的，Server1与Server2可以同时对外提供服务，用户不管是请求server1还是请求server2，都会得到立即响应，并且获取的数据是完全一致且为最新数据。</p>
<p>但是现实中不可能出现这么理想的情况，当DB1和DB2之间网络发声故障时，此时有用户向Server1发送数据更新请求，DB1数据更新后无法将最新数据同步到DB2，此时DB2中存储的任然是旧数据；这个时候，有用户向Server2发送读数据请求，由于数据还没有同步，应用程序无法将最新的数据返回给用户，这个时候有两种选择：</p>
<ul>
<li>牺牲数据一致性，保证服务可用性。Server返回DB2中的旧数据给用户</li>
<li>牺牲服务可用性，保证数据一致性。阻塞服务请求，直到故障恢复，DB1与DB2数据同步完成之后再恢复提供服务。</li>
</ul>
<p>从上面分析可以看出，分布式系统不可能同时满足CAP。在实际应用的过程中，由于不能同时满足CAP,我们必须舍弃其中之一，由于P是所有分布式系统中不许满足的，所以最后需要在C和A之间做个取舍。</p>
<p>在大多数的分布式数据库中（如redis、Hbase等），往往是优先保证CP，因为无论是分布式系统还是想zooKeeper这种分布式协调组件，数据一致性往往是他们最基本的要求。</p>
<p>对于需要保证高可用性的系统，将舍弃数据一致性而保证服务的高可用性。如12306</p>
<h2 id="Base理论"><a href="#Base理论" class="headerlink" title="Base理论"></a>Base理论</h2><p>Base理论是Basically Available（基本可用）、Soft state（软状态）、Eventually consistent（最终一致性）的缩写；它基于CAP定理逐步演化来的，它是CAP中一致性和可用性权衡的结果，其核心思想是即使系统无法达到强一致性，可以<strong>根据应用自身的业务特点，采用适当的方式来使系统达到最终一致性</strong>。</p>
<h4 id="基本可用（Basically-Available）"><a href="#基本可用（Basically-Available）" class="headerlink" title="基本可用（Basically Available）"></a>基本可用（Basically Available）</h4><p>基本可用是指当分布式系统发生故障的时候，允许损失部分可用性。常见的有以下几种情况：</p>
<ul>
<li>响应时间上的损失：正常情况下，一个在线搜索引擎需要再0.5秒之内返回给用户响应的查询结果，但由于出现故障，查询结果的响应时间增加到了1~2秒。</li>
<li>功能上的损失：通常的做法是<strong>降级服务</strong>，如对于展示一些有序元素的页面，但部分组件出现故障时，这个时候可不展示有序元素，降级为无序元素列表。</li>
</ul>
<h4 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h4><p>软状态是指允许系统中的数据存在中间状态，并认为该中间状态的存在不影响系统的整体可用性，即允许系统不同节点的数据副本之间进行数据同步的过程中存在延时。</p>
<h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><p>最终一致性强调的是系统所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要试试保证系统数据的强一致性。 具体最终一致性的实现方法见之前一致性相关博客：</p>
<p><a href="https://langzi989.github.io/2018/11/20/分布式系统数据一致性/]" target="_blank" rel="external">https://langzi989.github.io/2018/11/20/分布式系统数据一致性/</a></p>
<p>参考链接：</p>
<p><a href="http://robertgreiner.com/2014/08/cap-theorem-revisited/" target="_blank" rel="external">http://robertgreiner.com/2014/08/cap-theorem-revisited/</a></p>
<p><a href="https://www.hollischuang.com/archives/666" target="_blank" rel="external">https://www.hollischuang.com/archives/666</a></p>
<p><a href="https://yq.aliyun.com/articles/240630" target="_blank" rel="external">https://yq.aliyun.com/articles/240630</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分布式系统CAP定理与BASE理论&quot;&gt;&lt;a href=&quot;#分布式系统CAP定理与BASE理论&quot; class=&quot;headerlink&quot; title=&quot;分布式系统CAP定理与BASE理论&quot;&gt;&lt;/a&gt;分布式系统CAP定理与BASE理论&lt;/h1&gt;&lt;h2 id=&quot;CAP定理
    
    </summary>
    
      <category term="分布式系统基础" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="分布式系统" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="一致性" scheme="http://yoursite.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
      <category term="CAP" scheme="http://yoursite.com/tags/CAP/"/>
    
      <category term="BASE" scheme="http://yoursite.com/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统中的数据一致性问题</title>
    <link href="http://yoursite.com/2018/11/20/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>http://yoursite.com/2018/11/20/分布式系统数据一致性/</id>
    <published>2018-11-20T14:36:19.000Z</published>
    <updated>2018-11-20T15:21:19.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式系统中的数据一致性问题"><a href="#分布式系统中的数据一致性问题" class="headerlink" title="分布式系统中的数据一致性问题"></a>分布式系统中的数据一致性问题</h1><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h2><h4 id="数据库系统中的数据一致性"><a href="#数据库系统中的数据一致性" class="headerlink" title="数据库系统中的数据一致性"></a>数据库系统中的数据一致性</h4><p>　　数据一致性问题最初是存在于数据库系统中的一个概念，数据库系统中一致性问题通常指的是<strong>关联数据之间的逻辑是否完整和正确</strong>，通常数据库系统会通过使用事务来保证数据的一致性和完整性。<strong>事务本质上就是一个操作序列的有限集合，若事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态。</strong></p>
<p>　　比如当你在淘宝中购买商品进行付款的时候，从宏观上看有以下最基本的步骤：付款成功—-&gt;发放商品，若用户付款成功之后，发放商品失败，这个时候会导致数据不一致。解决这种问题常用的方法就是使用事务，若付款成功，发放商品失败，此时将第一个操作回滚。</p>
<h4 id="分布式系统中的数据一致性"><a href="#分布式系统中的数据一致性" class="headerlink" title="分布式系统中的数据一致性"></a>分布式系统中的数据一致性</h4><p>　　在分布式系统中，为了达到<strong>系统容灾和提高系统性能</strong>，数据通常会冗余存储在不同机器，通过复制技术来进行主副本之间的数据同步。所以分布式系统中的数据一致性指的是<strong>集群中主副本数据内容的一致性</strong></p>
<ul>
<li><p>由于数据冗余在不同机器中，当集群中部分机器挂掉，也可以正常对外服务，消除单点故障</p>
</li>
<li><p>集群中的主副本同时对外提供服务，提高系统对外提供服务的性能</p>
</li>
</ul>
<h3 id="分布式系统数据一致性模型"><a href="#分布式系统数据一致性模型" class="headerlink" title="分布式系统数据一致性模型"></a>分布式系统数据一致性模型</h3><p>　　根据对数据一致性的强弱可以将一致性划分为强一致性、弱一致性和最终一致性三种模型。可以通过一个例子来理解这三种一致性之间的区别与关联。</p>
<p>　　如某运营号在今日头条对一篇文章做了修改，文章存储于主副数据库，主副数据库均对外提供服务，如下：<br>    <img src="/images/数据一致性.png" alt=""></p>
<h4 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h4><p>　　强一致性指的是当对数据完成更新操作之后，所有客户端访问到的数据均为更新之后的数据，这样可以保证客户端取到的总是最新的数据。要达到强一致性，将会牺牲较大的性能。</p>
<p>　　对应上述今日头条文章的例子，当运营号修改文章A之后，用户不管是通过应用服务器A访问还是通过应用服务器B访问文章都将访问到最新更新的文章。</p>
<h4 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h4><p>　　弱一致性指的是当数据完成更新操作之后，系统并不保证所有的客户端访问到的数据为最新数据，但是会尽量保证在某个时间级别（如秒级或分钟级）之后，让数据达到一致性状态。</p>
<p>　　对应上述今日头条的例子，当运营号修改文章A之后，通过应用服务器B访问的用户并不能保证获取到的一定是最新的文章，但是可以保证在一段时间之后，访问的一定是最新的文章</p>
<h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><p>　　最终一致性是弱一致性的一种特例。当对数据更新完之后，保证没有后续更新的前提下，系统最终返回的是上一次更新操作的值。</p>
<p>　　对应今日头条的例子，当运营号修改文章A之后，通过应用服务器A和B访问的用户最终获取到的文章一定是更新之后的文章。</p>
<p>最终一致性又衍生出以下几种一致性模型：</p>
<ul>
<li>因果一致性：如果A进程在更新之后向B进程通知更新的完成，那么B的访问操作将会返回更新的值。如果没有因果关系的C进程将会遵循最终一致性的规则。</li>
<li>读己所写一致性：因果一致性的特定形式。一个进程总可以读到自己更新的数据。</li>
<li>会话一致性：读己所写一致性的特定形式。进程在访问存储系统同一个会话内，系统保证该进程读己之所写。</li>
<li>单调读一致性：如果一个进程已经读取到一个特定值，那么该进程不会读取到该值以前的任何值。</li>
<li>单调写一致性：系统保证对同一个进程的写操作串行化。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分布式系统中的数据一致性问题&quot;&gt;&lt;a href=&quot;#分布式系统中的数据一致性问题&quot; class=&quot;headerlink&quot; title=&quot;分布式系统中的数据一致性问题&quot;&gt;&lt;/a&gt;分布式系统中的数据一致性问题&lt;/h1&gt;&lt;h2 id=&quot;数据一致性&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="分布式系统基础" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="分布式系统" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="一致性" scheme="http://yoursite.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>C++输入输出流详细理解</title>
    <link href="http://yoursite.com/2018/11/11/C++%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E8%AF%A6%E7%BB%86%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/11/11/C++输入输出流详细理解/</id>
    <published>2018-11-11T04:20:04.945Z</published>
    <updated>2018-11-11T04:20:04.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-输入输出流详细理解"><a href="#C-输入输出流详细理解" class="headerlink" title="C++输入输出流详细理解"></a>C++输入输出流详细理解</h1><p>今天重读C++ Primer时，重新回顾了一下C++中iostream标准库，标准库提供了四个标准输入输出流，包括<strong>输入流cin和输出流cout,cerr,clog</strong>。<strong>cerr通常用来输出警告和错误信息给程序的使用者,而clog对象用于产生程序执行的一般信息。</strong></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> istream <span class="built_in">cin</span>;           <span class="comment">/// Linked to standard input</span></div><div class="line"><span class="keyword">extern</span> ostream <span class="built_in">cout</span>;          <span class="comment">/// Linked to standard output</span></div><div class="line"><span class="keyword">extern</span> ostream <span class="built_in">cerr</span>;          <span class="comment">/// Linked to standard error (unbuffered)</span></div><div class="line"><span class="keyword">extern</span> ostream <span class="built_in">clog</span>;          <span class="comment">/// Linked to standard error (buffered)</span></div></pre></td></tr></table></figure>
<h2 id="标准输入流"><a href="#标准输入流" class="headerlink" title="标准输入流"></a>标准输入流</h2><p>iostream标准库中标准输入流中只有cin一个，指的是从输入设备(如键盘)中向程序输入数据，程序通过cin从标准输入流中获取数据。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="标准输出流"><a href="#标准输出流" class="headerlink" title="标准输出流"></a>标准输出流</h2><p>iostream标准库中提供的输出流有cout,cerr,以及clog三个。</p>
<h3 id="cout-cerr与clog区别"><a href="#cout-cerr与clog区别" class="headerlink" title="cout,cerr与clog区别"></a>cout,cerr与clog区别</h3><p>这三个输出流到底有什么区别呢？根据GNU官方的解释，其区别如下：</p>
<ul>
<li>cout : 输出数据经过缓冲区(buffered[标准输出流的缓冲区])，可被重定向</li>
<li>cerr: 输出数据不经过缓冲区(unbuffered),不可被重定向</li>
<li>clog:输出数据经过缓冲区(buffered[标准错误流的缓冲区])，不可被重定向</li>
</ul>
<p>参考链接：</p>
<p><a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a00914_source.html" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a00914_source.html</a></p>
<p><a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01140.html#a7e2a2fc4b5924b7292c0566ca4c95463" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01140.html#a7e2a2fc4b5924b7292c0566ca4c95463</a></p>
<h3 id="实验程序"><a href="#实验程序" class="headerlink" title="实验程序"></a>实验程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// sleep 10s后输出123</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"123"</span>;</div><div class="line">  sleep(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// sleep前输出123</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="built_in">cerr</span> &lt;&lt; <span class="string">"123"</span>;</div><div class="line">   sleep(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// sleep前输出123</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">clog</span> &lt;&lt; <span class="string">"123"</span>;</div><div class="line">  sleep(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    从上面的实验结果可以看出，cout与cerr的行为与上述cout和cerr的区别一致，但是<strong>从现象看clog并没有buffered</strong>，这是什么原因呢？</p>
<p>​    产生上述现象的原因从上面三个输出流的定义可以看出，<strong>cout是使用的标准输入(stdout)的缓冲区，clog是使用的标准错误流(stderr)的缓冲区</strong>，由于stderr的缓冲区大小默认为0，所以虽然clog输出流有缓冲，但是缓冲区大小为0,所以上述效果与无缓冲一致。</p>
<p>​    可通过设置标准错误流的缓冲区来达到clog缓冲的效果。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  setbuf(<span class="built_in">stderr</span>, buffer);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">clog</span> &lt;&lt; <span class="string">"123"</span>;</div><div class="line">  sleep(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="endl与-n区别"><a href="#endl与-n区别" class="headerlink" title="endl与\n区别"></a>endl与\n区别</h3><p>​    在使用endl与\n的作用相同，但是还是有一些区别的。</p>
<ul>
<li>对于无缓冲的输出流如cerr，endl与\n完全一致。</li>
<li>对于带缓冲的输出流cout和clog，\n仅仅输出换行,而endl除了输出换行之外，还刷新输出流或错误流缓冲区。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 直接打印到屏幕上：在sleep前输出123</span></div><div class="line"><span class="comment">// 重定向到  文件中: 在sleep前输出123</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"123"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  sleep(<span class="number">3</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接打印到屏幕上：在sleep前输出123</span></div><div class="line"><span class="comment">// 重定向到文件中  : 在sleep后输出123</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"123\n"</span>;</div><div class="line">  sleep(<span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然\n不刷新缓冲区，那为什么第二个程序在输出到terminal的时候会在sleep前打印123呢？这是由于<strong>当打印到屏幕上的时候，输出流的缓冲为行缓冲，当重定向到文件中时候，输出流缓冲为全缓冲</strong></p>
<h3 id="行缓冲与全缓冲"><a href="#行缓冲与全缓冲" class="headerlink" title="行缓冲与全缓冲"></a>行缓冲与全缓冲</h3><p>从上面可以看出标准输出在输出到屏幕和输出到文件中默认的缓冲类型不一致，当输出到屏幕的时候，为行缓冲；当输出到文件的时候为全缓冲。</p>
<ul>
<li>全缓冲：填满标准I/O缓冲区才进行实际的I/O操作。</li>
<li>行缓冲：当缓冲区内容遇到换行时，即进行实际的I/O操作。</li>
</ul>
<p>所以当cout打印到屏幕上的时候，使用cout&lt;&lt;”\n”，也会立即显示结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-输入输出流详细理解&quot;&gt;&lt;a href=&quot;#C-输入输出流详细理解&quot; class=&quot;headerlink&quot; title=&quot;C++输入输出流详细理解&quot;&gt;&lt;/a&gt;C++输入输出流详细理解&lt;/h1&gt;&lt;p&gt;今天重读C++ Primer时，重新回顾了一下C++中iostr
    
    </summary>
    
      <category term="C++ 学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="输入输出流" scheme="http://yoursite.com/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>AWK学习</title>
    <link href="http://yoursite.com/2018/09/12/awk%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/09/12/awk学习/</id>
    <published>2018-09-12T14:46:32.606Z</published>
    <updated>2018-09-12T14:46:32.606Z</updated>
    
    <content type="html"><![CDATA[<p>AWK是一种强大的文本处理工具，其处理文本的效率极高，其输出可以来自标注输入、其他命令的输出或一个或多个文件，熟练使用awk将会对工作效率有很大的提升。</p>
<h2 id="awk调用方式"><a href="#awk调用方式" class="headerlink" title="awk调用方式"></a>awk调用方式</h2><p>awk调用方式包括三种：</p>
<h4 id="一、命令行调用"><a href="#一、命令行调用" class="headerlink" title="一、命令行调用"></a>一、命令行调用</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F seperator] <span class="string">'commond'</span> input-file</div></pre></td></tr></table></figure>
<p>commond的组成又可以包括多个模式和动作的组合，即命令行调用又可以写为：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">akw [-F seperator] <span class="string">'parrtern1 &#123;Action1&#125; pattern2 &#123;Action2&#125;'</span> input-file</div></pre></td></tr></table></figure>
<ul>
<li>seperator:分隔符。分隔符为可选参数，可以为任意字符串,若不指定，默认分隔符为空格。</li>
<li>commond:awk命令</li>
<li>input_file: 待处理的文本文件</li>
</ul>
<h4 id="二、脚本调用"><a href="#二、脚本调用" class="headerlink" title="二、脚本调用"></a>二、脚本调用</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk -f awk-script-file input-file</div></pre></td></tr></table></figure>
<p>将awk命令写入一个文件中，然后使用-f参数指定该文件运行</p>
<h4 id="三、shell脚本插入awk命令"><a href="#三、shell脚本插入awk命令" class="headerlink" title="三、shell脚本插入awk命令"></a>三、shell脚本插入awk命令</h4><p>在shell中插入awk命令对文件进行处理,直接执行shell命令。</p>
<h2 id="模式与动作"><a href="#模式与动作" class="headerlink" title="模式与动作"></a>模式与动作</h2><pre><code>任何awk语句都由**模式**和**动作**组成，**模式部分决定Action语句何时触发以及触发事件，动作决定对当前被匹配的数据进行的操作**，Action中由多个awk处理语句组成。
</code></pre><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F seperator] <span class="string">'parrtern1 &#123;Action1&#125; pattern2 &#123;Action2&#125;'</span> input-file</div></pre></td></tr></table></figure>
<p><strong>注意问题</strong>：</p>
<ul>
<li>awk语句必须被单引号或双引号包含，防止awk语句被当做shell命令解析。</li>
<li>确保awk命令中所有引号都成对出现</li>
<li><p>确保用花括号括起来动作语句，用圆括号括起来条件语句</p>
</li>
<li><p>模式与动作<strong>一一对应</strong>，只有pattern匹配成功，对应的action(用{}括起来表示一个action)才会执行。</p>
</li>
<li><p>模式可以为任何<strong>条件语句</strong>或<strong>复合语句</strong>或<strong>正则表达式</strong>，也可以为awk保留字BEGIN，END</p>
</li>
<li><p>模式尽量<strong>不要加双引号</strong>，否则某些情况下可能会失效，如”$1&gt;30”。</p>
</li>
<li><p>action一定要<strong>用{}括起来</strong>，一个{}括起来的动作属于一个action，不同{}括起来的动作属于不同action,其对应不同的pattern。</p>
</li>
<li><p>BEGIN和END为特殊的模式，<strong>BEGIN模式使用在任何文本浏览之前</strong>，常用来做一些初始化设置或打印头部信息等，<strong>END模式使用在完成文本浏览动作之后</strong>，常用来处理一些收尾打印等工作。注意<strong>BEGIN和END语句都仅且执行一次</strong></p>
</li>
</ul>
<h2 id="awk基本用法"><a href="#awk基本用法" class="headerlink" title="awk基本用法"></a>awk基本用法</h2><p>假定一下为一个学校中抽样的几个学生的成绩(score.txt)，下面四列分别为学号，名字，年级，分数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">13331264 tom   grade4 94</div><div class="line">13342010 marry grade4 90</div><div class="line">13315012 jemmy grade1 85</div><div class="line">13323089 jane  grade2 80</div></pre></td></tr></table></figure>
<h4 id="域标识"><a href="#域标识" class="headerlink" title="域标识"></a>域标识</h4><pre><code>awk从输入文件中**每次读取一行**，当遇到分割符时将其分割为域，这些域被标记为\$1，\$2,\$3...，直到读到文件结尾或文件不存在,$0表示当前记录（即当前行）。
</code></pre><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 不加pattern</div><div class="line">awk &apos;&#123;print $1,$4&#125;&apos; score.txt</div><div class="line"></div><div class="line">输出结果：</div><div class="line">13331264 94</div><div class="line">13342010 90</div><div class="line">13315012 85</div><div class="line">13323089 80</div><div class="line"></div><div class="line"># pattern为$4&gt;=90,过滤分数超过90分的用户才处理</div><div class="line">awk &apos;$4&gt;=90 &#123;print $1,$4&#125;&apos; score.txt</div><div class="line">输出结果：</div><div class="line">13331264 94</div><div class="line">13342010 90</div><div class="line"></div><div class="line"># 命令有两个parttern action组，第一个pattern为BEGIN,第二个patter为$4&gt;=90</div><div class="line">awk &apos;BEGIN &#123;print &quot;学号     成绩&quot;&#125; $4&gt;=90 &#123;print $1,$4&#125;&apos; score.txt</div><div class="line">输出结果：</div><div class="line">学号     成绩</div><div class="line">13331264 94</div><div class="line">13342010 90</div></pre></td></tr></table></figure>
<h4 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h4><p><strong>关系与正则运算符</strong>：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>~</td>
<td>匹配正则表达式（二元 符号前面为被匹配的字符串，后面为模式串，一般模式传用/pattern/括起来）</td>
</tr>
<tr>
<td>!~</td>
<td>不匹配正则表达式</td>
</tr>
</tbody>
</table>
<p><strong>逻辑运算符</strong></p>
<p>逻辑运算符与C语言中完全一致。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>且，两个条件同时满足才为真</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>或，只要有一个条件为真即为真</td>
</tr>
<tr>
<td>!</td>
<td>将结果取反（一元运算符）</td>
</tr>
</tbody>
</table>
<p><strong>关键字</strong></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>break</td>
<td>用于while或for循环，退出循环</td>
</tr>
<tr>
<td>continue</td>
<td>终止当前循环，执行下一个循环</td>
</tr>
<tr>
<td>next</td>
<td>导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。</td>
</tr>
<tr>
<td>exit</td>
<td>退出执行，直接跳转到END执行，若没有END,终止脚本</td>
</tr>
</tbody>
</table>
<p><strong>if条件控制语句</strong></p>
<pre><code>在awk中使用if判断条件时，必须将if后面的条件用()括起来，与C语言类似。
</code></pre><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 过滤学号中有1333字符串的成绩记录</span></div><div class="line">awk <span class="string">'&#123;if($1~/1333/) print $0&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span> tom   grade4 <span class="number">94</span></div><div class="line"></div><div class="line"><span class="comment"># 过滤学号中不含1333字符串的成绩记录</span></div><div class="line">awk <span class="string">'&#123;if($1!~/1333/) print $0&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13342010</span> marry grade4 <span class="number">90</span></div><div class="line"><span class="number">13315012</span> jemmy grade1 <span class="number">85</span></div><div class="line"><span class="number">13323089</span> jane  grade2 <span class="number">80</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 过滤成绩大于85分的成绩记录</span></div><div class="line">awk <span class="string">'&#123;if($4&gt;85) print $0&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span> tom   grade4 <span class="number">94</span></div><div class="line"><span class="number">13342010</span> marry grade4 <span class="number">90</span></div><div class="line"></div><div class="line"><span class="comment"># 过滤成绩大于90小于100的成绩记录</span></div><div class="line">awk <span class="string">'&#123;if($4&gt;90&amp;&amp;$4&lt;100) print $0&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span> tom   grade4 <span class="number">94</span></div></pre></td></tr></table></figure>
<p>当然我们使用模式代替if条件判断，这个可以达到相同的效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 使用条件语句</div><div class="line">awk &apos;&#123;if($4&gt;85) print $0&#125;&apos; score.txt</div><div class="line"></div><div class="line"># 使用模式过滤行</div><div class="line">awk &apos;$4&gt;85 &#123;print $0&#125;&apos; score.txt</div></pre></td></tr></table></figure>
<h4 id="for循环控制语句"><a href="#for循环控制语句" class="headerlink" title="for循环控制语句"></a>for循环控制语句</h4><p><strong>语法</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 格式一：</span></div><div class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 数组)</div><div class="line">&#123;</div><div class="line">    do_something;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 格式二（与C语言相同）</span></div><div class="line"><span class="keyword">for</span> (变量;条件;表达式)</div><div class="line">&#123;</div><div class="line">    do_something;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ENVIRON为awk内置的环境变量，下面会说到。其为一个数组，该作用为打印环境变量中的所有键值对</div><div class="line">awk &apos;BEGIN &#123;for(k in ENVIRON) &#123;print k&quot;=&quot;ENVIRON[k];&#125;&#125;&apos;</div><div class="line"></div><div class="line"># 打印0-9</div><div class="line">awk &apos;BEGIN &#123;for(i=0;i&lt;10;i++) &#123;print i&#125;&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="while循环控制语句"><a href="#while循环控制语句" class="headerlink" title="while循环控制语句"></a>while循环控制语句</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while (条件表达式)</div><div class="line">&#123;</div><div class="line">    do_something;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印0-9</div><div class="line">awk &apos;BEGIN &#123;i=0; while (i&lt;10)&#123;print i;i++&#125;&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="do-while循环控制语句"><a href="#do-while循环控制语句" class="headerlink" title="do while循环控制语句"></a>do while循环控制语句</h4><p><strong>语法:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">do</div><div class="line">&#123;</div><div class="line">    do_something</div><div class="line">&#125;</div><div class="line">while (条件表达式)</div></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印0-9</div><div class="line">awk &apos;BEGIN &#123;i=0;do&#123;print i; i++;&#125; while (i&lt;10)&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="awk运算"><a href="#awk运算" class="headerlink" title="awk运算"></a>awk运算</h4><p><strong>算术运算符</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>+ - *  / %</td>
<td>加/减/乘/除/取余</td>
</tr>
<tr>
<td>++</td>
<td>自增1</td>
</tr>
<tr>
<td>–</td>
<td>自减1</td>
</tr>
<tr>
<td>+</td>
<td>一元加操作符，将操作数乘以1</td>
</tr>
<tr>
<td>-</td>
<td>一元减操作符，将操作数乘以-1</td>
</tr>
<tr>
<td>^</td>
<td>求幂。如2^2=4</td>
</tr>
</tbody>
</table>
<p><strong>赋值运算符</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>+=、-=、*=、/=、%=、^=</td>
<td>将左右操作数进行对应操作，然后赋值给左操作数（与C语言完全一致）</td>
</tr>
</tbody>
</table>
<p><strong>其他运算符</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td>字段引用（引用域）</td>
</tr>
<tr>
<td>? :</td>
<td>条件表达式（与C语言一致）</td>
</tr>
<tr>
<td>空格</td>
<td>字符串连接符</td>
</tr>
<tr>
<td>in</td>
<td>判断数组中是否存在某个键值</td>
</tr>
</tbody>
</table>
<p><strong>运算符优先级：</strong><br><img src="/images/算术优先级.gif" alt="crc1"></p>
<h4 id="awk数组"><a href="#awk数组" class="headerlink" title="awk数组"></a>awk数组</h4><pre><code>awk数组是一种关联数组，其下标既可以是数字，也可以是字符串。
</code></pre><ul>
<li>无需定义，数组在使用时被定义</li>
<li>数组元素的初始值为0或者空字符串</li>
<li>数组可以自动扩展</li>
</ul>
<p>使用示例：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数组可直接使用，且无需定义</span></div><div class="line">awk <span class="string">'BEGIN &#123;a["123"]=2;print a["123"]&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 可使用for循环对数组中的元素进行循环读取</span></div><div class="line">awk <span class="string">'BEGIN &#123;a[1]=2;a[2]=3;a[3]=4; for(k in a) print k"="a[k];&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">1</span>=<span class="number">2</span></div><div class="line"><span class="number">2</span>=<span class="number">3</span></div><div class="line"><span class="number">3</span>=<span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># 可以通过if 判断某个key是否在数组中</span></div><div class="line">awk <span class="string">'BEGIN &#123;a[1]=2;a[2]=3;a[3]=4; print 5 in a; print 1 in a&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 删除数组中的元素，使用delete arr['key']</span></div><div class="line">awk <span class="string">'BEGIN &#123;a[1]=2;a[2]=3;a[3]=4; delete a[1];for(k in a) print k"="a[k];&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">2</span>=<span class="number">3</span></div><div class="line"><span class="number">3</span>=<span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># 多维数组的下标分隔符默认为“\034”，可通过设定SUBSEP修改多为数组的下标分隔符</span></div><div class="line">awk <span class="string">'BEGIN &#123;a[1,2]=10; for(k in a) print k"="a[k];&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">12</span>=<span class="number">10</span></div><div class="line"></div><div class="line">awk <span class="string">'BEGIN &#123;SUBSEP=":";a[1,2]=10; for(k in a) print k"="a[k];&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">1</span>:<span class="number">2</span>=<span class="number">10</span></div></pre></td></tr></table></figure>
<h4 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ARGC</td>
<td>命令行参数个数,awk后参数个数</td>
</tr>
<tr>
<td>ARGV</td>
<td>命令行参数数组，数组下标从0开始</td>
</tr>
<tr>
<td>ENVIRON</td>
<td>系统环境变量数组</td>
</tr>
<tr>
<td>FILENAME</td>
<td>输入文件的名字</td>
</tr>
<tr>
<td>FNR</td>
<td>浏览文件的记录数（文件中的记录数，若多个文件不会累加）</td>
</tr>
<tr>
<td>NR</td>
<td>已读记录数（已读的记录数，若多文件会离家）</td>
</tr>
<tr>
<td>NF</td>
<td>浏览记录域的个数（即每行分割的域的最大值）</td>
</tr>
<tr>
<td>FS</td>
<td>设置域分割符，常用于BEGIN中设置域分割符</td>
</tr>
<tr>
<td>RS</td>
<td>设置记录分隔符，原记录分隔符默认为换行，即一行一行读取，可使用该参数控制其不按照行读取</td>
</tr>
<tr>
<td>OFS</td>
<td>设置<strong>输出域分隔符</strong>，原域默认分隔符为空格，可使用此分隔符修改</td>
</tr>
<tr>
<td>ORS</td>
<td>设置输出记录分隔符。原记录默认分隔符为换行，可使用此参数修改</td>
</tr>
</tbody>
</table>
<p><strong>使用示例：</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ARGC测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;print ARGC&#125;'</span> score.txt</div><div class="line">输出:</div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># ARGV测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;print ARGC; print ARGV[0];print ARGV[1]&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">2</span></div><div class="line">awk</div><div class="line">score.txt</div><div class="line"></div><div class="line"><span class="comment"># ENVIRON测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;for(k in ENVIRON) &#123;print k"="ENVIRON[k];&#125;&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># FILENAME测试</span></div><div class="line"> awk <span class="string">'BEGIN &#123;i=0&#125; &#123;if(i==0)&#123;print FILENAME;i++&#125;&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line">score.txt</div><div class="line"></div><div class="line"><span class="comment"># FNR测试</span></div><div class="line">awk <span class="string">' END &#123;print FNR&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment">#NR 测试</span></div><div class="line">awk <span class="string">'&#123;print NR&#125;'</span> score.txt  </div><div class="line">输出：</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># NF测试</span></div><div class="line">awk <span class="string">' END &#123;print NF&#125;'</span> score.txt</div><div class="line"></div><div class="line"><span class="comment"># FS测试(以下两种方式效果一致)</span></div><div class="line">awk <span class="string">'BEGIN &#123;FS="\t"&#125; &#123;print NR&#125;'</span> score.txt</div><div class="line">awk -F<span class="string">'\t'</span> <span class="string">'&#123;print NR&#125;'</span> score.txt</div><div class="line"></div><div class="line"><span class="comment"># OFS测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;OFS="|"&#125; &#123;print $1,$2&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span>|tom</div><div class="line"><span class="number">13342010</span>|marry</div><div class="line"><span class="number">13315012</span>|jemmy</div><div class="line"><span class="number">13323089</span>|jane</div><div class="line"></div><div class="line"><span class="comment"># ORS测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;ORS="|"&#125; &#123;print $1,$2&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span> tom|<span class="number">13342010</span> marry|<span class="number">13315012</span> jemmy|<span class="number">13323089</span> jane|</div><div class="line"></div><div class="line"><span class="comment"># RS测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;RS="1333"&#125; &#123;print $1,$2&#125;'</span> score.txt</div><div class="line">输出：</div><div class="line"></div><div class="line"><span class="number">1264</span> tom</div></pre></td></tr></table></figure>
<p><strong>FNR与NR区别</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">cat a.txt</div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">222</span></div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">333</span></div><div class="line"><span class="number">444</span></div><div class="line">cat b.txt</div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">555</span></div><div class="line"><span class="number">666</span></div><div class="line"></div><div class="line">awk <span class="string">'&#123;print FNR&#125;'</span> a.txt b.txt</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line">awk <span class="string">'&#123;print NR&#125;'</span> a.txt b.txt</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<h4 id="awk内置函数"><a href="#awk内置函数" class="headerlink" title="awk内置函数"></a>awk内置函数</h4><p><strong>计算相关函数：</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>cos(expr)</td>
<td>计算余弦值，参数为弧度</td>
</tr>
<tr>
<td>sin(expr)</td>
<td>计算正弦值，参数为弧度</td>
</tr>
<tr>
<td>int(expr)</td>
<td>取整</td>
</tr>
<tr>
<td>log(expr)</td>
<td>计算expr的自然对数</td>
</tr>
<tr>
<td>sqrt(expr)</td>
<td>计算expr的平方根</td>
</tr>
</tbody>
</table>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试cos</span></div><div class="line">awk <span class="string">'BEGIN &#123;print cos(60*3.1415936/180)&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="comment"># 测试int</span></div><div class="line">awk <span class="string">'BEGIN &#123;print int(20.5)&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">20</span></div><div class="line"><span class="comment"># 测试log</span></div><div class="line">awk <span class="string">'BEGIN &#123;print log(10)&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">2.30259</span></div></pre></td></tr></table></figure>
<p><strong>注意：awk字符串下标从1开始不是从0开始</strong></p>
<p><strong>字符串相关函数：</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sub(src,des)</td>
<td>将0中src第一次出现的子串替换为des</td>
</tr>
<tr>
<td>sub(src,des,str)</td>
<td>将字符串str中第一次出现的src替换为des。</td>
</tr>
<tr>
<td>gsub(src,des)</td>
<td>将0中的src全部替换为des，若0中包含src,则返回1否则返回0</td>
</tr>
<tr>
<td>gsub(src,des,str)</td>
<td>将字符串str中的所有src替换为des,</td>
</tr>
<tr>
<td>index(str,substr)</td>
<td>返回str中字符串substr首次出现的位置，位置从1开始，若未找到则返回0</td>
</tr>
<tr>
<td>length（str）</td>
<td>返回str的长度</td>
</tr>
<tr>
<td>match(str, substr)</td>
<td>测试str中是否存在子串substr</td>
</tr>
<tr>
<td>split(str,result,sep)</td>
<td>将str以sep为分割符分割为数组，并存到result中</td>
</tr>
<tr>
<td>printf(format,…)</td>
<td>格式化输出，与C语言类似</td>
</tr>
<tr>
<td>substr(str,start)</td>
<td>返回从start开始一直到最后的子字符串,与C++类似</td>
</tr>
<tr>
<td>substr(str,start,n)</td>
<td>返回从start开始长度为n的子字符串，与C++类似</td>
</tr>
</tbody>
</table>
<p><strong>常用printf format</strong></p>
<table>
<thead>
<tr>
<th>format</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>ascii字符</td>
</tr>
<tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%e</td>
<td>浮点数，科学计数法</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数(如1.234)</td>
</tr>
<tr>
<td>%o</td>
<td>八进制数</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制数</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<p>更多format详见（<a href="http://wiki.jikexueyuan.com/project/awk/pretty-printing.html）" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/awk/pretty-printing.html）</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sub测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;s="aaabbbaaaccc";sub("aaa","1",s);print s&#125;'</span></div><div class="line">输出：</div><div class="line"><span class="number">1</span>bbbaaaccc</div><div class="line"></div><div class="line"><span class="comment"># gsub(r,s)测试</span></div><div class="line">awk <span class="string">'&#123;gsub("t","s");print $0&#125;'</span> ./score.txt</div><div class="line">输出：</div><div class="line"><span class="number">13331264</span> som   grade4 <span class="number">94</span></div><div class="line"><span class="number">13342010</span> marry grade4 <span class="number">90</span></div><div class="line"><span class="number">13315012</span> jemmy grade1 <span class="number">85</span></div><div class="line"><span class="number">13323089</span> jane  grade2 <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment"># gsub(r,s,t)测试</span></div><div class="line">awk <span class="string">'&#123;gsub("133", "45",$1);print $0&#125;'</span> ./score.txt  </div><div class="line">输出：</div><div class="line"><span class="number">4531264</span> tom grade4 <span class="number">94</span></div><div class="line"><span class="number">4542010</span> marry grade4 <span class="number">90</span></div><div class="line"><span class="number">4515012</span> jemmy grade1 <span class="number">85</span></div><div class="line"><span class="number">4523089</span> jane grade2 <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment"># index(s,t)测试</span></div><div class="line">awk <span class="string">'&#123;r = index($2,"m");print r&#125;'</span> ./score.txt</div><div class="line">输出：</div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># 测试length</span></div><div class="line">awk <span class="string">'&#123;print length($2)&#125;'</span> ./score.txt</div><div class="line">输出：</div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># 测试match</span></div><div class="line">awk <span class="string">'&#123;print match($2,"to")&#125;'</span> ./score.txt</div><div class="line">输出：</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="comment"># split测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;print split("this is a test",result, " "); for(k in result) &#123;print k":"result[k]&#125;&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># substr测试</span></div><div class="line">awk <span class="string">'BEGIN &#123;s="aaabbbccc";print substr(s,2)&#125;'</span></div><div class="line">输出：</div><div class="line">aabbbccc</div></pre></td></tr></table></figure>
<h2 id="AWK几个例子"><a href="#AWK几个例子" class="headerlink" title="AWK几个例子"></a>AWK几个例子</h2><h4 id="文件去重并统计相同记录出现次数-保留记录原来的顺序"><a href="#文件去重并统计相同记录出现次数-保留记录原来的顺序" class="headerlink" title="文件去重并统计相同记录出现次数(保留记录原来的顺序)"></a>文件去重并统计相同记录出现次数(保留记录原来的顺序)</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">test.txt</div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">222</span></div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">333</span></div><div class="line"><span class="number">444</span></div><div class="line"><span class="comment"># !的优先级高于++,读到一条记录，首先判断记录是否存在于arr中，若不存在，添加到数组中并将该记录数出现次数+1，否则打印</span></div><div class="line">awk <span class="string">'!arr[$0]++'</span> test.txt</div><div class="line"></div><div class="line"><span class="comment"># 统计每条记录出现的次数</span></div><div class="line">awk <span class="string">'&#123;!arr[$0]++&#125; END &#123;for (k in arr) print k,arr[k]&#125;'</span> test.txt</div></pre></td></tr></table></figure>
<h4 id="文件内容合并"><a href="#文件内容合并" class="headerlink" title="文件内容合并"></a>文件内容合并</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">test.txt.<span class="number">1</span></div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">555</span></div><div class="line"><span class="number">666</span></div><div class="line"></div><div class="line">awk <span class="string">'&#123;if(!arr[$0]) &#123;print $0; arr[$0]++&#125;&#125;'</span> test.txt test.txt.<span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="找出文件A中存在且文件B中不存在的记录"><a href="#找出文件A中存在且文件B中不存在的记录" class="headerlink" title="找出文件A中存在且文件B中不存在的记录"></a>找出文件A中存在且文件B中不存在的记录</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A:</div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">222</span></div><div class="line"><span class="number">333</span></div><div class="line"><span class="number">444</span></div><div class="line"></div><div class="line">B:</div><div class="line"><span class="number">333</span></div><div class="line"><span class="number">444</span></div><div class="line"></div><div class="line"><span class="comment">#计算a.txt-(a.txt并a.txt)</span></div><div class="line">awk <span class="string">'NR==FNR &#123;a[$0]=1&#125; NR&gt;FNR &#123;if (!a[$0]) print $0&#125;'</span> b.txt a.txt</div><div class="line">输出：</div><div class="line"><span class="number">111</span></div><div class="line"><span class="number">222</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWK是一种强大的文本处理工具，其处理文本的效率极高，其输出可以来自标注输入、其他命令的输出或一个或多个文件，熟练使用awk将会对工作效率有很大的提升。&lt;/p&gt;
&lt;h2 id=&quot;awk调用方式&quot;&gt;&lt;a href=&quot;#awk调用方式&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="Unix脚本语言" scheme="http://yoursite.com/categories/Unix%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="awk" scheme="http://yoursite.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>CRC循环冗余校验</title>
    <link href="http://yoursite.com/2018/07/08/CRC%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/07/08/CRC循环冗余校验/</id>
    <published>2018-07-08T10:40:00.000Z</published>
    <updated>2018-07-08T14:30:08.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CRC循环冗余校验"><a href="#CRC循环冗余校验" class="headerlink" title="CRC循环冗余校验"></a>CRC循环冗余校验</h1><p>CRC（<strong>Cyclic redundancy check</strong>）又称为循环冗余校验，它是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用于<strong>检测或校验数据传输或者保存后可能出现的错误</strong>。生成的校验码在传输或者存储之前计算出来并附加到数据后面，然后接收方进行检验确定数据是否发生变化。</p>
<h2 id="数据通讯校验方法"><a href="#数据通讯校验方法" class="headerlink" title="数据通讯校验方法"></a>数据通讯校验方法</h2><p>数据通讯中常见的几种校验方法包括以下几种：</p>
<ul>
<li>奇偶校验/bit校验</li>
<li>累加和校验</li>
<li>循环冗余校验</li>
</ul>
<h3 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h3><p>​        奇偶校验算法包括两种类型，分别是奇校验位和偶校验位。它表示一个给定位数的二进制数中的1的个数是奇数个还是偶数个。</p>
<p>​        奇偶校验的原理是在发送的每一个字节后都加一位，使得每个字节中1的个数为奇数个或者偶数个（若为奇校验，则1的个数是奇数个，若为偶校验，1的个数为偶数个）。</p>
<p>​        如要传输的数据为1001 0010 0010 0001。</p>
<p>​    若采用奇校验，则将每个字节补位，传输的数据为1001 0010 <strong>0</strong> 0010 0001 <strong>1</strong></p>
<p>​    若采用偶校验，则将每个字节补位，传输的数据为1001 0010 <strong>1</strong> 0010 0001 <strong>0</strong></p>
<p><strong>奇偶校验的缺点</strong>是</p>
<ol>
<li>检测出错的概率较大，错误率在50%左右。</li>
<li>由于对于每个字节都需要补位，所以对传输性能影响较大。</li>
</ol>
<h3 id="累加和校验"><a href="#累加和校验" class="headerlink" title="累加和校验"></a>累加和校验</h3><p>累加和校验的实现方式有很多种最常用的一种是在一次通讯数据包的最后加入一个字节的校验数据，这个字节的内容为数据包中全部数据的忽略进位的按字节累加。如:</p>
<p>​    要传输的数据为:</p>
<p>​        1、2、3</p>
<p>​    加上校验和之后的数据包为：</p>
<p>​        1、2、3、6</p>
<p><strong>累加和校验的缺点</strong>：</p>
<p>​    当校验单字节时，有1/256的出错概率。</p>
<h3 id="循环冗余校验-CRC"><a href="#循环冗余校验-CRC" class="headerlink" title="循环冗余校验(CRC)"></a>循环冗余校验(CRC)</h3><p>循环冗余校验的算法思想可以理解为<strong>选取一个生成多项式k，将需要传输的数据补位，使得补位后的数据可二进制整除该生成多项式，数据接收方校验数据的方法为看接收后的数据是否能二进制整除k</strong>:</p>
<pre><code> 1. 将要传输的数据用二进制形式展开
2. 选定一个数K（称为**生成多项式**），K的二进制长度为W+1，则位宽为W
3. 在要传输的二进制数据后补W个0
4. 用二进制展开后的数据用二进制除法（不进位不借位,减法为二进制中的XOR）除以k，得到的余数即为循环冗余校验和。
</code></pre><p>示例如下：</p>
<p><img src="/images/crc1.jpg" alt="crc1"></p>
<p><img src="/images/crc2.jpg" alt="crc2"></p>
<h2 id="影响CRC算法的因素"><a href="#影响CRC算法的因素" class="headerlink" title="影响CRC算法的因素"></a>影响CRC算法的因素</h2><p>​        在实际使用，影响CRC的参数模型因素有如下几个：</p>
<ul>
<li>宽度（WIDTH）：即多项式的长度-1。</li>
<li>多项式（POLY）：即生成多项式，上述示例中的k，要求生成多项式的最高位必须为1。</li>
<li>初始值（INIT）：初始时CRC寄存器中的值，这个值常选为0x0000或0xFFFF</li>
<li>结果异或值（XOR）：上述方法计算结果后再与该值异或即得CRC值。</li>
</ul>
<p>​        为了使得校验出错率降到最低，业界研究出一些特定的生成多项式用于CRC校验算法。常见的CRC算法有CRC8、CRC16、CRC32、CRC64等等。</p>
<h2 id="使用C语言实现CRC算法"><a href="#使用C语言实现CRC算法" class="headerlink" title="使用C语言实现CRC算法"></a>使用C语言实现CRC算法</h2><p>以下算法参考redis源码中CRC16实现方法，是一种比较高效的实现方式。</p>
<p>宽度：16</p>
<p>生成多项式为：0x1021(x16+x12+x5+1)</p>
<p>初始值：0</p>
<p>结果异或值：0</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint16_t</span> crc16tab[<span class="number">256</span>]= &#123;</div><div class="line">    <span class="number">0x0000</span>,<span class="number">0x1021</span>,<span class="number">0x2042</span>,<span class="number">0x3063</span>,<span class="number">0x4084</span>,<span class="number">0x50a5</span>,<span class="number">0x60c6</span>,<span class="number">0x70e7</span>,</div><div class="line">    <span class="number">0x8108</span>,<span class="number">0x9129</span>,<span class="number">0xa14a</span>,<span class="number">0xb16b</span>,<span class="number">0xc18c</span>,<span class="number">0xd1ad</span>,<span class="number">0xe1ce</span>,<span class="number">0xf1ef</span>,</div><div class="line">    <span class="number">0x1231</span>,<span class="number">0x0210</span>,<span class="number">0x3273</span>,<span class="number">0x2252</span>,<span class="number">0x52b5</span>,<span class="number">0x4294</span>,<span class="number">0x72f7</span>,<span class="number">0x62d6</span>,</div><div class="line">    <span class="number">0x9339</span>,<span class="number">0x8318</span>,<span class="number">0xb37b</span>,<span class="number">0xa35a</span>,<span class="number">0xd3bd</span>,<span class="number">0xc39c</span>,<span class="number">0xf3ff</span>,<span class="number">0xe3de</span>,</div><div class="line">    <span class="number">0x2462</span>,<span class="number">0x3443</span>,<span class="number">0x0420</span>,<span class="number">0x1401</span>,<span class="number">0x64e6</span>,<span class="number">0x74c7</span>,<span class="number">0x44a4</span>,<span class="number">0x5485</span>,</div><div class="line">    <span class="number">0xa56a</span>,<span class="number">0xb54b</span>,<span class="number">0x8528</span>,<span class="number">0x9509</span>,<span class="number">0xe5ee</span>,<span class="number">0xf5cf</span>,<span class="number">0xc5ac</span>,<span class="number">0xd58d</span>,</div><div class="line">    <span class="number">0x3653</span>,<span class="number">0x2672</span>,<span class="number">0x1611</span>,<span class="number">0x0630</span>,<span class="number">0x76d7</span>,<span class="number">0x66f6</span>,<span class="number">0x5695</span>,<span class="number">0x46b4</span>,</div><div class="line">    <span class="number">0xb75b</span>,<span class="number">0xa77a</span>,<span class="number">0x9719</span>,<span class="number">0x8738</span>,<span class="number">0xf7df</span>,<span class="number">0xe7fe</span>,<span class="number">0xd79d</span>,<span class="number">0xc7bc</span>,</div><div class="line">    <span class="number">0x48c4</span>,<span class="number">0x58e5</span>,<span class="number">0x6886</span>,<span class="number">0x78a7</span>,<span class="number">0x0840</span>,<span class="number">0x1861</span>,<span class="number">0x2802</span>,<span class="number">0x3823</span>,</div><div class="line">    <span class="number">0xc9cc</span>,<span class="number">0xd9ed</span>,<span class="number">0xe98e</span>,<span class="number">0xf9af</span>,<span class="number">0x8948</span>,<span class="number">0x9969</span>,<span class="number">0xa90a</span>,<span class="number">0xb92b</span>,</div><div class="line">    <span class="number">0x5af5</span>,<span class="number">0x4ad4</span>,<span class="number">0x7ab7</span>,<span class="number">0x6a96</span>,<span class="number">0x1a71</span>,<span class="number">0x0a50</span>,<span class="number">0x3a33</span>,<span class="number">0x2a12</span>,</div><div class="line">    <span class="number">0xdbfd</span>,<span class="number">0xcbdc</span>,<span class="number">0xfbbf</span>,<span class="number">0xeb9e</span>,<span class="number">0x9b79</span>,<span class="number">0x8b58</span>,<span class="number">0xbb3b</span>,<span class="number">0xab1a</span>,</div><div class="line">    <span class="number">0x6ca6</span>,<span class="number">0x7c87</span>,<span class="number">0x4ce4</span>,<span class="number">0x5cc5</span>,<span class="number">0x2c22</span>,<span class="number">0x3c03</span>,<span class="number">0x0c60</span>,<span class="number">0x1c41</span>,</div><div class="line">    <span class="number">0xedae</span>,<span class="number">0xfd8f</span>,<span class="number">0xcdec</span>,<span class="number">0xddcd</span>,<span class="number">0xad2a</span>,<span class="number">0xbd0b</span>,<span class="number">0x8d68</span>,<span class="number">0x9d49</span>,</div><div class="line">    <span class="number">0x7e97</span>,<span class="number">0x6eb6</span>,<span class="number">0x5ed5</span>,<span class="number">0x4ef4</span>,<span class="number">0x3e13</span>,<span class="number">0x2e32</span>,<span class="number">0x1e51</span>,<span class="number">0x0e70</span>,</div><div class="line">    <span class="number">0xff9f</span>,<span class="number">0xefbe</span>,<span class="number">0xdfdd</span>,<span class="number">0xcffc</span>,<span class="number">0xbf1b</span>,<span class="number">0xaf3a</span>,<span class="number">0x9f59</span>,<span class="number">0x8f78</span>,</div><div class="line">    <span class="number">0x9188</span>,<span class="number">0x81a9</span>,<span class="number">0xb1ca</span>,<span class="number">0xa1eb</span>,<span class="number">0xd10c</span>,<span class="number">0xc12d</span>,<span class="number">0xf14e</span>,<span class="number">0xe16f</span>,</div><div class="line">    <span class="number">0x1080</span>,<span class="number">0x00a1</span>,<span class="number">0x30c2</span>,<span class="number">0x20e3</span>,<span class="number">0x5004</span>,<span class="number">0x4025</span>,<span class="number">0x7046</span>,<span class="number">0x6067</span>,</div><div class="line">    <span class="number">0x83b9</span>,<span class="number">0x9398</span>,<span class="number">0xa3fb</span>,<span class="number">0xb3da</span>,<span class="number">0xc33d</span>,<span class="number">0xd31c</span>,<span class="number">0xe37f</span>,<span class="number">0xf35e</span>,</div><div class="line">    <span class="number">0x02b1</span>,<span class="number">0x1290</span>,<span class="number">0x22f3</span>,<span class="number">0x32d2</span>,<span class="number">0x4235</span>,<span class="number">0x5214</span>,<span class="number">0x6277</span>,<span class="number">0x7256</span>,</div><div class="line">    <span class="number">0xb5ea</span>,<span class="number">0xa5cb</span>,<span class="number">0x95a8</span>,<span class="number">0x8589</span>,<span class="number">0xf56e</span>,<span class="number">0xe54f</span>,<span class="number">0xd52c</span>,<span class="number">0xc50d</span>,</div><div class="line">    <span class="number">0x34e2</span>,<span class="number">0x24c3</span>,<span class="number">0x14a0</span>,<span class="number">0x0481</span>,<span class="number">0x7466</span>,<span class="number">0x6447</span>,<span class="number">0x5424</span>,<span class="number">0x4405</span>,</div><div class="line">    <span class="number">0xa7db</span>,<span class="number">0xb7fa</span>,<span class="number">0x8799</span>,<span class="number">0x97b8</span>,<span class="number">0xe75f</span>,<span class="number">0xf77e</span>,<span class="number">0xc71d</span>,<span class="number">0xd73c</span>,</div><div class="line">    <span class="number">0x26d3</span>,<span class="number">0x36f2</span>,<span class="number">0x0691</span>,<span class="number">0x16b0</span>,<span class="number">0x6657</span>,<span class="number">0x7676</span>,<span class="number">0x4615</span>,<span class="number">0x5634</span>,</div><div class="line">    <span class="number">0xd94c</span>,<span class="number">0xc96d</span>,<span class="number">0xf90e</span>,<span class="number">0xe92f</span>,<span class="number">0x99c8</span>,<span class="number">0x89e9</span>,<span class="number">0xb98a</span>,<span class="number">0xa9ab</span>,</div><div class="line">    <span class="number">0x5844</span>,<span class="number">0x4865</span>,<span class="number">0x7806</span>,<span class="number">0x6827</span>,<span class="number">0x18c0</span>,<span class="number">0x08e1</span>,<span class="number">0x3882</span>,<span class="number">0x28a3</span>,</div><div class="line">    <span class="number">0xcb7d</span>,<span class="number">0xdb5c</span>,<span class="number">0xeb3f</span>,<span class="number">0xfb1e</span>,<span class="number">0x8bf9</span>,<span class="number">0x9bd8</span>,<span class="number">0xabbb</span>,<span class="number">0xbb9a</span>,</div><div class="line">    <span class="number">0x4a75</span>,<span class="number">0x5a54</span>,<span class="number">0x6a37</span>,<span class="number">0x7a16</span>,<span class="number">0x0af1</span>,<span class="number">0x1ad0</span>,<span class="number">0x2ab3</span>,<span class="number">0x3a92</span>,</div><div class="line">    <span class="number">0xfd2e</span>,<span class="number">0xed0f</span>,<span class="number">0xdd6c</span>,<span class="number">0xcd4d</span>,<span class="number">0xbdaa</span>,<span class="number">0xad8b</span>,<span class="number">0x9de8</span>,<span class="number">0x8dc9</span>,</div><div class="line">    <span class="number">0x7c26</span>,<span class="number">0x6c07</span>,<span class="number">0x5c64</span>,<span class="number">0x4c45</span>,<span class="number">0x3ca2</span>,<span class="number">0x2c83</span>,<span class="number">0x1ce0</span>,<span class="number">0x0cc1</span>,</div><div class="line">    <span class="number">0xef1f</span>,<span class="number">0xff3e</span>,<span class="number">0xcf5d</span>,<span class="number">0xdf7c</span>,<span class="number">0xaf9b</span>,<span class="number">0xbfba</span>,<span class="number">0x8fd9</span>,<span class="number">0x9ff8</span>,</div><div class="line">    <span class="number">0x6e17</span>,<span class="number">0x7e36</span>,<span class="number">0x4e55</span>,<span class="number">0x5e74</span>,<span class="number">0x2e93</span>,<span class="number">0x3eb2</span>,<span class="number">0x0ed1</span>,<span class="number">0x1ef0</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">uint16_t</span> crc16(<span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len) &#123;</div><div class="line">    <span class="keyword">int</span> counter;</div><div class="line">    <span class="keyword">uint16_t</span> crc = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (counter = <span class="number">0</span>; counter &lt; len; counter++)</div><div class="line">            crc = (crc&lt;&lt;<span class="number">8</span>) ^ crc16tab[((crc&gt;&gt;<span class="number">8</span>) ^ *buf++)&amp;<span class="number">0x00FF</span>];</div><div class="line">    <span class="keyword">return</span> crc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt;  crc16(<span class="string">"123"</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用boost库计算crc校验和"><a href="#使用boost库计算crc校验和" class="headerlink" title="使用boost库计算crc校验和"></a>使用boost库计算crc校验和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/crc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	crc_32_type crc32;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; hex;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; crc32.checksum() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	crc32.process_byte(<span class="string">'a'</span>);</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; crc32.checksum() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CRC循环冗余校验&quot;&gt;&lt;a href=&quot;#CRC循环冗余校验&quot; class=&quot;headerlink&quot; title=&quot;CRC循环冗余校验&quot;&gt;&lt;/a&gt;CRC循环冗余校验&lt;/h1&gt;&lt;p&gt;CRC（&lt;strong&gt;Cyclic redundancy check&lt;/stron
    
    </summary>
    
      <category term="计算机通信与安全" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="循环冗余校验" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="校验和" scheme="http://yoursite.com/tags/%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
    
      <category term="crc" scheme="http://yoursite.com/tags/crc/"/>
    
      <category term="通信" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>pthread使用barrier栅栏方式同步</title>
    <link href="http://yoursite.com/2018/07/05/pthread%E4%BD%BF%E7%94%A8barrier%E6%A0%85%E6%A0%8F%E6%96%B9%E5%BC%8F%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/07/05/pthread使用barrier栅栏方式同步/</id>
    <published>2018-07-04T16:10:31.000Z</published>
    <updated>2018-07-04T16:13:34.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pthread使用barrier栅栏方式同步"><a href="#pthread使用barrier栅栏方式同步" class="headerlink" title="pthread使用barrier栅栏方式同步"></a>pthread使用barrier栅栏方式同步</h1><p>Linux中提供了多种同步机制，其中使用barrier(栅栏)是多线程之间进行同步的方法之一。</p>
<blockquote>
<p> <strong>基本原理</strong>：</p>
<p> 假设多个线程约定一个栅栏，只有当所有的线程都达到这个栅栏时，栅栏才会放行，否则到达此处的线程将被阻塞。</p>
<p> <strong>使用场景</strong>：</p>
<p> 程序启动的时候，需要建立一个独立的线程去做一些特殊的工作。比如这个线程需要初始化一些全局配置等等。而主线程启动后，必须等待这个子线程拿到配置信息后，才能继续工作。所以这里就存在一个问题要解决，主线程如何等待这个子线程完成工作后，才继续往下执行呢？</p>
</blockquote>
<h3 id="栅栏相关API"><a href="#栅栏相关API" class="headerlink" title="栅栏相关API"></a>栅栏相关API</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//初始化栅栏，栅栏需要等待到count个线程，才会全部一起放行。</span></div><div class="line"><span class="function"><span class="keyword">int</span>   <span class="title">pthread_barrier_init</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *<span class="keyword">restrict</span>,</span></span></div><div class="line">                        <span class="keyword">const</span> <span class="keyword">pthread_barrierattr_t</span> *<span class="keyword">restrict</span>, <span class="keyword">unsigned</span> count);</div><div class="line"></div><div class="line"><span class="comment">//报道函数，当一个线程到达栅栏的时候，就报道。</span></div><div class="line"><span class="comment">//所有的线程都报道后，栅栏自然会放行。</span></div><div class="line"><span class="function"><span class="keyword">int</span>   <span class="title">pthread_barrier_wait</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *barrier)</span></span>;</div><div class="line"></div><div class="line">栅栏完成历史使命后，当然是功成身退。</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_destroy</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *barrier)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">pthread_barrier_t</span> barrier;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">initor</span><span class="params">(<span class="keyword">void</span>* args)</span> </span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"---------------thread init work(%d)--------------\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line">	<span class="comment">//模拟初始化工作。</span></div><div class="line">	sleep(<span class="number">10</span>);</div><div class="line">	<span class="comment">//到达栅栏</span></div><div class="line">	pthread_barrier_wait(&amp;barrier);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"--------------thread start work(%d)--------------\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line">	sleep(<span class="number">10</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"--------------thread stop work(%d)--------------\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</div><div class="line">  	<span class="comment">//初始化栅栏，该栅栏等待两个线程到达时放行</span></div><div class="line">	pthread_barrier_init(&amp;barrier, <span class="literal">NULL</span>, <span class="number">2</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"**************main thread barrier init done****************\n"</span>);</div><div class="line">	<span class="keyword">pthread_t</span> pid;</div><div class="line">	pthread_create(&amp;pid, <span class="literal">NULL</span>, &amp;initor, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"**************main waiting(%d)********************\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line">	<span class="comment">//主线程到达，被阻塞，当初始化线程到达栅栏时才放行。</span></div><div class="line">  	pthread_barrier_wait(&amp;barrier);</div><div class="line">	pthread_barrier_destroy(&amp;barrier);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"***************main start to work(%d)****************\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line">	sleep(<span class="number">30</span>);</div><div class="line">	pthread_join(pid, <span class="literal">NULL</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"***************thread complete(%d)***************\n"</span>, time(<span class="literal">NULL</span>));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pthread使用barrier栅栏方式同步&quot;&gt;&lt;a href=&quot;#pthread使用barrier栅栏方式同步&quot; class=&quot;headerlink&quot; title=&quot;pthread使用barrier栅栏方式同步&quot;&gt;&lt;/a&gt;pthread使用barrier栅栏方式
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="pthread" scheme="http://yoursite.com/tags/pthread/"/>
    
      <category term="barrier" scheme="http://yoursite.com/tags/barrier/"/>
    
      <category term="同步" scheme="http://yoursite.com/tags/%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>文件描述符限制</title>
    <link href="http://yoursite.com/2018/07/04/Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E9%99%90%E5%88%B6/"/>
    <id>http://yoursite.com/2018/07/04/Linux文件描述符限制/</id>
    <published>2018-07-04T15:50:20.000Z</published>
    <updated>2018-07-04T16:09:51.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件描述符限制"><a href="#文件描述符限制" class="headerlink" title="文件描述符限制"></a>文件描述符限制</h1><p>文件描述符是系统的一个重要资源，理论上有多少内存就可以创建多少文件描述符，但是在实际实现过程中，一般打开的文件数是系统内存的10%（以KB计算）。</p>
<p><strong>查看当前系统最大的文件描述符数量</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#系统最大文件描述符数量</div><div class="line">$sysctl -a | grep fs.file-max</div><div class="line">1026095(与系统相关)</div><div class="line">#当前session最大的文件描述符数量</div><div class="line">$ulimit -n</div><div class="line">1024</div></pre></td></tr></table></figure>
<p><strong>修改当前系统最大文件描述符数量</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#永久修改系统的最大描述符数量</span></div><div class="line"><span class="comment">#在/etc/sysctl.conf中添加：</span></div><div class="line">fs.file-max=<span class="number">102400</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件描述符限制&quot;&gt;&lt;a href=&quot;#文件描述符限制&quot; class=&quot;headerlink&quot; title=&quot;文件描述符限制&quot;&gt;&lt;/a&gt;文件描述符限制&lt;/h1&gt;&lt;p&gt;文件描述符是系统的一个重要资源，理论上有多少内存就可以创建多少文件描述符，但是在实际实现过程中，一般
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文件描述符" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>C++作用域运算符</title>
    <link href="http://yoursite.com/2018/07/04/C++%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/07/04/C++作用域运算符/</id>
    <published>2018-07-04T15:47:20.000Z</published>
    <updated>2018-07-04T16:00:19.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-作用域运算符"><a href="#C-作用域运算符" class="headerlink" title="C++作用域运算符"></a>C++作用域运算符</h1><blockquote>
<p> C++作用域运算符是C++运算符中等级最高的。::运算符的本质是：左操作数为域，是一个scope，右操作数是这个scope中的一个名字，它可以是一个scope、class、member、function或者variable等。</p>
<p> google style对域作用符的建议和说明可参考：</p>
<p> <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/scoping/#namespaces" target="_blank" rel="external">http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/scoping/#namespaces</a></p>
</blockquote>
<h2 id="作用域运算符作用"><a href="#作用域运算符作用" class="headerlink" title="作用域运算符作用"></a>作用域运算符作用</h2><p>::的作用主要包括以下三种：</p>
<ul>
<li>全局作用域符（::name）</li>
<li>类作用域符（class::name）</li>
<li>命名空间作用域符（namespace::name）</li>
</ul>
<p>后两种比较常见，不做说明。全局作用符的作用是：如果程序中既定义了全局变量a，也定义了局部变量a，此时若要访问全局变量a，则需要使用::a来访问全局变量a。</p>
<p>当作为类作用符时可用来决议多继承中的重名成员，指定类成员及函数等。</p>
<p>当作为命名空间域作用符时可有效的防止全局作用域命名冲突。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-作用域运算符&quot;&gt;&lt;a href=&quot;#C-作用域运算符&quot; class=&quot;headerlink&quot; title=&quot;C++作用域运算符&quot;&gt;&lt;/a&gt;C++作用域运算符&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; C++作用域运算符是C++运算符中等级最高的。::运算符的本
    
    </summary>
    
      <category term="C++ 学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="运算符" scheme="http://yoursite.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>类型转换操作符&amp;&amp;C++重载输出流运算符</title>
    <link href="http://yoursite.com/2018/04/17/C++%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/04/17/C++类型转换操作符/</id>
    <published>2018-04-17T08:17:08.000Z</published>
    <updated>2018-04-17T08:20:49.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型转换操作符-amp-amp-C-重载输出流运算符"><a href="#类型转换操作符-amp-amp-C-重载输出流运算符" class="headerlink" title="类型转换操作符&amp;&amp;C++重载输出流运算符"></a>类型转换操作符&amp;&amp;C++重载输出流运算符</h1><blockquote>
<p>在将一种类型转换为另一种类型的时候，直接使用强制类型转换往往不能做到无缝转换，C++提供了类型转换操作符将类转换为特定的类型。</p>
</blockquote>
<h2 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h2><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Test(<span class="keyword">int</span> a, <span class="built_in">std</span>::<span class="built_in">string</span> c):_a(a), _c(c) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">//类型转换操作符:将Test转换为int类型</span></div><div class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> _a;&#125;</div><div class="line"></div><div class="line">  <span class="comment">//Test转换为string类型</span></div><div class="line">  <span class="keyword">operator</span> <span class="built_in">std</span>::<span class="built_in">string</span>() <span class="keyword">const</span> &#123;<span class="keyword">return</span> _c;&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> _a;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">"qwe"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"t="</span> &lt;&lt; t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;               <span class="comment">//t=1</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"t="</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(t) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  <span class="comment">//t=qwe</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从上面可以看出,我们可以通过operator type()来进行类型转换。当同时定义两种类型转换的时候，默认会调用哪一种类型转换呢？<br>这个和C++输出流的实现有关。</p>
<h2 id="C-重载输出流运算符"><a href="#C-重载输出流运算符" class="headerlink" title="C++重载输出流运算符"></a>C++重载输出流运算符</h2><blockquote>
<p>在实际运用中，我们通常有将自定义的一个类中的一些信息打印出来的需求，这个时候可以使用重载输出流运算符来实现。<br>而实现的当时有多种，最常见的是通过<strong>友元和全局函数重载输出流运算符</strong></p>
</blockquote>
<h3 id="流输出运算符"><a href="#流输出运算符" class="headerlink" title="流输出运算符"></a>流输出运算符</h3><p>在C++中类basic_ostream有成员函数operator&lt;&lt;(int)，而没有成员函数operator &lt;&lt; (const std::string)，<br>故上面有限调用同名的成员函数，所以默认输出int，若同时定义了int和float的类型转换，这个时候就需要强制类型转换，否则会出现二义性。</p>
<h3 id="使用友元方式重载流输出运算符"><a href="#使用友元方式重载流输出运算符" class="headerlink" title="使用友元方式重载流输出运算符"></a>使用友元方式重载流输出运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Test&#123;</div><div class="line">public:</div><div class="line">  Test(int a, std::string c):_a(a), _c(c) &#123;&#125;</div><div class="line"></div><div class="line">  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const Test&amp; t) &#123;</div><div class="line">    os &lt;&lt; t._a &lt;&lt; &quot; &quot; &lt;&lt; t._c &lt;&lt; std::endl;</div><div class="line">    return os;</div><div class="line">  &#125;</div><div class="line">private:</div><div class="line">  int _a;</div><div class="line">  std::string _c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  Test t(1, &quot;qwe&quot;);</div><div class="line"></div><div class="line">  std::cout &lt;&lt; t &lt;&lt; std::endl;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用全局重载流输出运算符"><a href="#使用全局重载流输出运算符" class="headerlink" title="使用全局重载流输出运算符"></a>使用全局重载流输出运算符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Test(<span class="keyword">int</span> a, <span class="built_in">std</span>::<span class="built_in">string</span> c):_a(a), _c(c) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">int</span> _a;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> Test&amp; t) &#123;</div><div class="line">	os &lt;&lt; t._a &lt;&lt; <span class="string">" "</span> &lt;&lt; t._c &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> os;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">"qwe"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(t) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类内部重载流输出操作符"><a href="#类内部重载流输出操作符" class="headerlink" title="类内部重载流输出操作符"></a>类内部重载流输出操作符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Test(<span class="keyword">int</span> a, <span class="built_in">std</span>::<span class="built_in">string</span> c):_a(a), _c(c) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt; (<span class="built_in">std</span>::ostream&amp; os) &#123;</div><div class="line">    os &lt;&lt; _a &lt;&lt; <span class="string">" "</span> &lt;&lt; _c &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> os;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">int</span> _a;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">"qwe"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//注意此时为Test的成员函数，所以要通过成员函数的方法来调用</span></div><div class="line">  t.<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么重载+号运算符不需要使用类成员的方式调用，因为+号运算符的做操作数为当前类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类型转换操作符-amp-amp-C-重载输出流运算符&quot;&gt;&lt;a href=&quot;#类型转换操作符-amp-amp-C-重载输出流运算符&quot; class=&quot;headerlink&quot; title=&quot;类型转换操作符&amp;amp;&amp;amp;C++重载输出流运算符&quot;&gt;&lt;/a&gt;类型转换操作
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="类型转换操作符" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="流输出操作符" scheme="http://yoursite.com/tags/%E6%B5%81%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>TCL脚本语言学习</title>
    <link href="http://yoursite.com/2018/02/26/Unix%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E4%B9%8BTCL/"/>
    <id>http://yoursite.com/2018/02/26/Unix脚本语言之TCL/</id>
    <published>2018-02-26T15:52:40.000Z</published>
    <updated>2018-02-26T15:51:43.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCL脚本语言学习"><a href="#TCL脚本语言学习" class="headerlink" title="TCL脚本语言学习"></a>TCL脚本语言学习</h1><p>TCL是一种脚本语言，它几乎可以在<strong>全部平台</strong>上运行,可移植行很强。<br>TCL语言设计的目的是提供程序与其他程序之间进行交互的功能，也是作为一个可嵌入的翻译互相作用的能力。<br>开发简单，上手快。</p>
<h2 id="TCL输入输出"><a href="#TCL输入输出" class="headerlink" title="TCL输入输出"></a>TCL输入输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/tclsh</div><div class="line">#默认输出到标准输出流</div><div class="line">puts hello</div><div class="line">puts stdout hello</div><div class="line">#输出到标准错误流</div><div class="line">puts stderr error</div><div class="line"></div><div class="line">#输入必须指定输入流</div><div class="line">gets stdin varible</div><div class="line">puts $varible</div></pre></td></tr></table></figure>
<h2 id="TCL文件读写操作"><a href="#TCL文件读写操作" class="headerlink" title="TCL文件读写操作"></a>TCL文件读写操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#打开data文件,打开模式有r,w,a,r+,w+,a+</div><div class="line">set fp [open data w]</div><div class="line">puts $fp &quot;hello world&quot;</div><div class="line">close $fp</div><div class="line"></div><div class="line">set fp [open data r]</div><div class="line">gets $fp test</div><div class="line">puts  $test</div><div class="line">close $fp</div></pre></td></tr></table></figure>
<h2 id="TCL数据类型"><a href="#TCL数据类型" class="headerlink" title="TCL数据类型"></a>TCL数据类型</h2><p><strong>TCL变量不需要声明，可以直接使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># TCL对象，对于整数，浮点数，bool,字符串，都是一个对象</div><div class="line">#可直接给其赋值</div><div class="line">set varible 1</div><div class="line">set s &quot;hello world&quot;</div><div class="line"></div><div class="line"># 列表，列表初始化时可以使用双引号或者大括号进行初始化</div><div class="line">set list &#123;hello world hah hah&#125;</div><div class="line">set list &quot;hello world hah hah&quot;</div><div class="line"></div><div class="line">#访问列表元素，使用lindex</div><div class="line">puts [lindex $list 0] #hello</div><div class="line"></div><div class="line">#关联数组，类似map,key可以是数字，也可以是字符串</div><div class="line">set map(a) 10</div><div class="line">puts $map(a)</div></pre></td></tr></table></figure></p>
<h2 id="TCL条件控制语句"><a href="#TCL条件控制语句" class="headerlink" title="TCL条件控制语句"></a>TCL条件控制语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># if语句</div><div class="line">if &#123;expression1&#125; &#123;</div><div class="line">  dosomting</div><div class="line">&#125; elseif &#123;expression2&#125; &#123;</div><div class="line">  dosometing</div><div class="line">&#125; else &#123;</div><div class="line">  dosomething</div><div class="line">&#125;</div><div class="line"></div><div class="line">#for 语句</div><div class="line">for &#123;set a 10&#125; &#123;$a &lt; 20&#125; &#123;incr a&#125; &#123;</div><div class="line">   dosometing</div><div class="line">&#125;</div><div class="line"></div><div class="line">#switch语句</div><div class="line">switch switchingString &#123;</div><div class="line">   matchString1 &#123;</div><div class="line">      body1</div><div class="line">   &#125;</div><div class="line">   matchString2 &#123;</div><div class="line">      body2</div><div class="line">   &#125;</div><div class="line">   matchStringn &#123;</div><div class="line">      bodyn</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">操作符</th>
<th style="text-align:center">关联</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Unary</td>
<td style="text-align:center">+ -</td>
<td style="text-align:center">Right to left</td>
</tr>
<tr>
<td style="text-align:center">Multiplicative</td>
<td style="text-align:center">* / %</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Additive</td>
<td style="text-align:center">+ -</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Shift</td>
<td style="text-align:center">&lt;&lt; &gt;&gt;</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Relational</td>
<td style="text-align:center">&lt; &lt;= &gt; &gt;=</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Equality</td>
<td style="text-align:center">== !=</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Bitwise AND</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Bitwise XOR</td>
<td style="text-align:center">^</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Bitwise OR</td>
<td style="text-align:center">｜</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Logical AND</td>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Logical OR</td>
<td style="text-align:center">｜｜</td>
<td style="text-align:center">Left to right</td>
</tr>
<tr>
<td style="text-align:center">Ternary</td>
<td style="text-align:center">?:</td>
<td style="text-align:center">Right to left</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCL脚本语言学习&quot;&gt;&lt;a href=&quot;#TCL脚本语言学习&quot; class=&quot;headerlink&quot; title=&quot;TCL脚本语言学习&quot;&gt;&lt;/a&gt;TCL脚本语言学习&lt;/h1&gt;&lt;p&gt;TCL是一种脚本语言，它几乎可以在&lt;strong&gt;全部平台&lt;/strong&gt;上运行,
    
    </summary>
    
      <category term="Unix脚本语言" scheme="http://yoursite.com/categories/Unix%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="tcl" scheme="http://yoursite.com/tags/tcl/"/>
    
      <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="语言" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80/"/>
    
      <category term="expect" scheme="http://yoursite.com/tags/expect/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络函数与TCP状态转变之间的关系</title>
    <link href="http://yoursite.com/2018/02/04/Unix%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E4%B8%8ETCP%E7%8A%B6%E6%80%81%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB%E5%AF%B9%E5%BA%94/"/>
    <id>http://yoursite.com/2018/02/04/Unix网络相关函数与TCP状态之间的转换关系对应/</id>
    <published>2018-02-04T13:52:40.000Z</published>
    <updated>2018-02-04T14:15:40.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络函数与TCP状态转变之间的关系"><a href="#Unix网络函数与TCP状态转变之间的关系" class="headerlink" title="Unix网络函数与TCP状态转变之间的关系"></a>Unix网络函数与TCP状态转变之间的关系</h1><h2 id="connect函数导致状态转变"><a href="#connect函数导致状态转变" class="headerlink" title="connect函数导致状态转变"></a>connect函数导致状态转变</h2><h3 id="client状态变化："><a href="#client状态变化：" class="headerlink" title="client状态变化："></a>client状态变化：</h3><p>connect函数导致当前<strong>client套接字从CLOSED(初始状态)转移到SYN_SENT状态，若成功则再转移到ESTIBLISHED状态，若失败，则回到CLOSED状态</strong>。</p>
<h3 id="server-TCP状态变化："><a href="#server-TCP状态变化：" class="headerlink" title="server TCP状态变化："></a>server TCP状态变化：</h3><p>当client发送SYN分节，server接收成功并返回SYN分节之后，<strong>server套接字将从LISTEN状态转移到SYN_RCVD状态，</strong>server发送SYN分节之后，client返回ACK到server，<strong>Server套接字状态从SYN_RCVD状态转变为ESTIBLISHED状态。</strong></p>
<blockquote>
<p> 注意：<strong>若connect失败，必须调用close函数将当前socket关闭，不可再次调用connect函数。若需重试，则关闭后重新创建socket进行connect操作</strong></p>
</blockquote>
<h3 id="listen函数导致状态转变"><a href="#listen函数导致状态转变" class="headerlink" title="listen函数导致状态转变"></a>listen函数导致状态转变</h3><p>listen函数把一个未连接的套接字转换成一个被动套接字，调用listen导致套接字<strong>从CLOSED状态转变为LISTENED状态</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络函数与TCP状态转变之间的关系&quot;&gt;&lt;a href=&quot;#Unix网络函数与TCP状态转变之间的关系&quot; class=&quot;headerlink&quot; title=&quot;Unix网络函数与TCP状态转变之间的关系&quot;&gt;&lt;/a&gt;Unix网络函数与TCP状态转变之间的关系&lt;/
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="connect" scheme="http://yoursite.com/tags/connect/"/>
    
      <category term="listen" scheme="http://yoursite.com/tags/listen/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程相关错误码和信号处理</title>
    <link href="http://yoursite.com/2018/02/04/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%94%99%E8%AF%AF%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/04/Unix网络编程相关错误码总结/</id>
    <published>2018-02-04T13:52:40.000Z</published>
    <updated>2018-02-04T14:13:14.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程相关错误码和信号处理"><a href="#Unix网络编程相关错误码和信号处理" class="headerlink" title="Unix网络编程相关错误码和信号处理"></a>Unix网络编程相关错误码和信号处理</h1><p><strong>特别注意当出现一下错误码时，处理之后一定要将errno复位为0</strong></p>
<p>在网络编程的过程中会出现一些错误码，下面总结:</p>
<ul>
<li><p>EAGAIN(11) : Resource temporarily unavailable</p>
<ul>
<li>错误原因：当将套接字设置为<strong>异步</strong>时，由于函数调用之后是立即返回的，所以会出现两种情况导致这个错误：（1）：当调用read函数，此时没有数据可读，此时read函数会立即返回错误码EAGAIN表示此时无数据可读（2）：当调用write函数，此时缓冲区满，write函数将会立即返回错误码EAGAIN。</li>
<li>解决方法：EAGAIN错误表示此时无数据可读或者缓冲区已满，所以此时只需要重试即可。</li>
</ul>
</li>
<li><p>ECONNRESET(104)：Connection reset by peer</p>
<ul>
<li>错误原因：当对端socket已关闭，此时调用read或write函数将返回ECONNRESET错误，在之后如果继续调用read或write，就会得到该错误。常见的原因是<strong>发送端接收端实现约定好的数据长度不一致，若接收端被通知需要接收99个字节,而服务端发送了100个字节给接收端,这样一来，接收端接收99个字节就执行了close操作，如果发送端继续发送,接收端将向发送端返回一个RESET信号</strong></li>
</ul>
</li>
<li><p>EALREADY (114)：Operation already in progress</p>
<ul>
<li>错误原因：套接字为非阻塞套接字，并且原来的链接请求还未完成</li>
</ul>
</li>
<li><p>EINPROGRESS(115)：Operation in progress</p>
<ul>
<li>错误原因：套接字为非阻塞套接字，连接正在建立</li>
</ul>
</li>
</ul>
<h2 id="网络编程相关信号"><a href="#网络编程相关信号" class="headerlink" title="网络编程相关信号"></a>网络编程相关信号</h2><ul>
<li>SIGPIPE(13):管道破裂。管道另一端没有进程接收数据，导致管道破裂而崩溃。对一个对端已经关闭的socket进行两次write，第二次调用将会产生该信号，此信号的<strong>默认行为是结束进程</strong>。<ul>
<li>解决方法：将该信号的处理函数设置为SIG_IGN，即忽略此信号</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程相关错误码和信号处理&quot;&gt;&lt;a href=&quot;#Unix网络编程相关错误码和信号处理&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程相关错误码和信号处理&quot;&gt;&lt;/a&gt;Unix网络编程相关错误码和信号处理&lt;/h1&gt;&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="EAGAIN" scheme="http://yoursite.com/tags/EAGAIN/"/>
    
      <category term="ECONNRESET" scheme="http://yoursite.com/tags/ECONNRESET/"/>
    
      <category term="EALREADY" scheme="http://yoursite.com/tags/EALREADY/"/>
    
      <category term="EINPROGRESS" scheme="http://yoursite.com/tags/EINPROGRESS/"/>
    
      <category term="SIGPIPE" scheme="http://yoursite.com/tags/SIGPIPE/"/>
    
  </entry>
  
  <entry>
    <title>netstat命令使用详解</title>
    <link href="http://yoursite.com/2018/02/01/Linux%20netstat%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/02/01/Linux netstat命令详解/</id>
    <published>2018-02-01T12:05:01.000Z</published>
    <updated>2018-02-04T09:23:09.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netstat命令使用详解"><a href="#netstat命令使用详解" class="headerlink" title="netstat命令使用详解"></a>netstat命令使用详解</h1><p>netstat命令用于显示各种网络信息，如当前机器的网络连接状态，路由表，接口状态等等。</p>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>执行netstat命令，其结果主要包括两个部分。</p>
<ul>
<li>Active Internet connections (servers and established),称为有源TCP链接，包括TCP和UDP等的详细状态</li>
<li>Active UNIX domain sockets (servers and established)。称为有源Unix域套接口。</li>
</ul>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$netstat</span> -a</div><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address Foreign Address State</div><div class="line">tcp <span class="number">0</span> <span class="number">2</span> xx.xx.xx.xx:telnet ss.ss.ss.ss:port ESTABLISHED</div><div class="line">...</div><div class="line"></div><div class="line">Active UNIX domain sockets (servers and established)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  <span class="number">2</span>      [ ACC ]     STREAM     LISTENING     <span class="number">6474</span>   /var/run/test.socket</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="有源TCP链接字段详解："><a href="#有源TCP链接字段详解：" class="headerlink" title="有源TCP链接字段详解："></a>有源TCP链接字段详解：</h4><ul>
<li>Proto : 当前链接的协议。如TCP，UDP</li>
<li>Recv-Q : 网络接收队列</li>
<li>Send-Q : 网络发送队列</li>
<li>Local Address : 本机的ip:端口（注意此处127.0.0.1默认显示主机名，0.0.0.0默认显示*，端口可能显示别名。若强制显示数字,加-n参数）</li>
<li>Foreign Address:对端IP：端口。与local address规则相同</li>
<li>State : 当前套接字的网络状态。</li>
</ul>
<h4 id="有源Unix域套接口字段详解"><a href="#有源Unix域套接口字段详解" class="headerlink" title="有源Unix域套接口字段详解"></a>有源Unix域套接口字段详解</h4><ul>
<li>proto : 当前链接的协议，一般为Unix</li>
<li>RefCnt : 连接段本端口上的进程号</li>
<li>Type:套接字的类型，stream或 DGRAM</li>
<li>state : 当前套接字的状态</li>
<li>I-Node : 当前socket对应的inode号</li>
<li>Path : 连接到套接口的其它进程使用的路径名。</li>
</ul>
<h2 id="netstat常用参数"><a href="#netstat常用参数" class="headerlink" title="netstat常用参数"></a>netstat常用参数</h2><ul>
<li>-a : 显示所有选项</li>
<li>-t : 显示所有与TCP相关的选项</li>
<li>-u : 显示所有与UDP相关的选项</li>
<li>-x : 显示所有与Unix域相关的套接字选项</li>
<li>-n : <strong>拒绝显示别名</strong>，能显示数字的全部转换为数字显示</li>
<li>-p : 显示<strong>建立相关连接的程序名。</strong></li>
<li>-l : 显示所有状态为Listen的连接</li>
<li>-e : 显示扩展信息,<strong>如当前链接所对应的用户</strong></li>
<li>-c : 间隔一段时间执行一次netstat命令。</li>
<li>-s : 显示统计信息。对每种类型进行汇总</li>
</ul>
<h2 id="netstat常用组合"><a href="#netstat常用组合" class="headerlink" title="netstat常用组合"></a>netstat常用组合</h2><ul>
<li>netstat -anp : 显示所有的网络连接，并拒绝显示别名，同时打印该连接对应的程序名</li>
<li>netstat -lt : 显示所有正在监听状态的tcp连接</li>
<li>netstat -lu : 显示所有正在监听状态的udp连接</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;netstat命令使用详解&quot;&gt;&lt;a href=&quot;#netstat命令使用详解&quot; class=&quot;headerlink&quot; title=&quot;netstat命令使用详解&quot;&gt;&lt;/a&gt;netstat命令使用详解&lt;/h1&gt;&lt;p&gt;netstat命令用于显示各种网络信息，如当前机器的
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="netstat" scheme="http://yoursite.com/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>Unix信号之sigaction函数</title>
    <link href="http://yoursite.com/2018/01/28/Unix%E4%BF%A1%E5%8F%B7%E4%B9%8Bsigaction%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/28/Unix信号之sigaction函数/</id>
    <published>2018-01-28T07:20:00.000Z</published>
    <updated>2018-01-28T11:35:48.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix信号之sigaction函数"><a href="#Unix信号之sigaction函数" class="headerlink" title="Unix信号之sigaction函数"></a>Unix信号之sigaction函数</h1><p>sigaction函数是除signal函数之外的另一个可以设置信号处理的函数。sigaction用法比signal函数复杂，但是可以对信号处理进行更加精准更灵活的控制。<strong>sigaction是POSIX的信号接口,而signal函数是标准C的信号接口，所以sigaction函数的可移植性更强。</strong></p>
<h2 id="sigaction函数说明"><a href="#sigaction函数说明" class="headerlink" title="sigaction函数说明"></a>sigaction函数说明</h2><h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>检查或修改与指定信号相关联的处理动作，可以同时检查和修改。</p>
<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span>&#123;</span></div><div class="line">  <span class="keyword">void</span> (*sa_handler)(<span class="keyword">int</span>);		<span class="comment">//信号处理函数地址</span></div><div class="line">  <span class="keyword">sigset_t</span> sa_mask;				<span class="comment">//信号掩码集，当调用信号处理函数时，程序将阻塞sa_mask中的信号</span></div><div class="line">  <span class="keyword">int</span> sa_flag;					<span class="comment">//位掩码，指定用于控制信号处理过程中的各种选项。</span></div><div class="line">  <span class="keyword">void</span> (*sa_sigaction)(<span class="keyword">int</span>,<span class="keyword">siginfo_t</span>*,<span class="keyword">void</span>*);	<span class="comment">//暂不用</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signo,<span class="keyword">const</span> struct sigaction*<span class="keyword">restrict</span> act,struct sigaction*<span class="keyword">restrict</span> oact)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li><p>signo : 指定操作的信号</p>
</li>
<li><p>act : 新修改的sigaction</p>
</li>
<li><p>oldact : 保存该函数原有的sigaction。</p>
<p>​</p>
</li>
</ul>
<p>上述struct sigaction中sa_flag取值说明(常用的有以下两个)：</p>
<ul>
<li>SA_NODEFER:当信号处理函数正在进行时，不堵塞对于信号处理函数自身信号功能。</li>
<li>SA_RESETHAND：当用户注册的信号处理函数被执行过一次后，该信号的处理函数被设为系统默认的处理函数</li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>0 : 返回0表示设置成功</li>
<li>-1 ： 返回-1表示设置失败</li>
</ul>
<h2 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sighandler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"this is in the sig handler\n"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"num:%d\n"</span>, i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">oldact</span>;</span></div><div class="line"></div><div class="line">	act.sa_handler = sighandler;</div><div class="line">	act.sa_flags = SA_NODEFER ;<span class="comment">//| SA_RESETHAND;</span></div><div class="line"></div><div class="line">	sigaction(SIGINT , &amp;act,&amp;oldact);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span> (<span class="string">"this is the main function\n"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">pid_t</span> pid = getpid();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, pid);</div><div class="line">	kill(pid, SIGINT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix信号之sigaction函数&quot;&gt;&lt;a href=&quot;#Unix信号之sigaction函数&quot; class=&quot;headerlink&quot; title=&quot;Unix信号之sigaction函数&quot;&gt;&lt;/a&gt;Unix信号之sigaction函数&lt;/h1&gt;&lt;p&gt;sigact
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="信号" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7/"/>
    
      <category term="sigaction" scheme="http://yoursite.com/tags/sigaction/"/>
    
  </entry>
  
  <entry>
    <title>判断主机字节序大端规则或小端规则方法</title>
    <link href="http://yoursite.com/2018/01/26/C%E8%AF%AD%E8%A8%80%E5%88%A4%E6%96%AD%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F%E5%A4%A7%E7%AB%AF%E8%A7%84%E5%88%99%E6%88%96%E5%B0%8F%E7%AB%AF%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/26/C语言判断主机字节序大端规则或小端规则方法/</id>
    <published>2018-01-26T10:30:00.000Z</published>
    <updated>2018-01-28T11:26:44.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断主机字节序大端规则或小端规则方法"><a href="#判断主机字节序大端规则或小端规则方法" class="headerlink" title="判断主机字节序大端规则或小端规则方法"></a>判断主机字节序大端规则或小端规则方法</h1><h2 id="大端规则与小端规则"><a href="#大端规则与小端规则" class="headerlink" title="大端规则与小端规则"></a>大端规则与小端规则</h2><p>在计算机存储中存储字节的顺序有两种分别为大端规则和小端规则。</p>
<ul>
<li>小端规则(littel endian)：低序字节存储到内存较低的位置，即起始位置。</li>
<li>大端规则(big endian)：低序字节存储到内存较高的位置，即高序字节存储到起始位置。</li>
</ul>
<p>有一个32位数字为:0x01020304</p>
<p>在<strong>小端规则</strong>的机器上，其存储如下：</p>
<table>
<thead>
<tr>
<th>低地址</th>
<th>-&gt;</th>
<th>-&gt;</th>
<th>高地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x04</td>
<td>0x03</td>
<td>0x02</td>
<td>0x01</td>
</tr>
</tbody>
</table>
<p>在<strong>大端规则机器上</strong>，其存储如下：</p>
<table>
<thead>
<tr>
<th>低地址</th>
<th>-&gt;</th>
<th>-&gt;</th>
<th>高地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x01</td>
<td>0x02</td>
<td>0x03</td>
<td>0x04</td>
</tr>
</tbody>
</table>
<h2 id="判断当前机器字节序的方法"><a href="#判断当前机器字节序的方法" class="headerlink" title="判断当前机器字节序的方法"></a>判断当前机器字节序的方法</h2><p>判断当前机器为大端规则还是小端规则，其本质是<strong>对于一个变量，判断其各字节的存储顺序</strong>，</p>
<h3 id="方法一：使用union判断"><a href="#方法一：使用union判断" class="headerlink" title="方法一：使用union判断"></a>方法一：使用union判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">union</span> &#123;</div><div class="line">		<span class="keyword">short</span> a;</div><div class="line">		<span class="keyword">char</span> c[<span class="number">2</span>];</div><div class="line">	&#125; u;</div><div class="line"></div><div class="line">	u.a = <span class="number">0x0102</span>;</div><div class="line">	<span class="keyword">if</span> (u.c[<span class="number">0</span>] == <span class="number">2</span> &amp;&amp; u.c[<span class="number">1</span>] == <span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"little"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.c[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; u.c[<span class="number">1</span>] == <span class="number">2</span>) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"big"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"unkown"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法二：直接将字节取出-判断顺序"><a href="#方法二：直接将字节取出-判断顺序" class="headerlink" title="方法二：直接将字节取出,判断顺序"></a>方法二：直接将字节取出,判断顺序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">short</span> s = <span class="number">0x0102</span>;</div><div class="line">	<span class="keyword">char</span>* a = (<span class="keyword">char</span>*)(&amp;s);</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*a) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> b = <span class="number">0x02</span>, c = <span class="number">0x01</span>;</div><div class="line">	<span class="keyword">if</span> (((*a) | b) == b) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"little"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (((*a) | c) == b) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"big"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">      	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"unknow"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断主机字节序大端规则或小端规则方法&quot;&gt;&lt;a href=&quot;#判断主机字节序大端规则或小端规则方法&quot; class=&quot;headerlink&quot; title=&quot;判断主机字节序大端规则或小端规则方法&quot;&gt;&lt;/a&gt;判断主机字节序大端规则或小端规则方法&lt;/h1&gt;&lt;h2 id=&quot;大
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="主机字节序" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    
      <category term="大端规则" scheme="http://yoursite.com/tags/%E5%A4%A7%E7%AB%AF%E8%A7%84%E5%88%99/"/>
    
      <category term="小端规则" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%AB%AF%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>C语言pack与aligned的区别</title>
    <link href="http://yoursite.com/2018/01/26/C%E8%AF%AD%E8%A8%80pack%E4%B8%8Ealigned%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/01/26/C语言pack与aligned的区别/</id>
    <published>2018-01-26T09:30:08.000Z</published>
    <updated>2018-01-28T11:22:36.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pack与aligned的区别"><a href="#pack与aligned的区别" class="headerlink" title="pack与aligned的区别"></a>pack与aligned的区别</h1><p>GCC支持用__attribute__为变量、类型、函数以及标签指定特殊属性。其中可以使用attribute的aligned属性控制变量或类型的内存对其规则，之前一篇文章已经提到pack可以改变结构体中各成员之间的内存对其规则。<a href="https://langzi989.github.io/2017/10/02/C语言内存对其相关/" target="_blank" rel="external">https://langzi989.github.io/2017/10/02/C语言内存对其相关/</a></p>
<p>其中#pragma pack()和__attribute__((aligned))区别很大。</p>
<h2 id="aligned内存对其详解"><a href="#aligned内存对其详解" class="headerlink" title="aligned内存对其详解"></a>aligned内存对其详解</h2><p>使用场景:</p>
<ul>
<li>变量</li>
<li>类型</li>
</ul>
<p>功能说明：</p>
<ul>
<li>当aligned作用于变量时，其作用是告诉编译器为变量分配内存的时候，要分配在指定对其的内存上.作用于变量之上不会改变变量的大小。<ul>
<li>例如：int a __attribute__((aligned(16)));该变量a的内存起始地址为16的倍数。</li>
</ul>
</li>
<li>当aligned作用于类型时，其作用是告诉编译器该类型声明的所有变量都要分配在指定对齐的内存上。当该属性作用于结构体声明时可能会改变结构体的大小。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>&#123;</span></div><div class="line">  <span class="keyword">char</span> a[<span class="number">3</span>];</div><div class="line">&#125;__attribute__((aligned(<span class="number">8</span>)));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//8</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Test);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，当align作用于结构体定义时会改变结构体的大小。结构体最终大小为aligned指定大小的整数倍。</p>
<h2 id="aligned与pack的区别"><a href="#aligned与pack的区别" class="headerlink" title="aligned与pack的区别"></a>aligned与pack的区别</h2><p>从上面可以看出，aligned和pack的主要区别如下:</p>
<ul>
<li>pack作用于结构体或类的定义，而aligned既可以作用于结构体或类的定义，也可以作用于变量的声明。</li>
<li>pack的作用是改变结构体或类中成员变量的布局规则，而aligned只是建议编译器对指定变量或指定类型的变量分配内存时的规则。</li>
<li>pack可以压缩变量所占内存的空间</li>
<li>align可以指定变量在内存的对其规则，而pack不可以。</li>
<li>若某一个结构体的默认pack为n，pack指定的对齐规则m大于n，则该pack忽略。若aligned指定的对齐规则s大于n,则此时结构体的大小一定为s的整数倍。</li>
<li>aligned和pack指定规则时都必须为2的n次幂。</li>
</ul>
<p>参考链接：<a href="http://blog.shengbin.me/posts/gcc-attribute-aligned-and-packed" target="_blank" rel="external">http://blog.shengbin.me/posts/gcc-attribute-aligned-and-packed</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pack与aligned的区别&quot;&gt;&lt;a href=&quot;#pack与aligned的区别&quot; class=&quot;headerlink&quot; title=&quot;pack与aligned的区别&quot;&gt;&lt;/a&gt;pack与aligned的区别&lt;/h1&gt;&lt;p&gt;GCC支持用__attribute_
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="内存对齐" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    
      <category term="pack" scheme="http://yoursite.com/tags/pack/"/>
    
      <category term="aligned" scheme="http://yoursite.com/tags/aligned/"/>
    
  </entry>
  
  <entry>
    <title>Unix中fcntl实现对文件加锁功能</title>
    <link href="http://yoursite.com/2018/01/06/Unix%E4%B8%ADfcntl%E5%AE%9E%E7%8E%B0%E5%AF%B9%E6%96%87%E4%BB%B6%E5%8A%A0%E9%94%81%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/01/06/Unix中fcntl实现对文件加锁功能/</id>
    <published>2018-01-06T12:31:31.000Z</published>
    <updated>2018-01-06T12:35:00.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fcntl实现对文件加锁功能"><a href="#fcntl实现对文件加锁功能" class="headerlink" title="fcntl实现对文件加锁功能"></a>fcntl实现对文件加锁功能</h1><blockquote>
<p>之前有一篇文章详细介绍了<a href="https://langzi989.github.io/2017/05/01/Unix%E6%96%87%E4%BB%B6IO%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8Afcntl%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">fcntl的用法</a>,这一节将说明使用fcntl实现对文件加锁的功能，</p>
</blockquote>
<h2 id="fcntl函数原型"><a href="#fcntl函数原型" class="headerlink" title="fcntl函数原型"></a>fcntl函数原型</h2><p>fcntl函数如下，具体用法可参考上面的文章。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, ...<span class="comment">/*int args or lock args*/</span>)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="使用fcntl对文件加锁"><a href="#使用fcntl对文件加锁" class="headerlink" title="使用fcntl对文件加锁"></a>使用fcntl对文件加锁</h2><p>当fcntl中的cmd为F_GETLK,F_SETLK,F_SELFKW时为对文件进行锁操作，此时arg参数为flock。注意：<strong>使用fcntl对文件加锁，加锁效果类似于自旋锁，只有写写互斥和读写互斥，读读并不互斥。</strong></p>
<p><strong>cmd取值及其操作</strong>：</p>
<ul>
<li>F_GETLK : 获取当前锁得状态</li>
<li>F_SETLK : 给当前文件上锁（非阻塞）。</li>
<li>F_SETLKW : 给当前文件上锁（阻塞，若当前文件正在被锁住，该函数一直阻塞）。</li>
</ul>
<p>flock结构体定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flock</span> &#123;</span></div><div class="line">  <span class="keyword">short</span> <span class="keyword">int</span> l_type;</div><div class="line">  <span class="keyword">short</span> <span class="keyword">int</span> l_whence;</div><div class="line">  <span class="keyword">off_t</span> l_start;</div><div class="line">  <span class="keyword">off_t</span> l_len;</div><div class="line"></div><div class="line">  <span class="keyword">pid_t</span> l_pid;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下面对flock中的参数一一解释：</p>
<ul>
<li>l_type:此参数表示所得类型。其可能的取值包括一下三个:<ul>
<li>F_RDLCK : 读锁</li>
<li>F_WRLCK : 写锁</li>
<li>F_UNLCK : 无锁状态</li>
</ul>
</li>
<li>l_start : 此参数锁区域的开始位置的偏移量</li>
<li>l_whence:此参数决定锁开始的位置。其可选参数为:<ul>
<li>SEEK_SET:当前位置为文件的开头</li>
<li>SEEK_CUR:当前位置为文件指针的位置</li>
<li>SEEK_END:当前位置为文件末尾</li>
</ul>
</li>
<li>l_len : 锁定文件的长度</li>
</ul>
<p><strong>若要锁定整个文件，通常的方法为将l_start设为０，l_whence设为SEEK_SET,l_len设为０．</strong></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock_set</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">flock</span> <span class="title">lock</span>;</span></div><div class="line">	lock.l_whence = SEEK_SET;</div><div class="line">	lock.l_start = <span class="number">0</span>;</div><div class="line">	lock.l_len = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">		lock.l_type = type;</div><div class="line">		<span class="keyword">if</span> ((fcntl(fd, F_SETLK, &amp;lock)) == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (lock.l_type == F_RDLCK)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"read lock set by %d\n"</span>, getpid());</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(lock.l_type == F_WRLCK)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"write lock set by %d\n"</span>, getpid());</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (lock.l_type == F_UNLCK)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"release lock by %d\n"</span>, getpid());</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//检查文件是否可以上锁</span></div><div class="line">		fcntl(fd, F_GETLK, &amp;lock);</div><div class="line"></div><div class="line">		<span class="comment">//判断不能上锁的原因</span></div><div class="line">		<span class="keyword">if</span> (lock.l_type != F_UNLCK) &#123;</div><div class="line">			<span class="keyword">if</span> (lock.l_type == F_RDLCK)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"read lock has been already set by %d\n"</span>, getpid());</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (lock.l_type == F_WRLCK)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"write lock has been already set by %d\n"</span>, getpid());</div><div class="line">			getchar();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> fd;</div><div class="line">	fd = open(<span class="string">"data"</span>, O_RDWR | O_CREAT, <span class="number">0666</span>);</div><div class="line">	<span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</div><div class="line">		perror(<span class="string">"open failed"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lock_set(fd, F_WRLCK);</div><div class="line">	getchar();</div><div class="line">	lock_set(fd, F_UNLCK);</div><div class="line">	getchar();</div><div class="line">	close(fd);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fcntl实现对文件加锁功能&quot;&gt;&lt;a href=&quot;#fcntl实现对文件加锁功能&quot; class=&quot;headerlink&quot; title=&quot;fcntl实现对文件加锁功能&quot;&gt;&lt;/a&gt;fcntl实现对文件加锁功能&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前有一篇文章详细
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="fcntl" scheme="http://yoursite.com/tags/fcntl/"/>
    
      <category term="读写锁" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案</title>
    <link href="http://yoursite.com/2018/01/01/C%E4%B8%AD%E8%AE%B0%E5%BD%95%E5%9F%BA%E7%A1%80%E5%BA%93%E4%BB%8E32%E4%BD%8D%E5%88%B064%E4%BD%8D%E6%9C%BA%E5%99%A8%E7%A7%BB%E6%A4%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/01/C中记录基础库从32位到64位机器移植导致的一些问题/</id>
    <published>2018-01-01T09:51:00.000Z</published>
    <updated>2018-01-01T10:51:22.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案"><a href="#记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案" class="headerlink" title="记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案"></a>记录C/C++库从32位机器向64为机器移植过程中导致的问题和解决方案</h1><p>最近程序库从32为向64为机器移植后，在使用过程中出现了一些问题，其中包括上一篇中记录的由于va_list类型不一致导致程序core dump或者出现异常行为的原因，这篇文章记录一下库移植之后出现的小问题。持续更新…</p>
<h2 id="问题一-unsigned-long-int类型长度不兼容并对其按位操作"><a href="#问题一-unsigned-long-int类型长度不兼容并对其按位操作" class="headerlink" title="问题一: unsigned long int类型长度不兼容并对其按位操作"></a>问题一: unsigned long int类型长度不兼容并对其按位操作</h2><p>一般情况下在32位和64位机器单纯使用该类型在不出现数字大小溢出的情况下一般不会出现问题。但是有一种情况需要特别注意，即<strong>当对该unsigned long int进行位操作时，此时的操作结果在32和64位机器的操作结果会不同而导致其他问题。</strong></p>
<p>例如<strong>使用unsigned long int类型作为key对其按位进行加密或哈希</strong>时，这时的加密或哈希结果会出现问题。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>将unsigned long int类型换为uint32_t在64位机器上重新编译</p>
<h2 id="问题二：-32位和64位默认对齐不同导致数据类型大小不同"><a href="#问题二：-32位和64位默认对齐不同导致数据类型大小不同" class="headerlink" title="问题二： 32位和64位默认对齐不同导致数据类型大小不同"></a>问题二： 32位和64位默认对齐不同导致数据类型大小不同</h2><p>在linux系统下，32位机器数据默认以4字节对齐，64为机器默认以8字节对齐。</p>
<p>看如下结构构体:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">char</span>* data[<span class="number">0</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Test) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  Test t;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;t:"</span> &lt;&lt; &amp;t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.a"</span> &lt;&lt; &amp;t.a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.data:"</span> &lt;&lt; &amp;t.data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>32位机器运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8</div><div class="line">&amp;t:0x7ffd49f978b0</div><div class="line">&amp;t.a0x7ffd49f978b0</div><div class="line">&amp;t.data:0x7ffd49f978b4</div></pre></td></tr></table></figure></p>
<p>64位机器运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8</div><div class="line">&amp;t:0x7ffd49f978b0</div><div class="line">&amp;t.a0x7ffd49f978b0</div><div class="line">&amp;t.data:0x7ffd49f978b8</div></pre></td></tr></table></figure></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h4><p>在声明结构体前面加上#pragma pack(1)或#pragma pack(4)，强制改变结构体的对齐方式。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">char</span>* data[<span class="number">0</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Test) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  Test t;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;t:"</span> &lt;&lt; &amp;t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.a"</span> &lt;&lt; &amp;t.a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"&amp;t.data:"</span> &lt;&lt; &amp;t.data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案&quot;&gt;&lt;a href=&quot;#记录C-C-库从32位机器向64为机器移植过程中导致的问题和解决方案&quot; class=&quot;headerlink&quot; title=&quot;记录C/C++库从32位机器向64为机器移植过程
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="snprintf" scheme="http://yoursite.com/tags/snprintf/"/>
    
      <category term="vsnprintf" scheme="http://yoursite.com/tags/vsnprintf/"/>
    
      <category term="可变参数" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C中va_list在32位和64位机器的区别与差异</title>
    <link href="http://yoursite.com/2018/01/01/C%E4%B8%ADva_list%E7%B1%BB%E5%9E%8B%E5%9C%A832%E4%BD%8D%E5%92%8C64%E4%BD%8D%E6%9C%BA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/01/C中va_list类型在32位和64位机器的区别与使用/</id>
    <published>2018-01-01T07:00:00.000Z</published>
    <updated>2018-01-01T09:49:42.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中va-list在32位和64位机器的区别与差异"><a href="#C中va-list在32位和64位机器的区别与差异" class="headerlink" title="C中va_list在32位和64位机器的区别与差异"></a>C中va_list在32位和64位机器的区别与差异</h1><p>在将程序从32位机器移植到64位机器的过程中经常出现一些奇奇怪怪的错误,这里记录一下在使用可变参数的过程中导致在32位机器上正常运行的程序移植到64位机器上之后出现段错误的发现过程以及解决方案。</p>
<p>首先看下面一段代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(va_list ap)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span>* arg;</div><div class="line">  arg = va_arg(ap, <span class="keyword">char</span>*);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">strlen</span>(arg) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span> </span>&#123;</div><div class="line">  va_list ap;</div><div class="line">  va_start(ap, format);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">    parse(ap);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  va_end(ap);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  test(<span class="string">"hget %s %s"</span>, <span class="string">"abc"</span>, <span class="string">"123456"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<strong>32位机器的运行结果</strong>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">abc</div><div class="line">3</div><div class="line">abc</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>在<strong>64位机器运行结果</strong>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">abc</div><div class="line">3</div><div class="line">123456</div><div class="line">6</div></pre></td></tr></table></figure></p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>出现上述结果的原因是由于va_list类型在32位和64位机器的类型不同导致的.</p>
<h4 id="32位va-list"><a href="#32位va-list" class="headerlink" title="32位va_list"></a>32位va_list</h4><p>在32位上,va_list的定义为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意，由于中间宏过多，这里省去了中间如_VA_LIST宏，直接给出实际定义。</span></div><div class="line"><span class="keyword">typedef</span> va_list <span class="keyword">char</span>**;</div></pre></td></tr></table></figure>
<h4 id="64位va-list"><a href="#64位va-list" class="headerlink" title="64位va_list"></a>64位va_list</h4><p>在64位上va_list定义为一个结构体数组，并且数组中记录了可变参数被读的偏移量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Figure 3.34</div><div class="line">typedef struct &#123;</div><div class="line">   unsigned int gp_offset;</div><div class="line">   unsigned int fp_offset;</div><div class="line">   void *overflow_arg_area;</div><div class="line">   void *reg_save_area;</div><div class="line">&#125; va_list[1];</div></pre></td></tr></table></figure>
<h4 id="程序异常分析"><a href="#程序异常分析" class="headerlink" title="程序异常分析"></a>程序异常分析</h4><p>当在32位机器上将va_list(char**)作为参数传递给函数的时候，该函数将从头开始读取该变长参数，还是使用va_list完毕并<strong>不记录当前va_list被读的偏移量</strong>，所以当第二次传入该va_list还是从头开始读取。</p>
<p>当在64为机器上将va_list(struct 数组)作为参数传递给函数的时候，该函数读取va_list完毕之后，将读取的偏移量记录在结构体中，由于其为数组传入函数，所以该<strong>被调用的函数改变了传入的va_list的偏移量</strong>。导致下次调用该函数从记录的偏移量开始读,造成不可预测或者内存越界等问题。</p>
<h2 id="移植解决方案"><a href="#移植解决方案" class="headerlink" title="移植解决方案"></a>移植解决方案</h2><p>将va_list初始化写到for循环内部，每次调用函数前都初始化va_list即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(va_list ap)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span>* arg;</div><div class="line">  arg = va_arg(ap, <span class="keyword">char</span>*);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">strlen</span>(arg) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">    va_list ap;</div><div class="line">    va_start(ap, format);</div><div class="line">    parse(ap);</div><div class="line">    va_end(ap);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  test(<span class="string">"hget %s %s"</span>, <span class="string">"abc"</span>, <span class="string">"123456"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考:<br><a href="https://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure" target="_blank" rel="external">https://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure</a><br><a href="http://blog.csdn.net/doubleface999/article/details/55798710" target="_blank" rel="external">http://blog.csdn.net/doubleface999/article/details/55798710</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C中va-list在32位和64位机器的区别与差异&quot;&gt;&lt;a href=&quot;#C中va-list在32位和64位机器的区别与差异&quot; class=&quot;headerlink&quot; title=&quot;C中va_list在32位和64位机器的区别与差异&quot;&gt;&lt;/a&gt;C中va_list在3
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="snprintf" scheme="http://yoursite.com/tags/snprintf/"/>
    
      <category term="vsnprintf" scheme="http://yoursite.com/tags/vsnprintf/"/>
    
      <category term="可变参数" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
</feed>
