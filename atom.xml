<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-09T08:17:37.544Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(2824759538@qq.com)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix中select,poll,epoll详解</title>
    <link href="http://yoursite.com/2017/10/08/Unix%E4%B8%ADSelectPollEpoll%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/08/Unix中SelectPollEpoll详解/</id>
    <published>2017-10-08T09:01:00.000Z</published>
    <updated>2017-10-09T08:17:37.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix中select-poll-epoll详解"><a href="#Unix中select-poll-epoll详解" class="headerlink" title="Unix中select,poll,epoll详解"></a>Unix中select,poll,epoll详解</h1><p>网络应用需要处理的问题无非两类,网络I/O和数据计算问题。<br>在处理计算密集型任务的时候,期间会有一些网络IO操作(如写数据库的操作，非本机)，此时若使用同步IO,则会造成大量的IO等待，造成CPU使用率较低。所以此时考虑其他IO模型如异步模型。</p>
<p>Unix下网络I/O模型包括五类:</p>
<ul>
<li>阻塞式IO</li>
<li>非阻塞式IO</li>
<li>多路复用IO</li>
<li>信号驱动IO(边缘触发)</li>
<li>异步IO</li>
</ul>
<p>其中多路复用I/O机制是通过select,poll以及epoll进行监视。这里暂时只介绍多路复用IO,若想了解其他IO模型,参考《Unix网络编程》第六章</p>
<h2 id="多路复用I-O模型"><a href="#多路复用I-O模型" class="headerlink" title="多路复用I/O模型"></a>多路复用I/O模型</h2><p>网络I/O的本质是socket的读取,socket在linux系统中被抽象为流,所以I/O操作可以理解为对流的操作。这个操作包括两个阶段:</p>
<ul>
<li>等待流数据准备就绪(wait for data be ready)</li>
<li>从内核相进程复制数据</li>
</ul>
<p>由于非阻塞调用的过程中，轮训占据了大部分的过程，所以轮训会占据大量的CPU时间。如果轮训不是进程的用户态，而是有人帮忙就好了。多路复用正好处理这样的问题。</p>
<p>多路复用的过程：多路复用有两个特别的系统调用select和poll。select调用是内核级别的，select轮训相对于非阻塞的轮训区别在于：前者可以等待多个socket，当其中一个socket数据准备好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到进程中，拷贝的过程是阻塞的。</p>
<p>多路复用有两种阻塞，select或poll调用之后，会阻塞进程，与第一种阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。也可以理解为”非阻塞”吧。</p>
<p><img src="/images/multiplex.png" alt=""></p>
<blockquote>
<p>类比钓鱼过程:在钓鱼的时候,我们雇了一个帮手，他可以同时抛下多个鱼竿，任何一个鱼竿的鱼一上钩，他就会拉杆。他只负责帮我们钓鱼，并不处理，所以我们在一旁等着，等他收杆之后，我们再进行处理。</p>
<p>多路复用既然可以处理多个IO,也就带来了新的问题：多个IO的顺序不能保证</p>
<p>多路复用的特点多路复用通过一种机制一个进程能同时等待多个IO文件描述符，内核监视这些文件描述符（socket描述符），其中任意一个进入读就绪状态时，select,poll.epoll函数就可以返回。对于监视的方式，有可以分为select,poll,和epoll三种方式。</p>
</blockquote>
<h2 id="select函数详解"><a href="#select函数详解" class="headerlink" title="select函数详解"></a>select函数详解</h2><p>###　函数原型</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;select.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfdp1, fd_set* readset, fd_set* writeset, fd_set* except_set, <span class="keyword">const</span> struct timeval* timeout)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>该函数允许进程指示内核等待多个事件中的其中一个发生，并只在有一个或多个事件发生或者经历了一段时间之后才唤醒它。</p>
<p>其中等待的事件类型包括三种:指定集合中的描述符处于可读状态,执行集合中的描述符处于可写状态,指定集合中的描述符有异常未处理。</p>
<p>描述符就绪的条件如下:</p>
<h4 id="可读就绪"><a href="#可读就绪" class="headerlink" title="可读就绪"></a>可读就绪</h4><p>当描述符满足下列四个条件中的其中一个,表示该描述符已经准备好读</p>
<ul>
<li>该套接字接收缓冲区的字节数大于等于套接字接收缓冲区的低水位标记的大小。一般对于TCP和UDP该值默认为1,我们也可以通过SO_RCVLOWAT套接字选项设置该套接字的低水位标记。</li>
<li>该连接读半部关闭(接受了FIN的TCP连接)，此时函数返回0。</li>
<li>该套接字是一个监听套接字且完成的连接数不为0。对于这种套接字,accept通常不会阻塞。</li>
<li>其上有一个套接字错误待处理.对这种套接字的读操作将不阻塞病返回-1。</li>
</ul>
<h4 id="可写就绪"><a href="#可写就绪" class="headerlink" title="可写就绪"></a>可写就绪</h4><p>当描述符满足下列四个条件中的其中一个,表示该描述符已经准备好写</p>
<ul>
<li>该套接字的发送缓冲区的可用空间字节大于等于套接字发送缓冲区的低水位标记大小。TCP和UDP的默认大小一般为2048。可以使用SO_SNDLOWAT套接字选项来设置该套接字的低水位标记</li>
<li>该链接的写半部关闭</li>
<li>使用非阻塞式connect的套接字建立连接，或者connect以失败告终</li>
<li>其上有一个套接字错误未处理</li>
</ul>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>maxfdp1 : fd_set中最大的描述符+1(特别注意不要忘了+1)，如readset中有{1,2,4}，writeset中有{5,7,9}，except_set中有{2,3,6,10}，则此时的maxfdp1为11</li>
<li>readset : 需要监听的满足可读条件的描述符集合</li>
<li>writeset : 需要监听的满足可写条件的描述符集合</li>
<li>except_set : 需要监听的满足异常的描述符集合</li>
<li>timeout : 等待的时间，若超过此时间,函数返回</li>
</ul>
<h4 id="timeout的三种情况"><a href="#timeout的三种情况" class="headerlink" title="timeout的三种情况"></a>timeout的三种情况</h4><ul>
<li>timeout=NULL,等待时间无限长,即不限等待时间</li>
<li>timeout-&gt;sec=0,timeout-&gt;usec=0。此时不等待，函数立即返回</li>
<li>timeout-&gt;sec!=0 || timeout-&gt;usec != 0。此时为等待时间</li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>当监视的相应的文件描述符集合中存在满足条件的描述符时，比如说读文件描述符集中有数据到来时,内核IO根据状态修改文件描述符集，并返回一个大于0的数</li>
<li>当没有满足条件的描述符且设置的timeval超时时,select函数返回0</li>
<li>出错返回负数</li>
</ul>
<p>若存在满足条件的描述符时，内核会将满足条件的描述符置位，并将其他描述符清0.这时，我们可以通过FD_ISSET来判断当前描述符是否满足条件.<br>如:<br>假设set为8位表示，起始为0000 0000。此时将{1,2,5}设置到读文件描述符集合中,即:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FD_SET(<span class="number">1</span>, &amp;readset);</div><div class="line">FD_SET(<span class="number">2</span>, &amp;readset);</div><div class="line">FD_SET(<span class="number">3</span>, &amp;readset);</div></pre></td></tr></table></figure></p>
<p>置位以后set的位为:0000 0111</p>
<p>当调用select函数，并文件描述符2准备就绪时,此时select函数返回大于0的值，set的值变为:0000 0010。此时使用FD_ISSET可以检测到文件描述符2已经就绪。</p>
<h3 id="fd-set相关操作"><a href="#fd-set相关操作" class="headerlink" title="fd_set相关操作"></a>fd_set相关操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set* <span class="built_in">set</span>)</span></span>;          <span class="comment">//将fd_set清空，一般声明fd_set第一步现先将其清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;   <span class="comment">//将某个fd置位</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;   <span class="comment">//清空某个fd</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;  <span class="comment">//判断fd是否在set中</span></div></pre></td></tr></table></figure>
<h3 id="select函数底层实现原理"><a href="#select函数底层实现原理" class="headerlink" title="select函数底层实现原理"></a>select函数底层实现原理</h3><p>select底层实现的大致原理是,通过轮训文件描述符集中的文件描述符，检查描述符是否达到条件，若达到符合的相关条件则返回，否则轮训，但是当轮训的机制虽然是死循环，但是不是一直轮训，当内核轮训一遍文件描述符之后，会调用schedule_timeout函数挂起，等待fd设备或定时器来唤醒自己，然后再继续循环体看看哪些fd可用，以此提高效率。</p>
<p>若要了解详细的select实现原理参考如下博客:<br><a href="http://janfan.cn/chinese/2015/01/05/select-poll-impl-inside-the-kernel.html" target="_blank" rel="external">http://janfan.cn/chinese/2015/01/05/select-poll-impl-inside-the-kernel.html</a><br><a href="http://zhangyafeikimi.iteye.com/blog/248815" target="_blank" rel="external">http://zhangyafeikimi.iteye.com/blog/248815</a></p>
<h3 id="select函数的特点"><a href="#select函数的特点" class="headerlink" title="select函数的特点"></a>select函数的特点</h3><p>select和poll为水平触发,epoll即支持水平触发也支持边缘触发。</p>
<p>缺点:</p>
<ul>
<li>最大并发数限制:从上面可以看出，被监听的描述符集合的大小受fe_set大小的限制，所以select监听的描述符的个数是有限制的,一般默认个数为1024或4096个等。</li>
<li>效率问题:从select的底层实现可以看出，select每次调用都会线性扫描全部的fd集合,这样效率会出现线性下降,当把FD_SETSIZE增大可能会出现超时.</li>
<li>内核用户空间拷贝问题:从select实现源码中不难看出,描述符集合以及timeout参数都是通过内存拷贝的方式从用户空间拷贝到了内核空间，也是会影响函数的性能。</li>
</ul>
<h2 id="poll函数详解"><a href="#poll函数详解" class="headerlink" title="poll函数详解"></a>poll函数详解</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> fd;     <span class="comment">//file descriptor</span></div><div class="line">  <span class="keyword">short</span> events; <span class="comment">//被监听的事件状态(即select中监听当前描述符是否可写或者可读或者异常等等)</span></div><div class="line">  shor revents; <span class="comment">//函数返回时该文件描述符的状态</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd* fds, <span class="keyword">unsigned</span> <span class="keyword">long</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="函数功能-1"><a href="#函数功能-1" class="headerlink" title="函数功能"></a>函数功能</h3><p>poll的函数功能与select功能基本类似。但是poll函数可监听的文件描述符的个数基本没有限制，poll管理多个文件描述符的方式与select一致,都是轮训，并且都是讲文件描述符数组从用户空间复制到内核空间。</p>
<h3 id="函数参数-1"><a href="#函数参数-1" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>fds : 被监听的描述符的数组</li>
<li>nfds : 数组中描述符的个数,这个大小足以监听linux所有的文件描述的符</li>
<li>timeout : 等待的时间</li>
</ul>
<p>events的合法事件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POLLIN      ---       有数据可读(普通或优先级带数据)等价于POLLRDNORM||POLLRDBAND</div><div class="line">POLLRDNORM  ---       有普通数据可读</div><div class="line">POLLRDBAND  ---       有优先级带数据可读</div><div class="line">POLLPRI     ---       有高优先级数据可读</div><div class="line"></div><div class="line">POLLOUT     ---       有数据可写(普通数据)等价于POLLWRNORM</div><div class="line">POLLWRNORM  ---       有普通数据可写</div><div class="line">POLLWRBBAND ---       有优先级带数据可写</div></pre></td></tr></table></figure></p>
<p>初此之外,revents返回的事件还有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POLLER      ---       发生错误</div><div class="line">POLLHUP     ---       发生挂起</div><div class="line">POLLNVAL    ---       指定的描述符非法，没有打开</div></pre></td></tr></table></figure></p>
<blockquote>
<p>POLLIN | POLLPRI等价于select的读事件</p>
<p>POLLOUT | POLLWRBBAND 等价于select的写事件</p>
</blockquote>
<h3 id="函数返回值-1"><a href="#函数返回值-1" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>若监听的描述符满足条件,返回revents域不为0的文件描述符的个数</li>
<li>若没有描述符满足条件且已过超时时间,poll返回0</li>
<li>出错返回-1，并设置errno为以下值:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">EBADF      ---        一个或多个结构体中的描述符无效</div><div class="line">EFAULTfds  ---        指针指向的地址超出进程的地址空间</div><div class="line">EINTR      ---        请求的时间之前产生一个信号，调用可以重新发起</div><div class="line">EINVALnfds ---        参数超出PLIMIT_NOFILE的值</div><div class="line">ENOMEM     ---        可用内存不足，无法完成请求</div></pre></td></tr></table></figure>
<h3 id="poll函数优缺点"><a href="#poll函数优缺点" class="headerlink" title="poll函数优缺点"></a>poll函数优缺点</h3><p><strong>优点</strong>：</p>
<ul>
<li>poll函数不需要计算最大的文件描述符加1.</li>
<li>poll函数监听的文件描述符的个数不受限制</li>
<li>poll相对于select函数应付大数目的描述符的效率较高。</li>
</ul>
<p><strong>缺点</strong>:</p>
<ul>
<li>poll函数没有解决select轮训所有文件描述符的问题</li>
<li>poll函数和select相同都是将文件描述符信息从用户空间拷贝到内核空间。</li>
</ul>
<h2 id="epoll函数详解"><a href="#epoll函数详解" class="headerlink" title="epoll函数详解"></a>epoll函数详解</h2><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><p>epoll相关数据结构:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//epoll_data保存触发事件相关的数据。(数据类型与具体使用方式有关)</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data&#123;</div><div class="line">  <span class="keyword">void</span>* ptr;</div><div class="line">  <span class="keyword">int</span> fd;</div><div class="line"></div><div class="line">  <span class="keyword">_uint32_t</span> u32;</div><div class="line">  <span class="keyword">_uint64_t</span> u64;</div><div class="line">&#125; <span class="keyword">epoll_data_t</span>;</div><div class="line"></div><div class="line"><span class="comment">//保存感兴趣的事件和被触发的事件</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>&#123;</span></div><div class="line">  <span class="keyword">_uint32_t</span> events;</div><div class="line">  <span class="keyword">epoll_data_t</span> data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中events是一个美剧类型的集合,我们可以使用”|”来增加感兴趣的事件。枚举类型的值包括下面:</p>
<ul>
<li>EPOLLIN : 表示关联的fd可以进行读操作</li>
<li>EPOLLOUT :表示关联的fd可以进行写操作</li>
<li>EPOLLRDHUP(2.6.17之后):表示套接字关闭了连接，或关闭了正写的一半的连接</li>
<li>EPOLLPRI : 表示关联的fd有紧急优先事件可以进行读操作。</li>
<li>EPOLLERR : 表示关联的fd发生了错误，epoll_wait会一直等待这个事件,所以一般没有必要设置这个属性</li>
<li>EPOLLHUP : 表示关联的fd被挂起，epoll_wait会一直等待这个事件,所以一般没有必要设置这个属性</li>
<li>EPOLLET : 设置关联的fd为ET的工作方式,即边缘触发</li>
<li>EPOLLONESHOT : 设置关联的fd为one-shot工作方式,表示只监听一次事件,如果要再次监听，需要把socket放入到epoll队列中。</li>
</ul>
<p>epoll相关的函数有三个。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event* event)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event* events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>epoll_create : 创建一个epoll句柄，注意创建epoll句柄会占用一个文件描述符，在使用完之后需要关闭。否则可能会导致文件描述符耗尽。<ul>
<li>size : size为最大的监听文件描述符数，监听的文件描述符的个数不能超过size可以手动指定，但是这个数值可以达到系统可以开的最大的文件描述符数。</li>
</ul>
</li>
<li>epoll_ctl : epoll的事件注册函数，它不同于select的是，它不是在监听事件的时候告诉内核要监听什么类型的时间，而是先注册要监听的事件类型。<ul>
<li>epfd : epoll文件描述符，即epoll_ create的返回值，表示该epoll描述符注册事件</li>
<li>op : 注册事件的类型包括以下三类。<ul>
<li>EPOLL_CTL_ADD : 注册行的fd到epfd中</li>
<li>EPOLL_CTL_MOD : 修改已经注册的fd的事件类型</li>
<li>EPOLL_CTL_DEL : 删除已经注册的fd</li>
</ul>
</li>
<li>fd : 注册的文件描述符</li>
<li>event : 注册的时间的类型，告诉内核需要监听什么事件，类型包括上面几种。</li>
</ul>
</li>
<li>epoll_wait :　收集epoll监控的时间中已经就绪的事件，若调用成功，返回就绪的文件描述符的个数，返回0表示超时。<ul>
<li>epfd : epoll的文件描述符</li>
<li>events : 已经就绪的事件集合.内核不分配内存，需要程序自己分配内存传给内核，内核只负责将书复制到这里</li>
<li>maxevents : events数组的大小。</li>
<li>timeout : 超时时间。</li>
</ul>
</li>
</ul>
<h3 id="水平触发-LT-与边缘触发-ET"><a href="#水平触发-LT-与边缘触发-ET" class="headerlink" title="水平触发(LT)与边缘触发(ET)"></a>水平触发(LT)与边缘触发(ET)</h3><p>epoll的默认工作模式是水平触发(LT)。NGINX使用的epoll的ET工作模式</p>
<p><strong>水平触发（level_triggered）</strong>:当被监控的文件描述符上有可读可写事件的时,epoll_wait()会通知处理程序去读写。<strong>如果程序没有一次性把缓冲区的数据读完或者写完,那么下次调用epoll_wait的时候，他还会通知你该文件描述符仍可读写,如果你一直不去读写,它会一直通知你。</strong>如果系统中有大量你不需要读写的文件描述符,而他们每次都返回,这样会大大降低处理程序检索自己关心的就绪文件描述符的效率。</p>
<p><strong>边缘触发(edge-triggered)</strong>:当被监控的文件描述符上有读写事件发生时，epoll_wait会通知处理程序去读写，<strong>如果数据没有一次性读写完,那么下次你再调用epoll_wait的时候,它不会通知你，只有等到下一次发生读写事件的时候,它才会通知你</strong>。这种模式比水平触发的效率高，系统不会充斥大量你不关心的文件描述符。</p>
<p><strong>注意</strong>:epoll工作在ET模式的时候,必须使用非阻塞的套接字,以避免由于一个文件句柄的阻塞读/阻塞写把多个文件描述符的任务饿死。最好以下面两种方式调用epoll接口</p>
<ul>
<li>基于非阻塞文件句柄</li>
<li>只有当read/write返回值为EAGAIN时才需要挂起。但这不是说每次都需要循环读，直到读到产生EAGAIN才结束,只要读取到的长度小于预期的长度就说明缓冲区的数据我们已经读完了。</li>
</ul>
<h3 id="epoll族函数底层实现"><a href="#epoll族函数底层实现" class="headerlink" title="epoll族函数底层实现"></a>epoll族函数底层实现</h3><p>epoll的使用方法上面已经有详细的描述，借口也简单易用。首先我们通过epoll_create创建一个epoll文件描述符，然后在epoll文件描述符上注册需要监听的事件，最后使用epoll_wait等待准备就绪的文件描述符。然而在每一步的过程中，内核都做了哪些操作？底层的实现方式是怎么样的？</p>
<p>内核使用了slab机制，为epoll提供了高效快速的数据结构。在内核中,epoll向内核注册了一个文件系统，用于存储被监控的文件描述符的信息。epoll在被内核初始化的时候（操作系统启动），同时会开辟出epoll自己的告诉cache区，用于安置我们需要监控的fd信息,这些fd信息会以<strong>红黑树</strong>的结构保存在内核cache中，以支持快速的查找,插入删除操作。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p>
<p>epoll fd在内核中对应的数据够如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct eventpoll &#123;</div><div class="line">    spin_lock_t       lock;        //对本数据结构的访问</div><div class="line">    struct mutex      mtx;         //防止使用时被删除</div><div class="line">    wait_queue_head_t     wq;      //sys_epoll_wait() 使用的等待队列</div><div class="line">    wait_queue_head_t   poll_wait;       //file-&gt;poll()使用的等待队列</div><div class="line">    struct list_head    rdllist;        //事件满足条件的链表</div><div class="line">    struct rb_root      rbr;            //用于管理所有fd的红黑树（树根）</div><div class="line">    struct epitem      *ovflist;       //将事件到达的fd进行链接起来发送至用户空间</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当向系统中添加一个fd时，就创建一个epitem结构体，这是内核管理epoll的基本数据结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct epitem &#123;</div><div class="line">    struct rb_node  rbn;        //用于主结构管理的红黑树</div><div class="line">    struct list_head  rdllink;  //事件就绪队列</div><div class="line">    struct epitem  *next;       //用于主结构体中的链表</div><div class="line">    struct epoll_filefd  ffd;   //这个结构体对应的被监听的文件描述符信息</div><div class="line">    int  nwait;                 //poll操作中事件的个数</div><div class="line">    struct list_head  pwqlist;  //双向链表，保存着被监视文件的等待队列，功能类似于select/poll中的poll_table</div><div class="line">    struct eventpoll  *ep;      //该项属于哪个主结构体（多个epitm从属于一个eventpoll）</div><div class="line">    struct list_head  fllink;   //双向链表，用来链接被监视的文件描述符对应的struct file。因为file里有f_ep_link,用来保存所有监视这个文件的epoll节点</div><div class="line">    struct epoll_event  event;  //注册的感兴趣的事件,也就是用户空间的epoll_event</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>当调用epoll_create的时候，会首先在epoll内存中为分配一个eventpoll的内存大小，以保存当前的epoll描述符(epfd)结构，然后在这块内存上打开一个epoll文件。</li>
<li>当调用epoll_ctl的时候，如果增加fd（socket），则检查在红黑树中是否存在，存在立即返回，不存在则添加到红黑树上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪list链表中插入数据。当我们调用epoll_ctl往里塞入百万个fd时，epoll_wait仍然可以飞快的返回，并有效的将发生事件的fd给我们用户。这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的fd外，还会再建立一个list链表，用于存储准备就绪的事件。</li>
<li>调用epoll_wait的时候立即返回准备就绪链表中的数据即可。</li>
</ol>
<p>如此，一颗红黑树，一张准备就绪fd链表，少量的内核cache，就帮我们解决了大并发下的fd（socket）处理问题。</p>
<p>如果需要了解更详细的epoll底层实现，参考一下链接:<br><a href="http://www.cnblogs.com/apprentice89/p/3234677.html" target="_blank" rel="external">http://www.cnblogs.com/apprentice89/p/3234677.html</a></p>
<h3 id="epoll特点"><a href="#epoll特点" class="headerlink" title="epoll特点"></a>epoll特点</h3><ul>
<li>没有文件描述符个数限制</li>
<li>使用注册监听时间的方式，无需每次wait时都将时间从用户空间拷贝到内核空间，节省了内存拷贝的时间。</li>
<li>使用回调机制,无需轮训所有的文件描述符检查状态。</li>
<li>返回值只有准备就绪的文件描述符，检查准备就绪的文件描述符也不需要轮训。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix中select-poll-epoll详解&quot;&gt;&lt;a href=&quot;#Unix中select-poll-epoll详解&quot; class=&quot;headerlink&quot; title=&quot;Unix中select,poll,epoll详解&quot;&gt;&lt;/a&gt;Unix中select,po
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
      <category term="IO模型" scheme="http://yoursite.com/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="epoll" scheme="http://yoursite.com/tags/epoll/"/>
    
      <category term="poll" scheme="http://yoursite.com/tags/poll/"/>
    
      <category term="select" scheme="http://yoursite.com/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>汇编基础之寄存器及汇编指令</title>
    <link href="http://yoursite.com/2017/10/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/06/汇编基础之寄存器与简单指令分析/</id>
    <published>2017-10-06T11:00:48.000Z</published>
    <updated>2017-10-08T07:24:02.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编基础之寄存器及汇编指令"><a href="#汇编基础之寄存器及汇编指令" class="headerlink" title="汇编基础之寄存器及汇编指令"></a>汇编基础之寄存器及汇编指令</h1><blockquote>
<p>参考链接:<br><a href="http://www.cnblogs.com/technology/archive/2010/05/16/1736782.html" target="_blank" rel="external">http://www.cnblogs.com/technology/archive/2010/05/16/1736782.html</a><br><a href="http://anonymalias.github.io/2017/01/09/ucontext-theory/" target="_blank" rel="external">http://anonymalias.github.io/2017/01/09/ucontext-theory/</a></p>
</blockquote>
<p>最近在学习协程方面的知识,在协程的一种实现方式中有一种是用汇编实现的,所以这里再把汇编知识复习一下。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器按照其用途可分为以下4类:</p>
<ul>
<li>数据寄存器</li>
<li>指针及变址寄存器</li>
<li>段寄存器</li>
<li>控制寄存器</li>
</ul>
<h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><p>数据寄存器包括４个16位的寄存器(AX,BX,CX,DX)或者8个8位的寄存器(AH,AL,BH,BL,CH,CL,DH,DL)，这些寄存器都是用来暂时存放操作数，运算结果或者其他信息，但同时又具有某些专门的用途。</p>
<ul>
<li>AX(累加寄存器):算术运算中的主要寄存器,在乘除运算中用来指定除数和被除数,也是乘除运算后积和商的默认存储单元。,另外<strong>IO指令均使用该寄存器与IO设备传送信息</strong></li>
<li>BX(基址寄存器):指令寻址时常用作基址寄存器，存入偏移量或者偏移量的构成部分。</li>
<li>CX(计数寄存器):在循环指令操作或者串处理指令中隐含计数</li>
<li>DX(数据寄存器):在双字节运算中，与AX构成32位操作数，DX为高16位。在某些IO指令中,DX被用来存放端口地址</li>
</ul>
<h3 id="指针及变址寄存器"><a href="#指针及变址寄存器" class="headerlink" title="指针及变址寄存器"></a>指针及变址寄存器</h3><p>这些寄存器都是16位的寄存器,用来存放16为的操作数或者中间结果，但是更常见的是存放偏移量或者位移量</p>
<ul>
<li>SP(堆栈指针寄存器):指向栈顶的位置,与SS寄存器一起组成栈顶数据的物理地址</li>
<li>BP(基址指针寄存器):系统默认其指向堆栈中的某一单元，即提供栈中该单元偏移量，加段前缀后，BP可作为非堆栈段的地址指针。</li>
<li>SI(源变址寄存器):与DS联用, 指示数据段中某操作的偏移量. 在做串处理时, SI指示源操作数地址, 并有自动增量或自动减量的功能. 变址寻址时, SI与某一位移量共同构成操作数的偏移量</li>
<li>DI(目的变址寄存器):与DS联用, 指示数据段中某操作数的偏移量, 或与某一位移量共同构成操作数的偏移量. 串处理操作时, DI指示附加段中目的地址, 并有自动增量或减量的功能</li>
</ul>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><ul>
<li>CS(代码段):存放当前程序的指令代码</li>
<li>DS(数据段):存放程序所涉及的源数据以及结果</li>
<li>SS(堆栈段):以先进后出原则的数据区</li>
<li>ES(附加段):辅助数据区，存放串或者其他数据</li>
</ul>
<h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><ul>
<li>IP（指令寄存器）: 存放下一条要执行的指令的偏移量</li>
<li>FR(控制标志位):<ul>
<li>CF(进位标识位):进行加减运算时, 如果最高二进制位产生进位或错位, CF则为1, 否则为0. 程序设计中, 常用条件转移指令JC, JNC指令据此标志位实现转移</li>
<li>PF(奇偶标志位):操作结果中二进制位1的个数为偶数是, PF为1, 某则为0</li>
<li>AF(辅助进位标志位):运算时半字节产生进位或借位时, AF为1, 某则为0. 主要用于BCD码的调整</li>
<li>ZF(零标志位):运算结果为0时, ZF为1, 否则为0</li>
<li>SF(符号标志位):当运算结果的最高位为1时, SF为1, 否则为0. 最高位表示符号数的正和负</li>
<li>TF(跟踪标志位):用于调试程序时进入单步方式工作. TF=1时, 每条指令执行完后产生一个内部中断, 让用户检查指令运行后寄存器, 存储器和各标志位的内容. TF=0时, CPU工作正常, 不产生内部中断</li>
<li>IF(中断允许标志位):IF=1同时中断屏蔽寄存器的相应位为0, 允许系统响应可屏蔽中断, 反之, 不接收外部发出的中断请求</li>
<li>DF(方向位标志位):用于控制串操作时地址指针位移方向. 当DF=1时, 指针向高地址方向移动</li>
<li>OF(溢出标志位):算术运算时结果超出系统所能表示的数的范围. 溢出时, OF=1</li>
</ul>
</li>
</ul>
<p>注意:上述为16位处理其器中的寄存器的名字，在32和64位系统中，寄存器中名字有相应的变化，具体看下面(32位在前面加E,64在前面加R):</p>
<p><img src="/images/register.png" alt=""></p>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><h3 id="汇编指令格式"><a href="#汇编指令格式" class="headerlink" title="汇编指令格式"></a>汇编指令格式</h3><p>汇编指令的格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[标号:]　指令助记符[[目的操作数][,源操作数]][;注释]</div></pre></td></tr></table></figure></p>
<ul>
<li>指令助记符:如MOV,ADD之类标识传送,加法。不区分大小写</li>
<li>目的操作数:作用有两个,1.参与指令操作2,暂时存储操作结果</li>
<li>源操作数:主要提供原始数据或操作对象。面向所有寻址方式</li>
<li>注释:用分号隔开</li>
</ul>
<p>汇编指令中常见的符号:</p>
<ul>
<li>imme:立即数</li>
<li>DST:目的操作数</li>
<li>SRC:源操作数</li>
<li>mem:存储器操作数</li>
<li>OPR:操作数</li>
<li>reg:通用寄存器</li>
<li>EA:偏移地址</li>
<li>Sreg:段寄存器</li>
<li>Port:端口地址</li>
<li>Lable:标号</li>
</ul>
<p>汇编指令可以分成六类:</p>
<ul>
<li>数据传送指令</li>
<li>算数运算指</li>
<li>逻辑运算与移位指令</li>
<li>串操作指令</li>
<li>程序控制指令</li>
<li>处理器控制指令<h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><h4 id="数据传送指令-1"><a href="#数据传送指令-1" class="headerlink" title="数据传送指令"></a>数据传送指令</h4></li>
<li>MOV DST,SRC(传送指令):把源操作数的内容送入目的操作数<ul>
<li>立即数做源操作数时,立即数的长度必须小于等于目的操作数的长度</li>
<li>操作数分别为reg,reg或reg,sreg或sreg,sreg或reg,sreg时，两者的长度必须保持一致</li>
<li>立即数不能作为目的操作数</li>
<li>CS和IP寄存器不能做目的操作数,不允许用立即数为段寄存器赋值</li>
<li>不能将一个段寄存器的内容直接送到另一个段寄存器中, 可借助通用寄存器或PUSH, POP指令实现这一要求</li>
</ul>
</li>
<li>PUSH SRC(压栈指令): 将一个字数据压入当前栈顶, 位移量disp=-2的地址单元. 数据进栈时, 栈指针SP首先向低地址方向移动两个字节位置, 接着数据进栈, 形成新的栈顶</li>
<li>POP DST(出栈指令):弹出栈顶元素, 后将栈顶指针向栈底方向移动一个字</li>
<li>XCHG OPR1, OPR2(交换指令):交换指令: 将这两个操作数交换</li>
</ul>
<h4 id="地址传送指令"><a href="#地址传送指令" class="headerlink" title="地址传送指令"></a>地址传送指令</h4><ul>
<li>LEA DST, SRC(装载有效指令):该指令将源操作数的偏移量OA装载到目的操作数中</li>
<li>LDS DST, SRC(装载数据段指针指令):将当前数据段中的一个双字数据装入到一个通用寄存器SI(双字数据的低字)和数据段寄存器DS(双字数据的高字)中</li>
<li>LES DST,SRC(装载附加段指针指令):将附加数据段中的一个32位地址数据指针(附加段指针)送到DI(低字)和ES(高字)寄存器中</li>
</ul>
<h4 id="标志传送指令"><a href="#标志传送指令" class="headerlink" title="标志传送指令"></a>标志传送指令</h4><ul>
<li>LAHF(标志寄存器送AH指令): 将标志寄存器的低字节送入AH中</li>
<li>SAHF(AH送标志寄存器指令): 将AH寄存器内容送标志寄存器FR的低字节</li>
<li>PUSHF(标志进栈指令): 标志寄存器进栈</li>
<li>POPF (标志出栈指令): 标志寄存器出栈</li>
</ul>
<h4 id="累加器专用传送指令"><a href="#累加器专用传送指令" class="headerlink" title="累加器专用传送指令"></a>累加器专用传送指令</h4><ul>
<li>IN   AL, Port:从端口读入数据, 存放在AL中</li>
<li>OUT PORT,AL:传送AL中的数据到端口</li>
<li>XLAT OPR或XLAT:用于将AL中当前内容转换为一种代码</li>
</ul>
<h3 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h3><h4 id="加法指令"><a href="#加法指令" class="headerlink" title="加法指令"></a>加法指令</h4><ul>
<li>ADD DST, SRC:DST+SRC的和存放到DST中去</li>
<li>ADC DST, SRC:带进位加法指令, DST+SRC+CF</li>
<li>INC DST:增1指令</li>
</ul>
<h4 id="减法指令"><a href="#减法指令" class="headerlink" title="减法指令"></a>减法指令</h4><ul>
<li>SUB DST, RSC:DST-SRC, 存放到DST中</li>
<li>SBB DST, SRC:带借位减法指令, DST-SRC-CF</li>
<li>DEC DST :减1指令</li>
<li>NEG DST:求补指令, 求补码</li>
<li>CMP OPR1, OPR2:比较指令</li>
</ul>
<h4 id="乘法指令"><a href="#乘法指令" class="headerlink" title="乘法指令"></a>乘法指令</h4><ul>
<li>MUL SRC:无符号数乘指令, AL*SRC, 结果放入AX中</li>
<li>IMUL SRC:有符号数乘指令, AL*SRC, 结果放入AX中</li>
</ul>
<h4 id="除法指令"><a href="#除法指令" class="headerlink" title="除法指令"></a>除法指令</h4><ul>
<li>DIV SRC :无符号数除指令, AX/SRC, 商放入AL中, 余数放在AH中</li>
<li>IDIV SRC:符号数除指令, AX/SRC, 上放入AL中, 余数放在AH中</li>
<li>CBW, CWD:都是符号扩展指令. 将AL的符号扩到AX中; 将AX的符号扩到DX</li>
</ul>
<h3 id="逻辑运算与移位指令"><a href="#逻辑运算与移位指令" class="headerlink" title="逻辑运算与移位指令"></a>逻辑运算与移位指令</h3><h4 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h4><ul>
<li>NOT OPR:逻辑非指令</li>
<li>AND OPR:逻辑与指令</li>
<li>OR OPR:逻辑或指令</li>
<li>XOR OPR :逻辑异或指令</li>
</ul>
<h4 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令:"></a>移位指令:</h4><ul>
<li>SHL DST, CNT:逻辑左移</li>
<li>SHR DST, CNT:逻辑右移</li>
<li>SAL DST, CNT:算术左移</li>
<li>SAR DST, CNT:算术右移</li>
</ul>
<h4 id="循环移位指令"><a href="#循环移位指令" class="headerlink" title="循环移位指令"></a>循环移位指令</h4><ul>
<li>ROL              DST, CNT:循环左移</li>
<li>ROR       DST, CNT:循环右移</li>
<li>RCL        DST, CNT:带进位循环左移</li>
<li>RCR              DST, CNT:带进位循环右移</li>
</ul>
<h3 id="串操作指令"><a href="#串操作指令" class="headerlink" title="串操作指令"></a>串操作指令</h3><ul>
<li>MOVS:串传送指令</li>
<li>CMPS:串比较指令</li>
<li>SCAS:串扫描指令</li>
<li>LODS:装入串指令</li>
<li>STOS:存储串指令</li>
</ul>
<h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><h4 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令:"></a>转移指令:</h4><ul>
<li>JMP:无条件转移指令</li>
<li>JX:条件转移指令(JC/JNC, JZ/JNZ, JE/JNE, JS/JNS, JO/JNO, JP/JNP…)</li>
</ul>
<h4 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h4><ul>
<li>LOOP 标号:该指令执行时, 技术寄存器CXX首先减1, 然后判断CX, 若为0, 跳出循环</li>
</ul>
<h4 id="条件循环指令"><a href="#条件循环指令" class="headerlink" title="条件循环指令"></a>条件循环指令</h4><ul>
<li>LOOPZ/LOOPE, LOOPNZ/LOOPNE:前者用于找到第一个不为0的事件, 后者用于找到第一个为0的事件</li>
</ul>
<h4 id="子程序调用指令"><a href="#子程序调用指令" class="headerlink" title="子程序调用指令"></a>子程序调用指令</h4><ul>
<li>CALL  子程序名:段内直接调用</li>
<li>RET</li>
</ul>
<h4 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h4><ul>
<li>INT N(中断类型号):软中断指令</li>
<li>IRET:中断返回指令</li>
</ul>
<h3 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h3><h4 id="标志处理指令"><a href="#标志处理指令" class="headerlink" title="标志处理指令:"></a>标志处理指令:</h4><ul>
<li>CLC:进位标志CF置0</li>
<li>CMC:进位标志CF求反</li>
<li>STC:进位标志值1</li>
<li>CLD:方向标志置0</li>
<li>STD:方向标志置1</li>
<li>CLI:中断允许标志置0</li>
<li>STI:中断允许标志置1</li>
</ul>
<h4 id="其他处理器控制指令"><a href="#其他处理器控制指令" class="headerlink" title="其他处理器控制指令:"></a>其他处理器控制指令:</h4><ul>
<li>NOP:空操作</li>
<li>HLT:停机</li>
<li>WAIT:等待</li>
<li>ESC:换码</li>
<li>LOCK:封锁</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;汇编基础之寄存器及汇编指令&quot;&gt;&lt;a href=&quot;#汇编基础之寄存器及汇编指令&quot; class=&quot;headerlink&quot; title=&quot;汇编基础之寄存器及汇编指令&quot;&gt;&lt;/a&gt;汇编基础之寄存器及汇编指令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考链接:&lt;br&gt;&lt;a h
    
    </summary>
    
      <category term="汇编" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="寄存器" scheme="http://yoursite.com/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C++协程实现及原理</title>
    <link href="http://yoursite.com/2017/10/06/C++%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/10/06/C++协程实现/</id>
    <published>2017-10-06T09:00:48.000Z</published>
    <updated>2017-10-06T09:20:40.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-协程及其原理"><a href="#C-协程及其原理" class="headerlink" title="C++协程及其原理"></a>C++协程及其原理</h1><h2 id="协程的几种实现方式及原理"><a href="#协程的几种实现方式及原理" class="headerlink" title="协程的几种实现方式及原理"></a>协程的几种实现方式及原理</h2><p>协程又可以称为用户线程,微线程，可以将其理解为单个进程或线程中的多个<strong>用户态线程</strong>，这些微线程在用户态进程控制和调度.协程的实现方式有很多种，包括</p>
<ol>
<li>使用glibc中的ucontext库实现</li>
<li>利用汇编代码切换上下文</li>
<li>利用C语言语法中的switch-case的奇淫技巧实现(protothreads)</li>
<li>利用C语言的setjmp和longjmp实现</li>
</ol>
<p>实际上，无论是上述那种方式实现协程,其原理是相同的，都是通过保存和恢复寄存器的状态，来进行各协程上下文的保存和切换。</p>
<h2 id="协程较于函数和线程的优点"><a href="#协程较于函数和线程的优点" class="headerlink" title="协程较于函数和线程的优点"></a>协程较于函数和线程的优点</h2><ul>
<li>相比于函数:协程避免了传统的函数调用栈，几乎可以无限地递归</li>
<li>相比与线程:协程没有内核态的上下文切换，近乎可以无限并发。协程在用户态进程显式的调度，可以把异步操作转换为同步操作，也意味着不需要加锁,避免了加锁过程中不必要的开销。</li>
</ul>
<p>进程,线程以及协程的设计都是为了并发任务可以更好的利用CPU资源，他们之间最大的区别在于CPU资源的使用上:</p>
<ul>
<li>进程和线程的任务调度是由内核控制的，是抢占式的；</li>
<li>协程的任务调度是在用户态完成,需要代码里显式地将CPU交给其他协程,是协作式的</li>
</ul>
<p>由于我们可以在用户态调度协程任务，所以我们可以把<strong>一组相互依赖的任务设计为协程。这样,当一个协程任务完成之后,可以手动的进行任务切换，把当前任务挂起(yield),切换到另一个协程区工作</strong>.由于我们可以控制程序主动让出资源，很多情况下将不需要对资源进行加锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-协程及其原理&quot;&gt;&lt;a href=&quot;#C-协程及其原理&quot; class=&quot;headerlink&quot; title=&quot;C++协程及其原理&quot;&gt;&lt;/a&gt;C++协程及其原理&lt;/h1&gt;&lt;h2 id=&quot;协程的几种实现方式及原理&quot;&gt;&lt;a href=&quot;#协程的几种实现方式及原理&quot; c
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ucontext_t" scheme="http://yoursite.com/tags/ucontext-t/"/>
    
      <category term="上下文切换" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ucontext族函数详解</title>
    <link href="http://yoursite.com/2017/10/06/ucontext%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/06/ucontext函数详解/</id>
    <published>2017-10-06T08:00:48.000Z</published>
    <updated>2017-10-06T08:05:11.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ucontext族函数详解"><a href="#ucontext族函数详解" class="headerlink" title="ucontext族函数详解"></a>ucontext族函数详解</h1><blockquote>
<p>the ucontext_t type is a structure type suitable for holding the context for the user thread of execution. A thread’s context include stack,saved registersm a list of block signals</p>
<p>上述为ncontext_t结构体的定义，ucontext机制是GNU C库提供的一组创建，保存，切换用户态执行上下文的API，从上面的描述可以看出ucontext_t结构体使得用户在程序中保存当前的上下文成为可能。我们也可以利用此实现用户级线程，即协程。</p>
</blockquote>
<h2 id="ucontext-t以及ucontext族函数"><a href="#ucontext-t以及ucontext族函数" class="headerlink" title="ucontext_t以及ucontext族函数"></a>ucontext_t以及ucontext族函数</h2><h3 id="ucontext-t结构体"><a href="#ucontext-t结构体" class="headerlink" title="ucontext_t结构体"></a>ucontext_t结构体</h3><p>ucontext_t结构体定义,一个ucontext_t至少包括以下四个成员,可能依据不同系统包括其他不同的成员。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> &#123;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span>* <span class="title">uc_link</span>;</span></div><div class="line">  <span class="keyword">sigset_t</span> uc_sigmask;</div><div class="line">  <span class="keyword">stack_t</span> uc_stack;</div><div class="line">  <span class="keyword">mcontext_t</span> uc_mcontext;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>类成员解释:</p>
<ul>
<li>uc_link:为当前context执行结束之后要执行的下一个context，若uc_link为空，执行完当前context之后退出程序。</li>
<li>uc_sigmask : 执行当前上下文过程中需要屏蔽的信号列表，即信号掩码</li>
<li>uc_stack : 为当前context运行的栈信息。</li>
<li>uc_mcontext : 保存具体的程序执行上下文，如PC值，堆栈指针以及寄存器值等信息。它的实现依赖于底层，是平台硬件相关的。此实现不透明。</li>
</ul>
<h3 id="ucontext族函数"><a href="#ucontext族函数" class="headerlink" title="ucontext族函数"></a>ucontext族函数</h3><p>ucontext族函数主要包括以下四个:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;ucontext.h&gt;</div><div class="line">void makecontext(ucontext_t* ucp, void (*func)(), int argc, ...);</div><div class="line">int swapcontext(ucontext_t* olducp, ucontext_t* newucp);</div><div class="line">int getcontext(ucontext_t* ucp);</div><div class="line">int setcontext(const ucontext_t* ucp);</div></pre></td></tr></table></figure></p>
<ul>
<li>makecontext:初始化一个ucontext_t,func参数指明了该context的入口函数，argc为入口参数的个数，每个参数的类型必须是int类型。另外在makecontext之前，一般需要显示的初始化栈信息以及信号掩码集同时也需要初始化uc_link，以便程序退出上下文后继续执行。</li>
<li>swapcontext:原子操作，该函数的工作是保存当前上下文并将上下文切换到新的上下文运行。</li>
<li>getcontext:将当前的执行上下文保存在ucp中，以便后续恢复上下文</li>
<li>setcontext : 将当前程序切换到新的context,在执行正确的情况下该函数直接切换到新的执行状态，不会返回。</li>
</ul>
<blockquote>
<p>注意:setcontext执行成功不返回，getcontext执行成功返回0，若执行失败都返回-1。若uc_link为NULL,执行完新的上下文之后程序结束。</p>
</blockquote>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">newContextFun</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is the new context"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> <span class="built_in">stack</span>[<span class="number">10</span>*<span class="number">1204</span>];</div><div class="line"></div><div class="line">  <span class="comment">//get current context</span></div><div class="line">  <span class="keyword">ucontext_t</span> curContext;</div><div class="line">  getcontext(&amp;curContext);</div><div class="line"></div><div class="line">  <span class="comment">//modify the current context</span></div><div class="line">  <span class="keyword">ucontext_t</span> newContext = curContext;</div><div class="line">  newContext.uc_stack.ss_sp = <span class="built_in">stack</span>;</div><div class="line">  newContext.uc_stack.ss_size = <span class="keyword">sizeof</span>(<span class="built_in">stack</span>);</div><div class="line">  newContext.uc_stack.ss_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">  newContext.uc_link = &amp;curContext;</div><div class="line"></div><div class="line">  <span class="comment">//register the new context</span></div><div class="line">  makecontext(&amp;newContext, (<span class="keyword">void</span>(*)(<span class="keyword">void</span>))newContextFun, <span class="number">0</span>);</div><div class="line">  swapcontext(&amp;curContext, &amp;newContext);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"main\n"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ucontext族函数详解&quot;&gt;&lt;a href=&quot;#ucontext族函数详解&quot; class=&quot;headerlink&quot; title=&quot;ucontext族函数详解&quot;&gt;&lt;/a&gt;ucontext族函数详解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;the ucontext_
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ucontext_t" scheme="http://yoursite.com/tags/ucontext-t/"/>
    
      <category term="上下文切换" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C/C++语言内存对齐</title>
    <link href="http://yoursite.com/2017/10/02/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%AF%B9%E5%85%B6%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/10/02/C语言内存对其相关/</id>
    <published>2017-10-02T06:30:08.000Z</published>
    <updated>2017-10-02T06:31:43.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-C-语言内存对齐"><a href="#C-C-语言内存对齐" class="headerlink" title="C/C++语言内存对齐"></a>C/C++语言内存对齐</h1><p><strong>内存对齐</strong>:在计算机中，内存空间按照字节划分，理论上可以从任何起始地址访问任何类型的变量。但实际上在访问特定类型的变量的时候需要从特定的地址开始，这就需要各种类型的数据按照一定的规则在空间上排列，而不是顺序的一个接一个的存放，这就是内存对齐，也叫字节对齐。</p>
<p><strong>内存对齐的作用</strong>:</p>
<ul>
<li>可移植性:因为不同平台对数据的在内存中的访问规则不同,不是所有的硬件都可以访问任意地址上的数据，某些硬件平台只能在特定的地址开始访问数据。所以需要内存对齐。</li>
<li>性能原因:一般使用内存对齐可以提高CPU访问内存的效率。如32位的intel处理器通过总线访问内存数据，每个总线周期从偶地址开始访问32位的内存数据，内存数据以字节为单位存放。如果32为的数据没有存放在４字节整除的内存地址处，那么处理器需要<strong>两个总线周期</strong>对数据进行访问，显然效率下降很多；另外合理的利用字节对齐可以有效的节省存储空间。</li>
</ul>
<p><strong>默认内存对齐影响因素</strong>:与平台架构(位数)和编译器的默认设置有关。</p>
<blockquote>
<p>总线周期:CPU通过总线和存储器或者IO设备进行一次数据传输需要的时间，通常为四个或者多个时钟周期组成。</p>
</blockquote>
<h2 id="内存对齐规则"><a href="#内存对齐规则" class="headerlink" title="内存对齐规则"></a>内存对齐规则</h2><ol>
<li>整体类型的对齐规则:若设置了内存对齐为m个字节,类中的最大成员的对齐字节为n，则该数据类型的对齐字节为p=min(m,n)。(一般32位机器的默认pack为4位；64位机器的默认pack为8位,程序中可以显式设置pack的大小)</li>
<li>类型中成员的对齐规则:类中的第一个成员放在offset为0的位置；对于其他成员，若设置了内存对齐为m个字节,假设该数据成员的对齐字节数(即当前成员所占的字节数)为k,则该数据成员的起始位置是min(m,k)的整数倍。</li>
<li>整体对齐规则:最后整个类型的大小为p=min(m,n)的整数倍。</li>
<li>当设置对齐字节数大于类中最大成员的对齐字节数的时候，这个设置实际不产生任何效果；当设置对齐字节数为1时,类的大小就是简单的把所有成员大小相加。</li>
</ol>
<p>实例:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//前提条件:32位机器，当前编译器默认pack为4</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">short</span> b;</div><div class="line">  <span class="keyword">int</span> c;</div><div class="line">  <span class="keyword">double</span> d;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; offsetof(T, a) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, b) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, c) &lt;&lt; <span class="built_in">endl</span></div><div class="line">       &lt;&lt; offsetof(T, d) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据上面的分析:</p>
<ul>
<li>a为第一个成员,offset为0。</li>
<li>b为short，对齐字节数为2,所以其对齐字节为min(2,4)=2，故offset为4</li>
<li>c为int,对齐字节数为4,所以其对齐字节数为min(4,4)=4，故offset为8</li>
<li>d为double，对齐字节数为8,故对齐字节数为min(4,8)=8，故offset为12</li>
<li>总的大小为20,是,min(8,4)的倍数．</li>
</ul>
<h2 id="使用pragma-pack修改系统默认pack"><a href="#使用pragma-pack修改系统默认pack" class="headerlink" title="使用pragma pack修改系统默认pack"></a>使用pragma pack修改系统默认pack</h2><p>修改系统的默认pack可以使用系统函数pragma的pack参数，但是修改之后的<strong>pack一定是2的n次幂</strong>。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(16)     <span class="comment">//修改pack修改为16</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()       <span class="comment">//恢复系统的默认pack</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(show)   <span class="comment">//返回系统当前的pack，由警告信息显示，注意gcc不支持。只有VS支持</span></span></div></pre></td></tr></table></figure></p>
<p>此外pack还有push,pop其他参数可选，但是不同的编译器对这些参数的实现有不同的含义，如果需要了解可以参考对应的资料。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-C-语言内存对齐&quot;&gt;&lt;a href=&quot;#C-C-语言内存对齐&quot; class=&quot;headerlink&quot; title=&quot;C/C++语言内存对齐&quot;&gt;&lt;/a&gt;C/C++语言内存对齐&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;内存对齐&lt;/strong&gt;:在计算机中，内存空间按照字节
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="内存对齐" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    
      <category term="pack" scheme="http://yoursite.com/tags/pack/"/>
    
  </entry>
  
  <entry>
    <title>异步刷盘与同步刷盘的区别</title>
    <link href="http://yoursite.com/2017/09/29/Message%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%AD%A5%E5%88%B7%E7%9B%98%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    <id>http://yoursite.com/2017/09/29/Message存储服务同步刷盘与异步刷盘/</id>
    <published>2017-09-29T09:05:01.000Z</published>
    <updated>2017-09-29T09:10:34.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步刷盘与同步刷盘的区别"><a href="#异步刷盘与同步刷盘的区别" class="headerlink" title="异步刷盘与同步刷盘的区别"></a>异步刷盘与同步刷盘的区别</h1><p>存储系统往往追求尽量高的吞吐,无论是传统的MySQl还是分布式存储系统Hbase，在写入的时候会尽量提升系统的吞吐。一般来说，提升系统性能的方式是先将数据写入内存中，然后再刷盘到磁盘中进行持久化。</p>
<p>刷盘对应于MySQL中的fsync和hbase中的flush，在mysql中标识将写入的redo log以及bin　Log持久化到磁盘中，这样就保证mysql可以持续的对外提供数据服务;在hbase中表示将MainStore中的数据持久化到磁盘中。一般来说刷盘的方式有<strong>同步刷盘和异步刷盘</strong>两种。</p>
<p>同步刷盘和异步刷盘的区别如下:</p>
<ul>
<li>同步刷盘:当数据写如到内存中之后立刻刷盘(同步)，在保证刷盘成功的前提下响应client。</li>
<li>异步刷盘:数据写入内存后，直接响应client。异步将内存中的数据持久化到磁盘上。</li>
</ul>
<p>同步刷盘和异步输盘的优劣:</p>
<ul>
<li>同步刷盘保证了数据的可靠性,保证数据不会丢失。</li>
<li>同步刷盘效率较低,因为client获取响应需要等待刷盘时间，为了提升效率，通常采用批量输盘的方式，每次刷盘将会flush内存中的所有数据。(若底层的存储为mmap，则每次刷盘将刷新所有的dirty页)</li>
<li>异步刷盘不能保证数据的可靠性.</li>
<li>异步刷盘可以提高系统的吞吐量.</li>
<li>常见的异步刷盘方式有两种,分别是定时刷盘和触发式刷盘。定时刷盘可设置为如每1s刷新一次内存.触发刷盘为当内存中数据到达一定的值，会触发异步刷盘程序进行刷盘。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异步刷盘与同步刷盘的区别&quot;&gt;&lt;a href=&quot;#异步刷盘与同步刷盘的区别&quot; class=&quot;headerlink&quot; title=&quot;异步刷盘与同步刷盘的区别&quot;&gt;&lt;/a&gt;异步刷盘与同步刷盘的区别&lt;/h1&gt;&lt;p&gt;存储系统往往追求尽量高的吞吐,无论是传统的MySQl还是分布
    
    </summary>
    
      <category term="消息队列" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="同步刷盘" scheme="http://yoursite.com/tags/%E5%90%8C%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    
      <category term="异步刷盘" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5%E5%88%B7%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>LinuxPs命令详解</title>
    <link href="http://yoursite.com/2017/09/29/LinuxPs%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/29/LinuxPs命令使用/</id>
    <published>2017-09-29T06:05:01.000Z</published>
    <updated>2017-09-29T06:57:53.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-ps命令使用详解"><a href="#Linux-ps命令使用详解" class="headerlink" title="Linux ps命令使用详解"></a>Linux ps命令使用详解</h1><p>ps命令常见使用方法有两种，另外我们可以通过一写参数对ps结果进行筛选和过滤。分别是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef</div><div class="line">ps aux</div></pre></td></tr></table></figure></p>
<p>那这两个命令有什么区别呢？下面将对这两个命令进行详细说明和解释。</p>
<h2 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h2><p>返回信息的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         1     0  0 9月24 ?       00:00:25 /sbin/init</div><div class="line">root         2     0  0 9月24 ?       00:00:00 [kthreadd]</div><div class="line">root         3     2  0 9月24 ?       00:00:00 [ksoftirqd/0]</div><div class="line">root         5     2  0 9月24 ?       00:00:00 [kworker/0:0H]</div><div class="line">root         7     2  0 9月24 ?       00:09:13 [rcu_sched]</div><div class="line">root         8     2  0 9月24 ?       00:00:00 [rcu_bh]</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>对以上各列信息进行解释:</p>
<ul>
<li>uid : 用户id</li>
<li>pid : 当前进程的id</li>
<li>ppid : 当前进程的父进程id</li>
<li>C : 进程占用CPU的百分比</li>
<li>STIME : 进程启动时间</li>
<li>CMD : 进程启动命令</li>
</ul>
<p>上述返回值比较容易理解，不一一解释</p>
<h2 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h2><p>返回信息的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.0 120060  5392 ?        Ss   9月24   0:25 /sbin/init</div><div class="line">root         2  0.0  0.0      0     0 ?        S    9月24   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S    9月24   0:00 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S&lt;   9月24   0:00 [kworker/0:0H]</div><div class="line">root         7  0.1  0.0      0     0 ?        S    9月24   9:14 [rcu_sched]</div><div class="line">root         8  0.0  0.0      0     0 ?        S    9月24   0:00 [rcu_bh]</div><div class="line">root         9  0.0  0.0      0     0 ?        S    9月24   0:00 [migration/0]</div></pre></td></tr></table></figure></p>
<p>对以上信息解释：</p>
<ul>
<li>user : 用户名</li>
<li>pid : 进程id</li>
<li>%CPU : 进程运行占用CPU的百分比</li>
<li>%MEM : 进程占用内存的百分比</li>
<li>VSZ : 该进程使用的虚拟内存量，表示一个程序完全驻留在内存中占用的虚拟内存量</li>
<li>RSS : 该进程占用的固定内存量</li>
<li>TTY : 终端名</li>
<li>START : 进程开启时间</li>
<li>STAT : 进程的状态</li>
<li>TIME : 该进程实际使用的CPU时间</li>
<li>COMMAND : 进程运行指令</li>
</ul>
<p>上述比较重要的信息主要包括VSZ,RSS以及STAT。<br>VSZ表示一个程序完全驻留在内存中占用的内存量，其包括程序链接的动态链接库的大小,栈的大小以及代码段的大小。(手动算过，但是栈的大小很迷，貌似数组在栈中的大小与同类型变量的大小相同，待验证)。<br>RSS包括运行过程中实际被加载到内存中的动态链接库，可执行文件以及栈的大小。<br>STAT为当前进程的运行状态。其包括多种状态，具体解释如下所述:</p>
<ul>
<li>D : 不可中断(通常是IO进程)</li>
<li>R : 正在运行或者在队列中的进程</li>
<li>S : 处在休眠状态的进程</li>
<li>T : 停止或者被追踪</li>
<li>Z : 僵尸进程</li>
<li>W : 进入内存交换</li>
<li>X : 死掉的进程</li>
<li>&lt; : 优先级较高的进程</li>
<li>n : 优先级较低的进程</li>
<li>s : 包含子进程</li>
<li>+ : 位于后台进程组</li>
</ul>
<p><strong>可以在上述命令的基础上对查询结果进行筛选</strong>，如我们想要对内存占用量进行排序，方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux --sort -pMEM</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-ps命令使用详解&quot;&gt;&lt;a href=&quot;#Linux-ps命令使用详解&quot; class=&quot;headerlink&quot; title=&quot;Linux ps命令使用详解&quot;&gt;&lt;/a&gt;Linux ps命令使用详解&lt;/h1&gt;&lt;p&gt;ps命令常见使用方法有两种，另外我们可以通过
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>makefile自动变量与隐晦规则推导</title>
    <link href="http://yoursite.com/2017/09/20/makefile%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9A%90%E6%99%A6%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/2017/09/20/makefile自动变量与隐晦规则推导/</id>
    <published>2017-09-20T12:48:59.000Z</published>
    <updated>2017-09-24T08:48:44.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile自动变量与隐晦规则推导"><a href="#makefile自动变量与隐晦规则推导" class="headerlink" title="makefile自动变量与隐晦规则推导"></a>makefile自动变量与隐晦规则推导</h1><p>makefile的使用可以大大简化程序编译的过程，不过对于新手来说makefile的执行规则理解起来还是很让人迷糊的。其中最重要的原因是makefile中使用了大量的隐晦规则和自动变量来简化makefile的编写.本节将记录一下makefile自动变量和隐晦规则的推导过程以及makefile的执行流程。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%.o:%.c</div><div class="line">  $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>对于上面的推导规则，makefile是怎么将%c文件编译汇编成.o文件的？下面将针对这个问题进行讲解</p>
</blockquote>
<h2 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h2><p>makefile中的自动变量实质上是对一类变量的简写，当我们在模式规则中对这类变量处理的时候可以直接使用自动变量简化makefile代码的编写。自动变量包括如目标文件,依赖文件等。下面以实例的方式列出了一些常用的自动变量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a: a.o b.o c.o d.o</div><div class="line">  g++ -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<ul>
<li>$@: 表示模式规则中的目标文件,对于上面的模式规则,$@表示a</li>
<li>$&lt;: 表示依赖中的第一个文件.对于上述规则,$&lt;表示a.o</li>
<li>$^: 表示所有依赖文件的集合,对于上述规则$^表示a.o b.o c.o d.o</li>
<li>$+: 表示所有依赖文件的集合(不去重).对于上述规则$+表示a.o b.o c.o d.o</li>
<li>$%: 仅当目标是函数库文件(.a)文件时，表示规则中目标成员名。如一个目标是(test.a(a.o)),此时$%表示a.o, $@表示test.a</li>
<li>$?: 所有比目标新的依赖目标的集合</li>
<li>$*: 表示目标规则中%以及%之前的部分。如若目标文件为”src/test.o”,目标文件模式为”src/%.o”,此时$*表示”src/test”。</li>
</ul>
<h2 id="隐晦规则自动规则推导"><a href="#隐晦规则自动规则推导" class="headerlink" title="隐晦规则自动规则推导"></a>隐晦规则自动规则推导</h2><p>使用makefile的makefile的隐晦自动规则推导功能也可以让我们的makefile的代码大大简化。使用隐晦规则，我们没必要为每一个类似的规则生成都去写类似的规则。makefile会自动推导依赖文件,并根据隐含规则推导出生成当前目标的命令。<br>如下面的makefile:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">target: a.o b.o c.o</div><div class="line">  g++ -o $@　$^ $(LIB) $(INC) $(LINKER)</div><div class="line">a.o: a.c</div><div class="line">  g++ -c $(CFLAGS) -o a.o a.c</div><div class="line">b.o: b.c</div><div class="line">  g++ -c $(CFLAGS) -o b.o b.c</div><div class="line">c.o: c.c</div><div class="line">  g++ -c $(CFLAGS) -o c.o c.c</div></pre></td></tr></table></figure></p>
<p>上述规则没有使用隐晦规则,对于每一个.o文件的生成都写了一条规则语句.若使用隐晦规则推导，上述makefile可写为如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>从上面的隐晦规则可以看出,对于.o文件的生成命令，makefile都可以由隐晦规则” $(CC) -c $(CFLAGS) -o $@ $&lt;”推导出。即如当目标需要a.隐晦规则将推导出命令”g++ -c $(CFLAGS) -o a.o a.c”用于生成该目标.</p>
<h2 id="makefile执行过程"><a href="#makefile执行过程" class="headerlink" title="makefile执行过程"></a>makefile执行过程</h2><p>由上一节中的makefile简单说一下makefile的执行规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SOURCE := $(shell find ./ -type f -name *.c)</div><div class="line">OBJECTS := $(patsubst *.c,*.o,$(SOURCE))</div><div class="line"></div><div class="line">target : $(OBJECTS)</div><div class="line">  g++ -o $@ $^ $(LIB) $(INC) $(LINKER)</div><div class="line">%.o:%.c</div><div class="line">   $(CC) -c $(CFLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure>
<p>makefile中首先声明了变量SOURCE和OBJECTS，SOURCE是当前文件夹下的所有.c文件的集合，OBJECTS是所有.c文件对应的目标文件.o的集合.</p>
<p>执行过程:<br>首先,目标target依赖所有的目标文件.o，即a.o,b.o,c.o。当需要依赖a.o时，makefile会根据隐晦规则自动推导出生成a.o文件的命令，(“g++ -c $(CFLAGS) -o a.o a.c”)，生成a.o；类似的也会根据同样的过程生成b.o和c.o文件,这三个文件生成之后,再根据上述规则生成target。</p>
<h2 id="makefile中常用函数"><a href="#makefile中常用函数" class="headerlink" title="makefile中常用函数"></a>makefile中常用函数</h2><h3 id="wildcard函数"><a href="#wildcard函数" class="headerlink" title="wildcard函数"></a>wildcard函数</h3><p>函数参数:一个正则表达式<br>函数功能:wildcard的中文意思是通配符，它的功能类似于正则表达式，用于展开一列所有符合其参数描述的文件名，文件之间用空格分割。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SOURCE=$(wildcard *.cpp)</div></pre></td></tr></table></figure></p>
<p>此时SOURCE的值为所有的以.cpp为后缀的文件集合，以空格隔开。</p>
<h3 id="patsubst函数"><a href="#patsubst函数" class="headerlink" title="patsubst函数"></a>patsubst函数</h3><p>函数参数:　第一个是需要匹配的样式，第二个是表示用什么替换它，第三个被处理的以空格隔开的字符串。<br>函数功能:其功能是一个匹配替换的函数(pattern substitute)。</p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#TARGET表示与SOURCE中同名的目标文件.</div><div class="line">TARGET = $(patsubst *.cpp, *.o, $(SOURCE))</div></pre></td></tr></table></figure></p>
<h3 id="subst函数"><a href="#subst函数" class="headerlink" title="subst函数"></a>subst函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:字符串替换,将text中的from 替换为to<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值：this is b</div><div class="line">$(subst a, b, this is a)</div></pre></td></tr></table></figure></p>
<h3 id="strip函数"><a href="#strip函数" class="headerlink" title="strip函数"></a>strip函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(strip &lt;string&gt;)</div></pre></td></tr></table></figure>
<p>功能:去除<string>头部和尾部的空格<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#源字符串为&quot;a b c &quot;，返回值为&quot;a b c&quot;</div><div class="line">$(strip a b c )</div></pre></td></tr></table></figure></string></p>
<h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(filter &lt;pattern...&gt;,&lt;text...&gt;)</div></pre></td></tr></table></figure>
<p>功能:过滤特定模式的字符串<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#如source为a.c b.s c.h,则下列的返回值为a.c b.s</div><div class="line">$(filter *.c *.s, $(source))</div></pre></td></tr></table></figure></p>
<h3 id="word函数"><a href="#word函数" class="headerlink" title="word函数"></a>word函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(word &lt;n&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能:取单词函数。取出<text>中的第n个单词(从1开始)，若越界，返回为空</text></p>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为bar</div><div class="line">$(word 2,foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="words函数"><a href="#words函数" class="headerlink" title="words函数"></a>words函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(words &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:统计字符串中单词的个数,返回个数<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#此函数返回值为3</div><div class="line">$(word foo bar fun)</div></pre></td></tr></table></figure></p>
<h3 id="wordlist函数"><a href="#wordlist函数" class="headerlink" title="wordlist函数"></a>wordlist函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</div></pre></td></tr></table></figure>
<p>功能:取<text>中s-e个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回bar fun</div><div class="line">$(wordlist 2,3, foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="firstword函数"><a href="#firstword函数" class="headerlink" title="firstword函数"></a>firstword函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(firstword &lt;text&gt;)</div></pre></td></tr></table></figure>
<p>函数功能：取<text>中的首个单词<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为foo</div><div class="line">$(firstword foo bar fun)</div></pre></td></tr></table></figure></text></p>
<h3 id="dir函数"><a href="#dir函数" class="headerlink" title="dir函数"></a>dir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(dir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的目录（即/前面的部分）。如没有/，则返回./<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为/home/ ./</div><div class="line">$(dir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="notdir函数"><a href="#notdir函数" class="headerlink" title="notdir函数"></a>notdir函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(notdir ...)</div></pre></td></tr></table></figure>
<p>功能：取给定文件名序列中的取出非目录部分（即/后面的部分）。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值为test testfile</div><div class="line">$(notdir /home/test testfile)</div></pre></td></tr></table></figure></p>
<h3 id="suffix函数"><a href="#suffix函数" class="headerlink" title="suffix函数"></a>suffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(suffix ..)</div></pre></td></tr></table></figure>
<p>功能:取后缀函数,若没有后缀返回为空<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:.c .c</div><div class="line">$(suffix a.c b.c)</div></pre></td></tr></table></figure></p>
<h3 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(basename ...)</div></pre></td></tr></table></figure>
<p>功能:取前缀函数,包括目录。<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:/home/test a</div><div class="line">$(basename /home/test.cpp a.cpp)</div></pre></td></tr></table></figure></p>
<h3 id="addsuffix函数"><a href="#addsuffix函数" class="headerlink" title="addsuffix函数"></a>addsuffix函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addsuffix &lt;suffix&gt; &lt;name....&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列<name...>添加后缀名<suffix><br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:a.c b.c c.c</div><div class="line">$(addsuffix .c a b c)</div></pre></td></tr></table></figure></suffix></name...></p>
<h3 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(addprefix &lt;prefix&gt; &lt;name...&gt;)</div></pre></td></tr></table></figure>
<p>功能：给指定文件序列添加前缀<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#返回值:src/a src/b src/c</div><div class="line">$(addprefix src/ a b c)</div></pre></td></tr></table></figure></p>
<h3 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(join &lt;list1&gt; &lt;list2&gt;)</div></pre></td></tr></table></figure>
<p>功能:将两个字符串中的list对应项连接<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#返回值:an 2b 3</div><div class="line">$(join 1 2 3, a b)</div><div class="line">#返回值:1a 2b c</div><div class="line">$(join 1 2, a b c)</div></pre></td></tr></table></figure></p>
<h2 id="makefile中链接静态库顺序问题"><a href="#makefile中链接静态库顺序问题" class="headerlink" title="makefile中链接静态库顺序问题"></a>makefile中链接静态库顺序问题</h2><p>在链接静态库的时候，如果多个静态库之间存在依赖关系，则有依赖的静态库之间存在顺序问题，若顺序出现错误，则可能出现函数未定义或符号找不到等错误。</p>
<p>静态库链接的顺序的原则是：<strong>被依赖的库一定要放在后面</strong>，因为makefile在链接静态库时的顺序是从右往左(或从后向前).如libb.a依赖于liba.a，此时的链接顺序应该是:-Llibb.a -Lliba.a。</p>
<p>会出现上述问题的原因是:我们在生成静态库的时候并未把依赖库的定义编到生成的库中。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gcc -c a.c</div><div class="line">ar cr liba.a a.o</div><div class="line">gcc -c b.c</div><div class="line">ar cr libb.a b.o # 虽然libb.a使用到了liba.o中的一些函数,但并不会将它们的定义包含进来,所以在链接test时需要指定这两个库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;a href=&quot;#makefile自动变量与隐晦规则推导&quot; class=&quot;headerlink&quot; title=&quot;makefile自动变量与隐晦规则推导&quot;&gt;&lt;/a&gt;makefile自动变量与隐晦规则推导&lt;/h1&gt;&lt;p&gt;ma
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
      <category term="自动变量" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8F%98%E9%87%8F/"/>
    
      <category term="规则推导" scheme="http://yoursite.com/tags/%E8%A7%84%E5%88%99%E6%8E%A8%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>UnixIPC 机制和key_t本质类型</title>
    <link href="http://yoursite.com/2017/09/20/UnixIPC%E4%B8%ADkey_t%E7%B1%BB%E5%9E%8B%E6%9C%AC%E8%B4%A8/"/>
    <id>http://yoursite.com/2017/09/20/UnixIPC中key_t类型本质/</id>
    <published>2017-09-20T12:09:08.000Z</published>
    <updated>2017-09-24T10:16:56.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="System-V-IPC-机制和key-t本质类型"><a href="#System-V-IPC-机制和key-t本质类型" class="headerlink" title="System V IPC 机制和key_t本质类型"></a>System V IPC 机制和key_t本质类型</h1><h2 id="System-V三种IPC机制"><a href="#System-V三种IPC机制" class="headerlink" title="System V三种IPC机制"></a>System V三种IPC机制</h2><p>System V IPC包括三种不同的通信机制</p>
<ul>
<li>消息队列:消息队列类似于管道,但是又有很大的差别。第一,消息队列是有边界的，所以消息队列的通信机制是通过消息进行传递，而管道是通过字节流进行通信。第二，每条消息包括一个完整的整形字段，消息队列可以通过类型来选择消息。</li>
<li>信号量:用于同步两个进程。</li>
<li>共享内存:共享内存允许两个进程共享同一个内存段。即一块内存被映射到不同进程的虚拟内存中。</li>
</ul>
<h2 id="key-t本质"><a href="#key-t本质" class="headerlink" title="key_t本质"></a>key_t本质</h2><p>System V系统调用都有一个相关的get系统调用，它与文件io中的open函数类似，不同的是它的参数是一个整数，给定一个整数之后，系统会做以下操作:</p>
<ul>
<li>使用给定key创建一个新的IPC对象，并将IPC对象标识key_t返回给调用者.</li>
<li>若该key对应的IPC对象存在，直接将标识返回给调用者，相当于使用key换取标识,而不做创建操作.</li>
</ul>
<p>上述IPC对象的标识类型为key_t。key_t的本质是什么?我们可以通过grep命令追踪到</p>
<p>在文件/usr/include/sys/ipc.h中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#ifndef __key_t_defined</div><div class="line">typedef __key_t key_t;</div><div class="line"># define __key_t_defined</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>在文件/usr/include/bits/types.h中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */</div></pre></td></tr></table></figure></p>
<p>在文件/usr/include/bits/typesizes.h中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define __KEY_T_TYPE            __S32_TYPE</div></pre></td></tr></table></figure>
<p>在文件中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define __S32_TYPE              int</div></pre></td></tr></table></figure>
<p>故从上面的追踪，可以看出key_t的本质为int类型.</p>
<h2 id="获取key-t方法"><a href="#获取key-t方法" class="headerlink" title="获取key_t方法"></a>获取key_t方法</h2><p>获取ket_t的方法三种</p>
<ul>
<li>随机选取一个整数值作为key值，多个进程共享一个key值。注意此时不能使用已经存在的key</li>
<li>在创建IPC对象的get方法中用IPC_PRIVATE作为key值，这样会导致每个调用都会创建一个新的IPC对象</li>
<li>使用ftok函数生成一个key,这个方法产生的key接近唯一。</li>
</ul>
<h3 id="IPC-PRIVATE"><a href="#IPC-PRIVATE" class="headerlink" title="IPC_PRIVATE"></a>IPC_PRIVATE</h3><p>IPC_PRIVATE本质上为0的宏定义.使用方法是直接使用IPC_PRIVATE作为key生成一个IPC对象。这种做法保证每次产生的都是全新的IPC对象。<br>这种做法适用于在父进程fork前创建IPC对象，从而达到子进程继承IPC对象的目的。</p>
<h3 id="ftok生成key"><a href="#ftok生成key" class="headerlink" title="ftok生成key"></a>ftok生成key</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型:"></a>函数原型:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="keyword">key_t</span> ftok(<span class="keyword">char</span>* pathname, <span class="keyword">int</span> proj);</div></pre></td></tr></table></figure>
<h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能:"></a>函数功能:</h4><p>此函数的功能是根据pathname和proj的值生成key，该算法只使用proj的最低的8个有效位，应用程序必须确保pathname引用一个可以应用stat()的既有文件。否则该函数会返回-1。</p>
<p>在linux中，key_t一般是32位的值。它通过取<strong>proj参数的最低８个有效位，包含该文件所属的文件系统的设备的设备号的最低8个有效位以及pathname所引用文件的inode号的最低16个有效位组合而成，这样保证了唯一性</strong>。所以从上面可以看出，对于同意个文件的不同路径(inode值相同),proj值相同，此时产生的key是相同的。　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;System-V-IPC-机制和key-t本质类型&quot;&gt;&lt;a href=&quot;#System-V-IPC-机制和key-t本质类型&quot; class=&quot;headerlink&quot; title=&quot;System V IPC 机制和key_t本质类型&quot;&gt;&lt;/a&gt;System V IP
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ipc" scheme="http://yoursite.com/tags/ipc/"/>
    
      <category term="key_t" scheme="http://yoursite.com/tags/key-t/"/>
    
  </entry>
  
  <entry>
    <title>UnixIPC 关联数据结构与对象权限</title>
    <link href="http://yoursite.com/2017/09/20/UnixIPC%E5%85%B3%E8%81%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/09/20/UnixIPC关联数据结构与对象权限/</id>
    <published>2017-09-20T12:09:08.000Z</published>
    <updated>2017-09-24T11:34:39.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UnixIPC-关联数据结构与对象权限"><a href="#UnixIPC-关联数据结构与对象权限" class="headerlink" title="UnixIPC 关联数据结构与对象权限"></a>UnixIPC 关联数据结构与对象权限</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UnixIPC-关联数据结构与对象权限&quot;&gt;&lt;a href=&quot;#UnixIPC-关联数据结构与对象权限&quot; class=&quot;headerlink&quot; title=&quot;UnixIPC 关联数据结构与对象权限&quot;&gt;&lt;/a&gt;UnixIPC 关联数据结构与对象权限&lt;/h1&gt;
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ipc" scheme="http://yoursite.com/tags/ipc/"/>
    
      <category term="ipc_perm" scheme="http://yoursite.com/tags/ipc-perm/"/>
    
  </entry>
  
  <entry>
    <title>Linux中umask深入理解</title>
    <link href="http://yoursite.com/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/09/13/Linux中umash深入理解/</id>
    <published>2017-09-13T06:53:01.000Z</published>
    <updated>2017-09-13T06:53:32.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux中umask深入理解"><a href="#Linux中umask深入理解" class="headerlink" title="Linux中umask深入理解"></a>Linux中umask深入理解</h1><p>umask(user file-creatiopn mode mask)为用户文件创建掩码，是创建文件或文件夹时默认权限的基础。通常我们可以使用chmod修改linux中文件的权限.umask的作用与chmod的效果相反，具体看下面。</p>
<blockquote>
<p>若没有文件掩码时，文件的默认权限为0666,文件夹的默认权限为0777。</p>
<p>原因:</p>
<ul>
<li>创建文件一般是用来读写，所以默认情况下所有用户都具有读写权限，但是没有可执行权限，所以文件创建的默认权限为0666</li>
<li>而文件夹的x权限表示的是打开权限，所以这个权限必须要有，所以文件夹的默认权限为0777。</li>
</ul>
</blockquote>
<h2 id="用户掩码作用"><a href="#用户掩码作用" class="headerlink" title="用户掩码作用"></a>用户掩码作用</h2><p>上述的权限是在没有umask情况下的默认权限。但是系统为了保护用户创建文件和文件夹的权限,此时系统会有一个默认的用户掩码(umask)，大多数的Linux系统的默认掩码为022。用户掩码的作用是用户在创建文件时从文件的默认权限中去除掩码中的权限。所以文件创建之后的权限实际为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">＃文件创建权限</div><div class="line">默认权限(文件0666,文件夹0777)-umask</div></pre></td></tr></table></figure></p>
<p>所以在用户不修改umask的情况下，创建文件的权限为：0666-0022=0644。创建文件夹的权限为：0777-0022=0755</p>
<h2 id="查看与修改默认掩码"><a href="#查看与修改默认掩码" class="headerlink" title="查看与修改默认掩码"></a>查看与修改默认掩码</h2><p>查看用户掩码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#以数字方式查看掩码</div><div class="line">umask</div><div class="line"># 以符号形式查看掩码</div><div class="line">umask -S</div></pre></td></tr></table></figure></p>
<p>可以使用umask命令直接修改掩码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">umask 0000</div></pre></td></tr></table></figure></p>
<p>上述方法修改的掩码只在当前tty中生效.若要全局生效,可以讲umask值写在/etc/profile或者.bashrc中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux中umask深入理解&quot;&gt;&lt;a href=&quot;#Linux中umask深入理解&quot; class=&quot;headerlink&quot; title=&quot;Linux中umask深入理解&quot;&gt;&lt;/a&gt;Linux中umask深入理解&lt;/h1&gt;&lt;p&gt;umask(user file-cr
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="umask" scheme="http://yoursite.com/tags/umask/"/>
    
  </entry>
  
  <entry>
    <title>Unix高级编程之signal</title>
    <link href="http://yoursite.com/2017/09/10/Unix%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8Bsignal/"/>
    <id>http://yoursite.com/2017/09/10/Unix高级编程之signal/</id>
    <published>2017-09-09T21:24:40.000Z</published>
    <updated>2017-09-10T10:56:47.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix高级编程之signal"><a href="#Unix高级编程之signal" class="headerlink" title="Unix高级编程之signal"></a>Unix高级编程之signal</h1><p>signal函数相关的细节描述详见另外两篇篇博客，这里不详细赘述:<br><a href="https://langzi989.github.io/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/" target="_blank" rel="external">https://langzi989.github.io/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</a><br><a href="https://langzi989.github.io/2017/05/04/Wait%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">https://langzi989.github.io/2017/05/04/Wait%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</a></p>
<h2 id="显示信号的描述"><a href="#显示信号的描述" class="headerlink" title="显示信号的描述"></a>显示信号的描述</h2><p>信号的个数可以用宏<strong>NSIG</strong>获取。</p>
<p>显示信号的描述有三种方法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//first method</span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strsignal</span><span class="params">(<span class="keyword">int</span> sig)</span></span>;</div><div class="line"><span class="comment">//second method,</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">psignal</span><span class="params">(<span class="keyword">int</span> sig, <span class="keyword">char</span>* msg)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//third memthod</span></div><div class="line">sys_siglist[sig];</div></pre></td></tr></table></figure></p>
<h3 id="上述三种方法的区别"><a href="#上述三种方法的区别" class="headerlink" title="上述三种方法的区别"></a>上述三种方法的区别</h3><p>sys_siglist是直接存储信号描述的数组，一般情况下，推荐使用strsignal。</p>
<p>strsignal和psignal函数对locale敏感，会打印出当地的语言。<br>调用psignal会在本地的错误出输出流输出，msg:strsignalmsg；</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//此时错误数据流将会打印出:SIGINT:Interrupt</div><div class="line">psignal(SIGINT, &quot;SIGINT&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h2><p>许多相关的系统调用涉及到一组不同的信号，这时候需要信号集。linux中使用sigset_t结构体来表示信号集。一般情况，信号集是使用掩码实现的，但是可能有一些是其他实现方式。<br>信号集结构体相关的函数.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//初始化空信号集。注意不可使用memset或者静态变量全局变量初始化信号集为空，这样会出问题。因为不是所有的信号集都是通过掩码实现的</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigemptyset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//初始化信号集包括所有的信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigfillset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//向信号集中添加信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaddset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//从信号集中去除信号</span></div><div class="line"><span class="comment">//0出错，1成功</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigdelset</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//检查某一信号是不是在当前信号集中。返回1在,０不在</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigismember</span><span class="params">(<span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">int</span> sig)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//以下三个为GNU C中的非标准函数，</span></div><div class="line"></div><div class="line">＃define _GNU_SOURCE</div><div class="line"><span class="comment">//对两个信号集作交集存储于dest中</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigandset</span><span class="params">(<span class="keyword">sigset_t</span>* dest, <span class="keyword">sigset_t</span>* left, <span class="keyword">sigset_t</span>* right)</span></span>;</div><div class="line"><span class="comment">//对两个信号集做并集存储于dest中</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigorset</span><span class="params">(<span class="keyword">sigset_t</span>* dest, <span class="keyword">sigset_t</span>* left, <span class="keyword">sigset_t</span>* right)</span></span>;</div><div class="line"><span class="comment">//判断信号集是否为空</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigisemptyset</span><span class="params">(<span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<h2 id="信号掩码-进程中阻塞信号传递"><a href="#信号掩码-进程中阻塞信号传递" class="headerlink" title="信号掩码(进程中阻塞信号传递)"></a>信号掩码(进程中阻塞信号传递)</h2><p>内核会为每个进程维护一个信号掩码(标识一组信号),当一个信号被传递到该进程的时候，若该信号在信号掩码中,进程会阻塞该信号的传递，直到将该信号从信号掩码中剔除。</p>
<p>向信号掩码中添加一个信号的方式有以下几种：</p>
<ul>
<li>当调用信号处理器程序的时候，可将引发该调用的信号自动添加到信号掩码中，这取决于sigaction函数在安装信号时使用的标志。</li>
<li>使用sigaction函数建立信号处理程序时，可以指定一组额外信号,当调用该处理器程序时将阻塞。</li>
<li>使用<strong>sigprocmask函数</strong>修改进程的信号掩码。</li>
</ul>
<h3 id="sigprocmask函数"><a href="#sigprocmask函数" class="headerlink" title="sigprocmask函数"></a>sigprocmask函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigprocmask</span><span class="params">(<span class="keyword">int</span> how, <span class="keyword">const</span> <span class="keyword">sigset_t</span>* <span class="built_in">set</span>, <span class="keyword">sigset_t</span>* old)</span></span>;</div></pre></td></tr></table></figure>
<p>参数:</p>
<ul>
<li>how : 指定修改信号掩码的方式,有三种方式<ul>
<li>SIG_BLOCK : 向指定信号中添加指定信号.</li>
<li>SIG_UNBLOCK:　将指定信号从原有的信号掩码中移除。若被移除的信号掩码不存在不报错</li>
<li>SIG_SETMASK:  直接设置(赋值),覆盖原有的值</li>
</ul>
</li>
<li>set :  需要设置的新的信号掩码集</li>
<li>old:  旧的信号掩码集。可在设置信号掩码集之后回复原有的信号掩码。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">time_t</span> start = time(<span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">sigset_t</span> new_set, pre;</div><div class="line">	sigemptyset(&amp;new_set);</div><div class="line">	sigaddset(&amp;new_set, SIGINT);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;new_set, &amp;pre) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; <span class="string">"sigprocmask set error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">		sleep(<span class="number">1</span>);</div><div class="line">		<span class="keyword">time_t</span> end = time(<span class="literal">NULL</span>);</div><div class="line">		<span class="keyword">if</span> (end - start &gt;= <span class="number">15</span>) &#123;</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hahah 接触阻塞"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">			sigprocmask(SIG_SETMASK, &amp;pre, <span class="literal">NULL</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sigpending获取正在等待状态的信号"><a href="#sigpending获取正在等待状态的信号" class="headerlink" title="sigpending获取正在等待状态的信号"></a>sigpending获取正在等待状态的信号</h2><p>若进程接收信号被阻塞之后，我们希望获取被阻塞的信号，则可以使用sigpending函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigpending</span><span class="params">(<span class="keyword">sigset_t</span>* <span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>使用此函数的场景是:若某个进程接收到被阻塞的信号,如果希望这些信号被移出阻塞队列,此时可以通过sigpending获取被阻塞的信号，然后将此信号的处理器函数IGNORE,并将其剔除信号掩码即可。</p>
<p><strong>在信号被阻塞的时候，不对信号做排队处理，即即使进程阻塞了100个SIGINT信号，此时当SIGINT从信号掩码中去除时，该进程接收的还是只是一个SIGINT信号。</strong></p>
<h2 id="sigaction函数"><a href="#sigaction函数" class="headerlink" title="sigaction函数"></a>sigaction函数</h2><p>除了signal函数之外,sigaction系统调用是设置信号处理的另一个选择。sigaction和signal函数相比更加灵活和具有可移植性。sigaction允许在不改变信号处理器程序的情况下获取信号的默认处理方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix高级编程之signal&quot;&gt;&lt;a href=&quot;#Unix高级编程之signal&quot; class=&quot;headerlink&quot; title=&quot;Unix高级编程之signal&quot;&gt;&lt;/a&gt;Unix高级编程之signal&lt;/h1&gt;&lt;p&gt;signal函数相关的细节描述详见另
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="sigaction" scheme="http://yoursite.com/tags/sigaction/"/>
    
  </entry>
  
  <entry>
    <title>Linux中ulimit命令简单使用</title>
    <link href="http://yoursite.com/2017/09/09/Linux%E4%B8%ADulimit%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/09/Linux中ulimit命令简单使用/</id>
    <published>2017-09-09T02:05:01.000Z</published>
    <updated>2017-09-09T02:06:40.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux中ulimit命令简单使用"><a href="#linux中ulimit命令简单使用" class="headerlink" title="linux中ulimit命令简单使用"></a>linux中ulimit命令简单使用</h1><blockquote>
<p>系统性能是一个受关注的话题，如何通过最简单的设置来实现有效的性能调优，如何在有限资源的条件下保证程序的运作，ulimit是我们在处理问题的时候经常使用的一种手段。ulimit是一种linux系统内置的功能。下面将列举ulimit的一些常用关键字和简单用法。</p>
</blockquote>
<h2 id="ulimit命令参数"><a href="#ulimit命令参数" class="headerlink" title="ulimit命令参数"></a>ulimit命令参数</h2><p>ulimit参数命令</p>
<blockquote>
<p>注意ulimit设置分软硬区别，加-H为硬,-S为软.默认查询是显示的是软，但使用ulimit进行设置的时候为软硬都作用。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-H</td>
<td style="text-align:left">设置硬资源限制，一旦设置不能增加。</td>
<td style="text-align:left">ulimit – Hs 64；限制硬资源，线程栈大小为 64K。</td>
</tr>
<tr>
<td style="text-align:left">-S</td>
<td style="text-align:left">设置软资源限制，设置后可以增加，但是不能超过硬资源设置。</td>
<td style="text-align:left">ulimit – Sn 32；限制软资源，32 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:left">-a</td>
<td style="text-align:left">显示当前所有的 limit 信息。</td>
<td style="text-align:left">ulimit – a；显示当前所有的 limit 信息。</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">最大的 core 文件的大小， 以 blocks 为单位。</td>
<td style="text-align:left">ulimit – c unlimited； 对生成的 core 文件的大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">进程最大的数据段的大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit -d unlimited；对进程的数据段大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:left">进程可以创建文件的最大值，以 blocks 为单位。</td>
<td style="text-align:left">ulimit – f 2048；限制进程可以创建的最大文件大小为 2048 blocks。</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">最大可加锁内存大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – l 32；限制最大可加锁内存大小为 32 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-m</td>
<td style="text-align:left">最大内存大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – m unlimited；对最大内存不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">可以打开最大文件描述符的数量。</td>
<td style="text-align:left">ulimit – n 128；限制最大可以使用 128 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">管道缓冲区的大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – p 512；限制管道缓冲区的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">线程栈大小，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – s 512；限制线程栈的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">最大的 CPU 占用时间，以秒为单位。</td>
<td style="text-align:left">ulimit – t unlimited；对最大的 CPU 占用时间不进行限制。</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">用户最大可用的进程数。</td>
<td style="text-align:left">ulimit – u 64；限制用户最多可以使用 64 个进程。</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">进程最大可用的虚拟内存，以 Kbytes 为单位。</td>
<td style="text-align:left">ulimit – v 200000；限制最大可用的虚拟内存为 200000 Kbytes。</td>
</tr>
</tbody>
</table>
<h2 id="ulimit参数作用范围"><a href="#ulimit参数作用范围" class="headerlink" title="ulimit参数作用范围"></a>ulimit参数作用范围</h2><ul>
<li>针对单个tty生效:在tty中直接运行ulimit命令的作用范围是只对当前tty生效</li>
<li>针对单个用户生效:将命令添加到.bashrc中,将对当前用户生效</li>
<li>针对所有用户生效:将命令添加到/etc/security/limits.conf中，可以设置针对特定用户或者所有用户的限制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux中ulimit命令简单使用&quot;&gt;&lt;a href=&quot;#linux中ulimit命令简单使用&quot; class=&quot;headerlink&quot; title=&quot;linux中ulimit命令简单使用&quot;&gt;&lt;/a&gt;linux中ulimit命令简单使用&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ulimit" scheme="http://yoursite.com/tags/ulimit/"/>
    
  </entry>
  
  <entry>
    <title>C++函数指针学习</title>
    <link href="http://yoursite.com/2017/09/08/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/08/C++函数指针学习/</id>
    <published>2017-09-08T09:47:20.000Z</published>
    <updated>2017-09-09T02:40:11.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-函数指针学习"><a href="#C-函数指针学习" class="headerlink" title="C++函数指针学习"></a>C++函数指针学习</h1><h2 id="使用函数指针的优点"><a href="#使用函数指针的优点" class="headerlink" title="使用函数指针的优点"></a>使用函数指针的优点</h2><p>使用函数指针有助于我们设计出更优秀，更简洁更高效的程序。在下面的情景中我们常用到函数指针:</p>
<ul>
<li>使用函数指针作为参数</li>
<li>使用函数指针作为返回值</li>
<li>使用函数指针作为回调函数</li>
<li>使用函数指针数组</li>
<li>类的静态方法和非静态方法的函数指针</li>
<li>使用函数指针实现动态绑定</li>
<li>在结构体中定义函数</li>
</ul>
<h2 id="使用函数指针提高函数的效率"><a href="#使用函数指针提高函数的效率" class="headerlink" title="使用函数指针提高函数的效率"></a>使用函数指针提高函数的效率</h2><p>当通过switch case多用多个相同类型的函数的时候，这个时候使用函数指针可以大大简化函数代码并可以明显的提高程序的执行效率。例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;time.h&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sys/time.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define StartTime(id)  struct timeval __now1105##id;\</div><div class="line">                       gettimeofday(&amp;__now1105##id, 0);</div><div class="line">#define EndTime(id) struct timeval __now21105##id; \</div><div class="line">					      gettimeofday(&amp;__now21105##id, 0); \</div><div class="line">						printf(&quot;timer_%s spend time:%d us\n&quot;,#id,(__now21105##id.tv_sec-__now1105##id.tv_sec)* 1000000 + (__now21105##id.tv_usec-__now1105##id.tv_usec));</div><div class="line"></div><div class="line">double add(double a, double b) &#123;</div><div class="line">	return a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double sub(double a, double b) &#123;</div><div class="line">	return a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double multi(double a, double b) &#123;</div><div class="line">	return a * b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double div(double a, double b) &#123;</div><div class="line">	return a/b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">typedef double (*op)(double, double);</div><div class="line"></div><div class="line">void func1(double a, double b, int flag) &#123;</div><div class="line">	switch(flag) &#123;</div><div class="line">		case 0:</div><div class="line">			add(a, b);</div><div class="line">			break;</div><div class="line">		case 1:</div><div class="line">			sub(a, b);</div><div class="line">			break;</div><div class="line">		case 2:</div><div class="line">			multi(a, b);</div><div class="line">			break;</div><div class="line">		case 3:</div><div class="line">			div(a, b);</div><div class="line">			break;</div><div class="line">		default:</div><div class="line">			break;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用函数指针调用函数</div><div class="line">void func2(double a, double b, op cb) &#123;</div><div class="line">	cb(a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">	StartTime(func1);</div><div class="line">		for (int i = 0; i &lt; 100000; i++) &#123;</div><div class="line">			func1(0.2, 0.034, 3);</div><div class="line">		&#125;</div><div class="line">	EndTime(func1);</div><div class="line"></div><div class="line">	StartTime(func2);</div><div class="line">		for (int i = 0; i &lt; 100000; i++) &#123;</div><div class="line">			func2(0.2, 0.034, multi);</div><div class="line">		&#125;</div><div class="line">	EndTime(func2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上面可以看出,由于上述switch,case中调用的函数类型（返回值类型，参数个数以及对应的类型）完全一致，我们将函数指针以参数的形式传到处理函数中。<br>运行上述函数的结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">timer_func1 spend time:2861 us</div><div class="line">timer_func2 spend time:2178 us</div></pre></td></tr></table></figure>
<p>可以看出使用函数指针的效率远远高于switch case</p>
<h2 id="函数指针用做回调函数"><a href="#函数指针用做回调函数" class="headerlink" title="函数指针用做回调函数"></a>函数指针用做回调函数</h2><blockquote>
<p>来源于wiki<br>在计算机程序设计中，回调函数是指通过函数参数传递到其他代码的，某一块可执行代码的引用。这一设计允许底层代码调用在高层定义的子程序。如Linux C中的signal函数就是这样一个例子。</p>
</blockquote>
<p>signal底层的其中一个实现版本如下:由其实现可以看出信号处理的回调函数的主要功能是将处理信号的函数指针替换为用户高层自定义的函数地址fun，从而达到当接收到该信号时底层代码调用高层定义代码的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Sigfunc *</div><div class="line">signal(int signo, Sigfunc *func)</div><div class="line">&#123;</div><div class="line">	struct sigaction	act, oact;</div><div class="line"></div><div class="line">	act.sa_handler = func;</div><div class="line">	sigemptyset(&amp;act.sa_mask);</div><div class="line">	act.sa_flags = 0;</div><div class="line">	if (signo == SIGALRM) &#123;</div><div class="line">#ifdef	SA_INTERRUPT</div><div class="line">		act.sa_flags |= SA_INTERRUPT;</div><div class="line">#endif</div><div class="line">	&#125; else &#123;</div><div class="line">		act.sa_flags |= SA_RESTART;</div><div class="line">	&#125;</div><div class="line">	if (sigaction(signo, &amp;act, &amp;oact) &lt; 0)</div><div class="line">		return(SIG_ERR);</div><div class="line">	return(oact.sa_handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们使用signal函数的时候,如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;signal.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">void signalcb(int signum) &#123;</div><div class="line">  printf(&quot;this is the signal:%d&quot;, signum);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  signal(SIGINT, signalcb);</div><div class="line">  pause();</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="函数指针的本质及声明方法以及赋值"><a href="#函数指针的本质及声明方法以及赋值" class="headerlink" title="函数指针的本质及声明方法以及赋值"></a>函数指针的本质及声明方法以及赋值</h2><h3 id="函数指针的本质"><a href="#函数指针的本质" class="headerlink" title="函数指针的本质"></a>函数指针的本质</h3><p>函数指针类似于数据指针，其本质实质上是一类函数（返回值类型相同，参数个数以及对应的参数类型相同）的入口地址，即该<strong>可执行代码在内存中的起始地址</strong>。函数指针可以让我们通过函数地址去调用该函数。有利于实现函数的动态绑定，即在运行时才决定去调用哪个函数。</p>
<h3 id="函数指针的声明方法"><a href="#函数指针的声明方法" class="headerlink" title="函数指针的声明方法"></a>函数指针的声明方法</h3><p>函数指针的声明方法有两种，包括:</p>
<ul>
<li>普通函数的函数指针和类静态成员函数的函数指针</li>
<li>类非静态成员函数的函数指针</li>
</ul>
<p>普通函数的函数指针和类静态成员函数的函数指针:<br>int (<em>funptr)(int  qa, int qb);<br>类非静态成员函数的函数指针：<br>int MyClass::(</em>funptr)(int  qa, int qb);</p>
<p><strong>注意上述函数指针声明时(*funptr)中的括号不能省略，若省略，有可能会产生歧义，其意义就变成了返回值为int*的函数定义了</strong></p>
<blockquote>
<p>上述两种函数指针声明不兼容的原因如下:(《深度探索C++对象模型》)<br>获取类的静态和非静态函数的函数指针的地址都是其在内存中实际的地址。那为什么非静态成员的指针需要绑定(指明类)？原因是类的非静态成员需要操作类的数据成员,所以类的非静态成员需要绑定this指针找到类的数据成员。故对nonstatic函数取地址是不完整的。</p>
</blockquote>
<h3 id="函数指针的赋值与使用"><a href="#函数指针的赋值与使用" class="headerlink" title="函数指针的赋值与使用"></a>函数指针的赋值与使用</h3><h4 id="函数指针赋值"><a href="#函数指针赋值" class="headerlink" title="函数指针赋值"></a>函数指针赋值</h4><p>对于普通指针和类的静态成员指针，有两种赋值方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">funptr = fnc1</div><div class="line">funptr = &amp;fun1</div></pre></td></tr></table></figure></p>
<p>对于类的非静态成员指针，只能用上面第二种形式赋值。为了保证形式的一致性和避免二义性，一般<strong>统一使用取地址符号进行赋值</strong>可避免错误出现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">funptr = &amp;classInstance.func();</div></pre></td></tr></table></figure></p>
<h4 id="函数指针使用"><a href="#函数指针使用" class="headerlink" title="函数指针使用"></a>函数指针使用</h4><p>函数指针的使用类似于赋值。<br>对于普通指针和类的静态成员函数指针的调用，有两种调用方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">funptr(1,2);</div><div class="line"></div><div class="line">(*funptr)(1,2);</div></pre></td></tr></table></figure></p>
<p>对于类的静态成员函数，只能用上述第二种方式进行调用，为了保持一致性和避免二义性，一般统一使用<strong>使用*来解引用函数指针进行调用</strong>.</p>
<h2 id="函数指针作为参数"><a href="#函数指针作为参数" class="headerlink" title="函数指针作为参数"></a>函数指针作为参数</h2><p>函数指针是一个类型，将函数指针作为参数传入函数中与其他参数类似。使用方式与上述<strong>函数指针用做回调函数</strong>中signal接收参数的方式相同。这里不再详解</p>
<h3 id="函数指针作为返回值"><a href="#函数指针作为返回值" class="headerlink" title="函数指针作为返回值"></a>函数指针作为返回值</h3><p>既然函数指针是函数的入口地址,所以函数指针也可以作为函数的返回值返回。不过函数指针作为函数的返回值的写反比较复杂。<br>若一个函数func只有一个参数int, 其返回值类型是float (*) (float, float)；则其函数原型如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float (*func(int op)) (float, float);</div></pre></td></tr></table></figure></p>
<p>函数指针作为函数返回值的原则是,将函数名以及参数写到*后，函数指针的返回值放在最前面，函数指针的参数放在最后面。</p>
<p>由上面的知识我们可以分析一下signal函数原型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void (*signal)(int signo,void (*func)(int)))(int);</div></pre></td></tr></table></figure></p>
<p>其定义了一个有两个参数分别为int和void (<em>func)(int)，返回值为void (</em>func)(int)的函数。</p>
<p>其本质上是将函数处理指针替换为用户自定义的函数指针。那为什么需要返回值为void (<em>func)(int)呢?原因是<em>*signal函数的返回值是旧的信号处理函数的指针，我们可以通过这个指针暂时改变signal函数处理信号的方式。之后可以通过返回的指针恢复该信号默认的处理方式。</em></em></p>
<blockquote>
<p>注意:signal的信号处理其函数中的int参数的含义是:当信号到达的时候,内核将该信号以整形的方式传给处理器函数，即为void (*func)(int sig)中的sig.</p>
</blockquote>
<h2 id="使用typedef定义函数指针"><a href="#使用typedef定义函数指针" class="headerlink" title="使用typedef定义函数指针"></a>使用typedef定义函数指针</h2><p>一般情况下，如果通过普通的方式定义函数指针，在使用的很不方便。这个时候我们可以通过typedef定义函数指针的新类型。通过typedef定义新类型时与普通类型定义新类型方式不同。对于普通类型，定义方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef int64_t int64;</div></pre></td></tr></table></figure></p>
<p>但是对于函数指针，定义方式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//此处定义个名字为func的类型,它表示函数指针float (*func)(float, float)类型</div><div class="line">typedef float (*func)(float, float);</div><div class="line"></div><div class="line">float function(float a, floatb);</div><div class="line"></div><div class="line">//使用func定义变量</div><div class="line">func test = &amp;function;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-函数指针学习&quot;&gt;&lt;a href=&quot;#C-函数指针学习&quot; class=&quot;headerlink&quot; title=&quot;C++函数指针学习&quot;&gt;&lt;/a&gt;C++函数指针学习&lt;/h1&gt;&lt;h2 id=&quot;使用函数指针的优点&quot;&gt;&lt;a href=&quot;#使用函数指针的优点&quot; class=&quot;
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="函数指针" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="回调函数" scheme="http://yoursite.com/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
  </entry>
  
  <entry>
    <title>makefile详解</title>
    <link href="http://yoursite.com/2017/08/31/makefile%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/08/31/makefile详解/</id>
    <published>2017-08-31T09:22:57.000Z</published>
    <updated>2017-08-31T09:28:49.059Z</updated>
    
    <content type="html"><![CDATA[<p>makefile详解</p>
<p>makefile基础<br><a href="http://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="external">http://blog.csdn.net/ruglcc/article/details/7814546/</a></p>
<p>makefile依赖关系详解<br><a href="http://blog.chinaunix.net/uid-20682147-id-76330.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20682147-id-76330.html</a><br><a href="http://blog.csdn.net/aquester/article/details/48547685" target="_blank" rel="external">http://blog.csdn.net/aquester/article/details/48547685</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;makefile详解&lt;/p&gt;
&lt;p&gt;makefile基础&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/ruglcc/article/details/7814546/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>Linux正则表达式以及Sed使用学习</title>
    <link href="http://yoursite.com/2017/08/20/Linux%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/20/Linux正则表达式/</id>
    <published>2017-08-20T07:11:12.000Z</published>
    <updated>2017-08-20T11:58:41.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux正则表达式以及Sed使用学习"><a href="#Linux正则表达式以及Sed使用学习" class="headerlink" title="Linux正则表达式以及Sed使用学习"></a>Linux正则表达式以及Sed使用学习</h1><p>正则表达式是熟悉和使用Linux系统的最重要的基础，其中grep,find,awk以及sed等对其依赖更大。本节将总结一下Linux中常用的正则表达式使用方法。</p>
<h2 id="正则表达式中特殊字符"><a href="#正则表达式中特殊字符" class="headerlink" title="正则表达式中特殊字符"></a>正则表达式中特殊字符</h2><ul>
<li>.   : 表示任何单个字符</li>
<li>[]  : 包含一个字符序列，表示匹配序列中其中一个字符</li>
<li>-  : 出现在[]中,表示一个序列范围.如[a-z]表示26个小写的英文字母</li>
<li>^   : 出现在[]中，表示对序列去反。如[^a-z]表示匹配不是a-z的其他字符</li>
<li>*  : 匹配某一个字符的０个或1个或多个实例</li>
<li>?   : 匹配某一个字符的0个或1个实例</li>
<li>+  : 匹配某一个字符的1个或多个实例</li>
<li>$   : 匹配行尾。如test$指匹配以test结尾的行</li>
<li>^   : 匹配行首。如^test指匹配以test开始的行</li>
<li>\&lt;  : 匹配词首</li>
<li>>  :　匹配词尾</li>
<li>\   : 转移特殊字符,如果需要匹配上述特殊字符，用反斜杠转义</li>
</ul>
<h2 id="sed使用说明"><a href="#sed使用说明" class="headerlink" title="sed使用说明"></a>sed使用说明</h2><h3 id="sed命令："><a href="#sed命令：" class="headerlink" title="sed命令："></a>sed命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</div></pre></td></tr></table></figure>
<h3 id="sed使用"><a href="#sed使用" class="headerlink" title="sed使用"></a>sed使用</h3><p>data文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<h4 id="用s命令进行替换"><a href="#用s命令进行替换" class="headerlink" title="用s命令进行替换"></a>用s命令进行替换</h4><p>替换时若出现单引号，直接将脚本用双引号括起来即可。<br>1.将一行中第一个匹配的特定字符串替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/&quot; data</div></pre></td></tr></table></figure></p>
<p>注意不会改变原文件，只是会打印到标准输出流。若要保存可以重定向到新的文件中。</p>
<p>2.讲一行中所有匹配的特定字符串匹配，使用g参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/g&quot; data</div></pre></td></tr></table></figure></p>
<p>3.使用-i参数直接修改文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i &quot;s/a/an/g&quot; data</div></pre></td></tr></table></figure></p>
<p>4.在每一行的开头添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/^/#/&quot; data</div></pre></td></tr></table></figure></p>
<p>5.在每一行的结尾添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/$/#/&quot; data</div></pre></td></tr></table></figure></p>
<p>6.指定特定行替换,或指定特定范围内的行替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sed &quot;3s/an/a/&quot; data</div><div class="line">sed &quot;1,2s/an/a/&quot; data</div></pre></td></tr></table></figure></p>
<p>7.只替换每一行的第一个a:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/1&quot; data</div></pre></td></tr></table></figure></p>
<p>8.只替换每一行的第二个a:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/2&quot; data</div></pre></td></tr></table></figure></p>
<p>9.只替换每一行第二个以后的所有a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/a/an/2g&quot; data</div></pre></td></tr></table></figure></p>
<h4 id="多个匹配"><a href="#多个匹配" class="headerlink" title="多个匹配"></a>多个匹配</h4><p>多个匹配可以用分好将匹配规则连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/an/a/g;s/dog/cat/g&quot; data</div></pre></td></tr></table></figure></p>
<p>上述命令等价于:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -e &quot;s/an/a/g&quot; -e &quot;s/dog/cat/g&quot; data</div></pre></td></tr></table></figure></p>
<h4 id="显示被匹配的变量"><a href="#显示被匹配的变量" class="headerlink" title="显示被匹配的变量"></a>显示被匹配的变量</h4><p>&amp;可以表示被匹配的变量,即若被匹配的变量为”abc”,则&amp;代表abc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#功能为在每个an外加[]</div><div class="line">sed -e &quot;s/an/[&amp;]/g&quot; data</div></pre></td></tr></table></figure></p>
<h3 id="圆括号匹配"><a href="#圆括号匹配" class="headerlink" title="圆括号匹配"></a>圆括号匹配</h3><p>被圆括号括起来的匹配可以当做变量使用，注意圆括号匹配时括号需要”\”转义。变量按顺序使用\1,\2指代。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;s/this \(.*\) an \(.*\)/\1:\2/&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">is:dog an</div><div class="line">is:cant</div><div class="line">is:money</div><div class="line">is:fish</div></pre></td></tr></table></figure></p>
<h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><p>data内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<h3 id="N命令"><a href="#N命令" class="headerlink" title="N命令"></a>N命令</h3><p>N命令的作用是把下一行的命令纳入当做缓冲区。也就是缓冲区包括两行.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#只匹配缓冲区的第一个this</div><div class="line">sed &quot;N;s/this/that/&quot; data</div></pre></td></tr></table></figure></p>
<p>执行命令结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">that is a dog a</div><div class="line">this is a cat</div><div class="line">that is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed &quot;N;s/\n/,/&quot; data</div></pre></td></tr></table></figure>
<p>执行命令结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a,this is a cat</div><div class="line">this is a money,this is a fish</div></pre></td></tr></table></figure></p>
<h3 id="a命令和i命令"><a href="#a命令和i命令" class="headerlink" title="a命令和i命令"></a>a命令和i命令</h3><ol>
<li><p>i命令的作用是在指定行前面插入一行，行号写在i前面，中间空格可有可无；如果不写行号默认在所有行的前面插入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在第一行前面插入 this is my test i</div><div class="line">sed &quot;1i this is my test i&quot; data</div></pre></td></tr></table></figure>
</li>
<li><p>a命令的作用是在指定行后追加内容,行号写在a前面，若不写表示所有行后。也可用$代表最后一行，不过一定要有空格.</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在第一行后插入 this is my test a</div><div class="line">sed &quot;1a this is my test a&quot; data</div></pre></td></tr></table></figure>
<ol>
<li>可以使用匹配来添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#若匹配到cat，则在当前行后追加一行 this is test match a</div><div class="line">sed &quot;/cat/a this is test match a&quot; data</div></pre></td></tr></table></figure>
<h3 id="c命令"><a href="#c命令" class="headerlink" title="c命令"></a>c命令</h3><p>c命令是替换匹配的行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#替换第二行</div><div class="line">sed &quot;2 c this is test c&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is test c</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#用匹配替换</div><div class="line">sed &quot;/fish/c this is the test c&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div><div class="line">this is the test c</div></pre></td></tr></table></figure></p>
<h3 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h3><p>d命令删除指定的行，可指定范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除第２到3行</div><div class="line">sed &quot;2,3 d&quot; data</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除找到cat指定的行</div><div class="line">sed &quot;/cat/d&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a money</div><div class="line">this is a fish</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除第二行到结尾</div><div class="line">sed &quot;2,$ d&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div></pre></td></tr></table></figure></p>
<h3 id="p命令"><a href="#p命令" class="headerlink" title="p命令"></a>p命令</h3><p>p命令的作用是打印匹配到的行.注意打印的时候使用-n参数。sed默认输出处理后的文本，使用-n参数阻止默认输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印匹配到cat的行</div><div class="line">sed -n &quot;/cat/p&quot; data</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印符合从一个模式当另一个模式的行</div><div class="line">sed -n &quot;/dog/,/money/p&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div><div class="line">this is a money</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印从第一行到匹配到的哪一行</div><div class="line">sed -n &quot;1,/cat/p&quot; data</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this is a dog a</div><div class="line">this is a cat</div></pre></td></tr></table></figure></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="=命令"></a>=命令</h3><p>=参数用于打印匹配到的行号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#打印含有cat的行号</div><div class="line">sed -n &quot;/cat/=&quot; data</div></pre></td></tr></table></figure></p>
<h2 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h2><p>将下列中所有的100替换为当前行号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div><div class="line">hmset &apos;99_p_100&apos; &apos;m_19&apos; 100 &apos;t_19&apos; 100 &apos;semm_19&apos; 100</div></pre></td></tr></table></figure>
<p>shell命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed = data | sed &quot;N;s/\([0-9]*\)\n\(hmset &apos;99_p_\)[0-9]*\(&apos; &apos;m_19&apos; \)[0-9]*\( &apos;t_19&apos; \)[0-9]*\( &apos;semm_19&apos; \)[0-9]*/\2\1\3\1\4\1\5\1/&quot;</div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hmset &apos;99_p_1&apos; &apos;m_19&apos; 1 &apos;t_19&apos; 1 &apos;semm_19&apos; 1</div><div class="line">hmset &apos;99_p_2&apos; &apos;m_19&apos; 2 &apos;t_19&apos; 2 &apos;semm_19&apos; 2</div><div class="line">hmset &apos;99_p_3&apos; &apos;m_19&apos; 3 &apos;t_19&apos; 3 &apos;semm_19&apos; 3</div><div class="line">hmset &apos;99_p_4&apos; &apos;m_19&apos; 4 &apos;t_19&apos; 4 &apos;semm_19&apos; 4</div><div class="line">hmset &apos;99_p_5&apos; &apos;m_19&apos; 5 &apos;t_19&apos; 5 &apos;semm_19&apos; 5</div><div class="line">hmset &apos;99_p_6&apos; &apos;m_19&apos; 6 &apos;t_19&apos; 6 &apos;semm_19&apos; 6</div><div class="line">hmset &apos;99_p_7&apos; &apos;m_19&apos; 7 &apos;t_19&apos; 7 &apos;semm_19&apos; 7</div><div class="line">hmset &apos;99_p_8&apos; &apos;m_19&apos; 8 &apos;t_19&apos; 8 &apos;semm_19&apos; 8</div><div class="line">hmset &apos;99_p_9&apos; &apos;m_19&apos; 9 &apos;t_19&apos; 9 &apos;semm_19&apos; 9</div><div class="line">hmset &apos;99_p_10&apos; &apos;m_19&apos; 10 &apos;t_19&apos; 10 &apos;semm_19&apos; 10</div><div class="line">hmset &apos;99_p_11&apos; &apos;m_19&apos; 11 &apos;t_19&apos; 11 &apos;semm_19&apos; 11</div><div class="line">hmset &apos;99_p_12&apos; &apos;m_19&apos; 12 &apos;t_19&apos; 12 &apos;semm_19&apos; 12</div><div class="line">hmset &apos;99_p_13&apos; &apos;m_19&apos; 13 &apos;t_19&apos; 13 &apos;semm_19&apos; 13</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux正则表达式以及Sed使用学习&quot;&gt;&lt;a href=&quot;#Linux正则表达式以及Sed使用学习&quot; class=&quot;headerlink&quot; title=&quot;Linux正则表达式以及Sed使用学习&quot;&gt;&lt;/a&gt;Linux正则表达式以及Sed使用学习&lt;/h1&gt;&lt;p&gt;正则
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="sed" scheme="http://yoursite.com/tags/sed/"/>
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令混淆点记录</title>
    <link href="http://yoursite.com/2017/08/20/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/08/20/Linux常用命令/</id>
    <published>2017-08-20T06:25:01.000Z</published>
    <updated>2017-09-29T06:53:42.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令混淆点记录"><a href="#Linux常用命令混淆点记录" class="headerlink" title="Linux常用命令混淆点记录"></a>Linux常用命令混淆点记录</h1><h2 id="ls命令单位问题"><a href="#ls命令单位问题" class="headerlink" title="ls命令单位问题"></a>ls命令单位问题</h2><p>ls命令的<strong>默认单位为字节</strong>。<br>若使用ls时需要指定单位显示的时候，需要添加参数-h或–block-size进行操作。具体操作方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#-h表示human，即人可读的方式</div><div class="line">#它会按照文件的大小显示单位,</div><div class="line">#若文件小于1k，则不显示单位，表示字节</div><div class="line">#若文件大于1k但是小于1M，显示的单位为k</div><div class="line">#文件大于1M小于1G会显示单位为M，</div><div class="line">#以此类推</div><div class="line">ls -h ~/test</div><div class="line"></div><div class="line">#按照指定的单位显示</div><div class="line">#注意使用此参数需要注意一个问题。若文件小于1G</div><div class="line">ls --block-size=g ~/test    #按照单位为g显示</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令混淆点记录&quot;&gt;&lt;a href=&quot;#Linux常用命令混淆点记录&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令混淆点记录&quot;&gt;&lt;/a&gt;Linux常用命令混淆点记录&lt;/h1&gt;&lt;h2 id=&quot;ls命令单位问题&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ls" scheme="http://yoursite.com/tags/ls/"/>
    
  </entry>
  
  <entry>
    <title>查找含有特定字符串的文件</title>
    <link href="http://yoursite.com/2017/08/20/Linux%E6%9F%A5%E6%89%BE%E5%90%AB%E6%9C%89%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/08/20/Linux查找含有特定字符串的文件/</id>
    <published>2017-08-20T06:25:01.000Z</published>
    <updated>2017-08-20T06:40:10.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux查找含有特定字符串的文件"><a href="#Linux查找含有特定字符串的文件" class="headerlink" title="Linux查找含有特定字符串的文件"></a>Linux查找含有特定字符串的文件</h1><p>Linux查找含有特定字符串的文件命令为grep。以下为详细的使用方法</p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><h3 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令:"></a>Linux命令:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grep [OPTIONS] PATTERN [FILE...]</div><div class="line"></div><div class="line">#实例:递归查找当前文件夹下所有含有test的文件，并显示行号</div><div class="line">grep -rn &quot;test&quot; *</div></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-r      递归查找</div><div class="line">-n      显示行号</div><div class="line">-i      忽略大小写</div><div class="line">-w      只匹配整个单词，而不是字符串的字部分(如pattern为&quot;test&quot;, 不匹配&quot;test1&quot;或&quot;atest&quot;)</div><div class="line">-C num  显示匹配到的行上下n行  </div><div class="line">-l      只列出匹配成功的文件名</div><div class="line">-L      列出不匹配的文件名</div><div class="line">\&lt;      标注单词的开头</div><div class="line">\&gt;      标注单词的结尾</div><div class="line">^       指匹配字符串在行首</div><div class="line">$       指匹配字符串在行尾</div></pre></td></tr></table></figure>
<h3 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#显示匹配pattern1或pattern2的行</div><div class="line">grep pattern1 | pattern2 file</div><div class="line"># 显示即匹配pattern1又匹配pattern2的行</div><div class="line">grep pattern1 file | grep pattern2</div><div class="line">#只匹配test或testA，不匹配Atest</div><div class="line">grep &quot;\&lt;man&quot; *</div><div class="line">#只匹配test或Atest，不匹配testA</div><div class="line">grep &quot;man\&gt;&quot; *</div><div class="line">#只匹配test　不匹配testA和Atest</div><div class="line">grep &quot;\&lt;test\&gt;&quot; *</div><div class="line"></div><div class="line">#匹配行首为test的行:</div><div class="line">grep -rn &quot;^test&quot; *</div><div class="line">#匹配行尾为test的行</div><div class="line">grep -rn &quot;test$&quot; *</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux查找含有特定字符串的文件&quot;&gt;&lt;a href=&quot;#Linux查找含有特定字符串的文件&quot; class=&quot;headerlink&quot; title=&quot;Linux查找含有特定字符串的文件&quot;&gt;&lt;/a&gt;Linux查找含有特定字符串的文件&lt;/h1&gt;&lt;p&gt;Linux查找含有特
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="grep" scheme="http://yoursite.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>C中编码问题</title>
    <link href="http://yoursite.com/2017/07/17/C%E4%B8%AD%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/17/C中编码问题/</id>
    <published>2017-07-17T06:40:31.000Z</published>
    <updated>2017-07-17T12:20:47.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中编码问题"><a href="#C中编码问题" class="headerlink" title="C中编码问题"></a>C中编码问题</h1><h2 id="编码介绍"><a href="#编码介绍" class="headerlink" title="编码介绍"></a>编码介绍</h2><p>在代码中我们通常不可避免的出现一些中文，这个时候我们就要考虑到中文的编码格式，如果不注意可能会导致乱码或者信息失真等问题。我们常用的中文编码有GBK,gb2312,Unicode等等。具体详细的介绍看下面几篇文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/lizhenghn/p/3690406.html" target="_blank" rel="external">http://www.cnblogs.com/lizhenghn/p/3690406.html</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/apas03.html" target="_blank" rel="external">http://docs.linuxtone.org/ebooks/C&amp;CPP/c/apas03.html</a></li>
</ul>
<h2 id="C语言编码转换"><a href="#C语言编码转换" class="headerlink" title="C语言编码转换"></a>C语言编码转换</h2><p>在C语言中，如果需要讲编码进行转换，可以使用iconv系列函数。<br>头文件以及常用函数:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* <span class="keyword">iconv_t</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> iconv_t <span class="title">iconv_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* to_code, <span class="keyword">const</span> <span class="keyword">char</span>* from_code)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">iconv_close</span><span class="params">(<span class="keyword">iconv_t</span> cd)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="iconv-open"><a href="#iconv-open" class="headerlink" title="iconv_open"></a>iconv_open</h3><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><p>此函数说明将要进行哪两种编码的转换，并返回一个转化句柄。</p>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>tocode:目标编码</li>
<li>fromcode : 原编码</li>
</ul>
<h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h4><p>此函数用于从inbuf中读取数据并将转换到指定编码的的数据输出到outbuf中，若转换成功，则输出本次转化的字节数，否则返回sizeof_t(-1)</p>
<h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>cd : 转换描述符,由iconv_open获得</li>
<li>inbuf:输入缓冲区</li>
<li>in_left_buf :输入缓冲区还未转换的字符数</li>
<li>outbuf : 输出缓冲区</li>
<li>out_len_buf:输出缓冲区的剩余空间.</li>
</ul>
<h3 id="iconv-close"><a href="#iconv-close" class="headerlink" title="iconv_close"></a>iconv_close</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">iconv_close</span><span class="params">(<span class="keyword">iconv_t</span> cd)</span></span>;</div></pre></td></tr></table></figure>
<p>用于关闭iconv_open打开的文件描述符</p>
<h2 id="举例转换函数"><a href="#举例转换函数" class="headerlink" title="举例转换函数"></a>举例转换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convertCode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; p_str, <span class="keyword">const</span> <span class="keyword">char</span>* from, <span class="keyword">const</span> <span class="keyword">char</span>* to)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> * <span class="built_in">sin</span>, * sout;</div><div class="line">  <span class="keyword">int</span> lenin, lenout, ret;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> BUF_LEN = <span class="number">10240</span>;</div><div class="line">  <span class="keyword">char</span> bufOut[BUF_LEN];</div><div class="line">  <span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(<span class="string">""</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">memset</span>(bufOut, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(bufOut));</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">iconv_t</span> cd;</div><div class="line">  <span class="keyword">if</span> ((cd = iconv_open(to, from)) == (<span class="keyword">iconv_t</span>)(<span class="number">-1</span>)) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"open iconv error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lenin = p_str.length();</div><div class="line">  lenout = BUF_LEN;</div><div class="line"></div><div class="line">  <span class="built_in">sin</span> = (<span class="keyword">char</span>*)p_str.c_str();</div><div class="line">  sout = bufOut;</div><div class="line"><span class="comment">//  std::cout &lt;&lt; sin &lt;&lt; std::endl;</span></div><div class="line">  <span class="comment">//std::cout &lt;&lt; lenin &lt;&lt; std::endl;</span></div><div class="line">  <span class="comment">//std::cout &lt;&lt; lenout &lt;&lt; std::endl;</span></div><div class="line"></div><div class="line">  ret = iconv(cd, &amp;<span class="built_in">sin</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span> * &gt;(&amp;lenin), &amp;sout, <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span> * &gt;(&amp;lenout));</div><div class="line"></div><div class="line">  <span class="comment">//errno:84:Invalid or incomplate multibyte or wide character</span></div><div class="line">  <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; strerror(errno) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (errno != <span class="number">84</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bufout:"</span> &lt;&lt; bufOut &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bufout end"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  iconv_close(cd);</div><div class="line"></div><div class="line">  result.assign(bufOut, BUF_LEN - lenout);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> s = <span class="string">"哈哈"</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.length() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  s = convertCode(s, <span class="string">"gbk"</span>, <span class="string">"utf-8//IGNORE"</span>);</div><div class="line">  <span class="comment">//std::cout &lt;&lt; s &lt;&lt; std::endl;</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.length() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="iconv函数出现段错误的原因"><a href="#iconv函数出现段错误的原因" class="headerlink" title="iconv函数出现段错误的原因"></a>iconv函数出现段错误的原因</h2><p>使用iconv函数进行转换的时候可能会出现段错误，这里出现这个错误的主要原因是注意看iconv函数的函数原型:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd, <span class="keyword">char</span>** <span class="keyword">restrict</span> inbuf, <span class="keyword">size_t</span>* in_left_buf, <span class="keyword">char</span>** <span class="keyword">restrict</span> outbuf, <span class="keyword">size_t</span>* out_left_buf)</span></span>;</div></pre></td></tr></table></figure></p>
<p>长度为size_t的指针，<strong>int指针转换为size_t指针在一些系统的转换过程会出现问题</strong>，导致长度出现错误，内存越界，出现段错误。错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">from_gbk (irreversible=0x7fffffffb188, outend=0x61d7c0 &quot;&quot;, outptrp=&lt;synthetic pointer&gt;,</div><div class="line">    inend=0xa7ffffffdb76 &lt;error: Cannot access memory at address 0xa7ffffffdb76&gt;,</div><div class="line">    inptrp=0x7fffffffb2e8, step_data=0x6157d0, step=0x615030) at ../iconv/loop.c:325</div><div class="line">325	../iconv/loop.c: No such file or directory.</div></pre></td></tr></table></figure>
<h3 id="size-t与int类型"><a href="#size-t与int类型" class="headerlink" title="size_t与int类型"></a>size_t与int类型</h3><p>size_t类型是在stddef.h文件中定义。size_t的类型与操作系统相关，在32位架构中被普遍定义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">size_t</span>;</div></pre></td></tr></table></figure></p>
<p>在64为机器中被定义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">size_t</span>;</div></pre></td></tr></table></figure></p>
<p>int类型在32和64为机器上的长度都是4位，long在32位机器为4位，在64位机器为8位。所以在64为机器上,size_t和int指针转换的过程中一定会出现问题，在32为系统中的正整数指针不会指针，但是负整数也会出现问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C中编码问题&quot;&gt;&lt;a href=&quot;#C中编码问题&quot; class=&quot;headerlink&quot; title=&quot;C中编码问题&quot;&gt;&lt;/a&gt;C中编码问题&lt;/h1&gt;&lt;h2 id=&quot;编码介绍&quot;&gt;&lt;a href=&quot;#编码介绍&quot; class=&quot;headerlink&quot; title=&quot;编
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>C++中find_if查找vector中的特定struct以及值域查询</title>
    <link href="http://yoursite.com/2017/07/15/C++%E4%B8%ADfind_if%E6%9F%A5%E6%89%BEvector%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9Astruct%E4%BB%A5%E5%8F%8A%E5%80%BC%E5%9F%9F%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/07/15/C++中find_if查找vector中的特定struct以及值域查询/</id>
    <published>2017-07-15T09:47:20.000Z</published>
    <updated>2017-07-15T10:30:01.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中find-if查找vector中的特定struct以及值域查询"><a href="#C-中find-if查找vector中的特定struct以及值域查询" class="headerlink" title="C++中find_if查找vector中的特定struct以及值域查询"></a>C++中find_if查找vector中的特定struct以及值域查询</h1><p>由于struct不是C++中的内置类型所以不能用std::find直接查找，而且find函数不能满足值域的查询。这个时候需要使用find_if来进行查询。</p>
<h2 id="find-if函数"><a href="#find-if函数" class="headerlink" title="find_if函数"></a>find_if函数</h2><p>find_if是一个模板函数，函数原型及函数定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">Predicate</span>&gt;</span></div><div class="line"><span class="title">InputIterator</span> <span class="title">find_if</span>(<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">end</span>, <span class="title">Predicate</span> <span class="title">pred</span>) &#123;</div><div class="line">  <span class="keyword">while</span> (first != last &amp;&amp; !pred(*first)) ++first;</div><div class="line">  <span class="keyword">return</span> first;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>first : 起始迭代器</li>
<li>end :   结束迭代器</li>
<li>pred : 用于比较数值的函数或者函数对象(仿函数)。遍历条件即为pred()为真.</li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>若有满足pred条件的元素，返回该元素的迭代器，否则返回end.</p>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>该函数最重要的环节是pred，它的<strong>核心环节是重载()运算符，因为每个容器迭代器的*运算符得到的结果都是该容器的value_type的值，所以改重载函数的参数类型是value_type的引用类型</strong>。</p>
<h2 id="find-if函数应用"><a href="#find-if函数应用" class="headerlink" title="find_if函数应用"></a>find_if函数应用</h2><p>在struct的vector中查找特定的对象.<strong>特别注意的是：仿函数的参数类型是值的const引用，但是finder的构造参数是实际要比较的值的类型，在使用过程中,向构造函数中传的值是要比较的值。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> m_iID;</div><div class="line">	<span class="built_in">string</span> m_strName;</div><div class="line"></div><div class="line">	book(<span class="keyword">int</span> t_id, <span class="built_in">string</span> t_name):m_iID(t_id), m_strName(t_name) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book_finder</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> m_iID;</div><div class="line">	book_finder(<span class="keyword">int</span> t_id):m_iID(t_id) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> book&amp; t)</span> </span>&#123;<span class="keyword">return</span> t.m_iID == m_iID;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;book&gt; bookVc;</div><div class="line">	<span class="function">book <span class="title">book1</span><span class="params">(<span class="number">0</span>, <span class="string">"书0"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book2</span><span class="params">(<span class="number">1</span>, <span class="string">"书1"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book3</span><span class="params">(<span class="number">2</span>, <span class="string">"书2"</span>)</span></span>;</div><div class="line">	<span class="function">book <span class="title">book4</span><span class="params">(<span class="number">3</span>, <span class="string">"书3"</span>)</span></span>;</div><div class="line"></div><div class="line">	bookVc.push_back(book1);</div><div class="line">	bookVc.push_back(book2);</div><div class="line">	bookVc.push_back(book3);</div><div class="line">	bookVc.push_back(book4);</div><div class="line"></div><div class="line">	<span class="function">book <span class="title">target</span><span class="params">(<span class="number">1</span>, <span class="string">"书"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::find_if(bookVc.begin(), bookVc.end(), book_finder(target.m_iID)) != bookVc.end()) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"存在1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	target.m_iID = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::find_if(bookVc.begin(), bookVc.end(), book_finder(target.m_iID)) != bookVc.end()) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"存在10"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在10"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-中find-if查找vector中的特定struct以及值域查询&quot;&gt;&lt;a href=&quot;#C-中find-if查找vector中的特定struct以及值域查询&quot; class=&quot;headerlink&quot; title=&quot;C++中find_if查找vector中的特定s
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
      <category term="struct" scheme="http://yoursite.com/tags/struct/"/>
    
  </entry>
  
</feed>
