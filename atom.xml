<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-12T11:33:25.934Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(langzi989)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix网络编程之主机字节序与网络字节序</title>
    <link href="http://yoursite.com/2017/06/12/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/06/12/Unix网络编程之主机字节序与网络字节序/</id>
    <published>2017-06-12T11:20:46.000Z</published>
    <updated>2017-06-12T11:33:25.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程之主机字节序与网络字节序"><a href="#Unix网络编程之主机字节序与网络字节序" class="headerlink" title="Unix网络编程之主机字节序与网络字节序"></a>Unix网络编程之主机字节序与网络字节序</h1><p>在各种计算机体系中，对于字节，字等的存储机制有所不同，但是在网络通信过程中，如果双方交流的信息存储结构不一致，则会导致通信失败的结果。当前计算机中通常采用的字节存储机制主要有两种:<strong>大端规则与小端规则</strong>。<strong>网络通信的过程中的存储机制统一为大端规则。</strong></p>
<h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><blockquote>
<p>参考：<a href="http://www.cppblog.com/tx7do/archive/2015/12/14/71276.html" target="_blank" rel="external">http://www.cppblog.com/tx7do/archive/2015/12/14/71276.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程之主机字节序与网络字节序&quot;&gt;&lt;a href=&quot;#Unix网络编程之主机字节序与网络字节序&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程之主机字节序与网络字节序&quot;&gt;&lt;/a&gt;Unix网络编程之主机字节序与网络字节序&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="主机字节序" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    
      <category term="网络字节序" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unix网络编程基础之套接字结构</title>
    <link href="http://yoursite.com/2017/06/12/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/06/12/Unix网络编程基础之套接字结构/</id>
    <published>2017-06-12T08:57:47.000Z</published>
    <updated>2017-06-12T11:16:15.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix网络编程基础之套接字结构"><a href="#Unix网络编程基础之套接字结构" class="headerlink" title="Unix网络编程基础之套接字结构"></a>Unix网络编程基础之套接字结构</h1><p>大多数的套接字函数都使用到了套接字地址，它们以套接字地址的指针作为参数。每个协议族都定义了自己的套接字地址结构，这些套接字地址结构均以sockaddr_开头，以协议族唯一的后缀结尾。</p>
<h2 id="IPv4套接字地址结构"><a href="#IPv4套接字地址结构" class="headerlink" title="IPv4套接字地址结构"></a>IPv4套接字地址结构</h2><p>IPv4的套接字以sockaddr_in命名，其具体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="keyword">struct</span> in_addr &#123;</div><div class="line">  <span class="keyword">in_addr_t</span> s_addr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> sockaddr_in &#123;</div><div class="line">  uint8 sin_len;            <span class="comment">//套接字的长度,sizeof(struct　sockaddr_in)</span></div><div class="line">  <span class="keyword">sa_family_t</span> sin_family;   <span class="comment">//协议族</span></div><div class="line">  <span class="keyword">in_port_t</span> sin_port;       <span class="comment">//套接字端口</span></div><div class="line"></div><div class="line">  <span class="keyword">struct</span> in_addr sin_addr;  <span class="comment">//套接字地址</span></div><div class="line"></div><div class="line">  <span class="keyword">char</span> sin_zero[<span class="number">8</span>];         <span class="comment">//保留位</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>sin_len : 套接字的长度字段，类型为uint8_t,sizeof(struct sockaddr_in),不是所有的系统都支持。长度字段简化了可变长度的套接字的处理。<strong>在使用过程中无需设置和检查它</strong>，除非涉及路由套接字。</li>
<li>sin_family : 协议族，IPv4的协议族为AF_INET.类型为无符号整形，其长度受系统的影响。若sockaddr_in中含有sin_len字段，其大小为16位，若含有长度字段，其大小为8位。</li>
<li>sin_port : 套接字端口, 一般为uint16_t类型。</li>
<li>sin_addr : 套接字Ip，其类型为in_addr，in_addr中的s_addr类型为uint32_t.</li>
<li>sin_zero : 不常用，若需要在套接字中加入额外字段，使用到此字段，<strong>若不使用将其置为0，一般使用sockaddr_in首先将整个结构置0</strong>。</li>
</ul>
<blockquote>
<p><strong>注意：套接字地址结构仅在本机上使用，虽然结构中的某些字段用在不同主机之间的通信，但是结构体本身不在主机之间传递。</strong></p>
</blockquote>
<h2 id="通用套接字地址结构"><a href="#通用套接字地址结构" class="headerlink" title="通用套接字地址结构"></a>通用套接字地址结构</h2><p>套接字函数以套接字地址结构指针作为参数的过程中，由于在C中没有继承的机制，这个时候向套接字函数传递参数的时候，由于不同协议的套接字地址不同，会出现问题。这个时候有一种解决办法就是<strong>传递void*指针给socket函数，但是void空指针的出现在socket函数之后</strong>，所以这个方案不可行。这个时候的解决方案是　<strong>定义一个通用的套接字函数，socket函数的参数为通用套接字地址的指针，传递参数的时候我们将特定的套接字指针强制转换为通用套接字地址指针。</strong>　如bind函数的函数原型为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">struct</span> sockaddr*, <span class="keyword">socklen_t</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<p>通用套接字地址的定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr &#123;</div><div class="line">  <span class="keyword">uint8_t</span> sa_len;</div><div class="line">  <span class="keyword">sa_family_t</span> sa_family;</div><div class="line">  <span class="keyword">char</span> sa_data[<span class="number">14</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Ubuntu16-04中sockaddr-in的定义"><a href="#Ubuntu16-04中sockaddr-in的定义" class="headerlink" title="Ubuntu16.04中sockaddr_in的定义"></a>Ubuntu16.04中sockaddr_in的定义</h2><p>Ubuntu16.04中sockaddr_in的定义在/usr/include/netinet/in.h，注意其不支持sin_len字段，为了保持与通用套接字字符串兼容，其保留字符串的长度直接用通用套接字的大小减去其他字段。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    <span class="keyword">in_port_t</span> sin_port;                 <span class="comment">// Port number.  </span></div><div class="line">    <span class="keyword">struct</span> in_addr sin_addr;            <span class="comment">// Internet address.  </span></div><div class="line"></div><div class="line">    <span class="comment">//Pad to size of struct sockaddr</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr) -</div><div class="line">                          __SOCKADDR_COMMON_SIZE -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix网络编程基础之套接字结构&quot;&gt;&lt;a href=&quot;#Unix网络编程基础之套接字结构&quot; class=&quot;headerlink&quot; title=&quot;Unix网络编程基础之套接字结构&quot;&gt;&lt;/a&gt;Unix网络编程基础之套接字结构&lt;/h1&gt;&lt;p&gt;大多数的套接字函数都使用到了
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Unix时间相关函数总结.md</title>
    <link href="http://yoursite.com/2017/06/11/Unix%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93-md/"/>
    <id>http://yoursite.com/2017/06/11/Unix时间相关函数总结-md/</id>
    <published>2017-06-11T12:09:08.000Z</published>
    <updated>2017-06-12T11:49:37.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix时间相关函数总结"><a href="#Unix时间相关函数总结" class="headerlink" title="Unix时间相关函数总结"></a>Unix时间相关函数总结</h1><p>在进行Unix编程的过程中，我们不可避免的会遇到需要时间相关的操作，如文件的创建修改时间，数据库中字段插入或更新的时间。</p>
<h2 id="Unix时间相关的类型"><a href="#Unix时间相关的类型" class="headerlink" title="Unix时间相关的类型"></a>Unix时间相关的类型</h2><ul>
<li>time_t</li>
<li>struct timeb</li>
<li>struct timeval</li>
<li>struct timespec</li>
<li>struct tm</li>
<li>clock_t</li>
</ul>
<h3 id="time-t"><a href="#time-t" class="headerlink" title="time_t"></a>time_t</h3><p>time_t是一个有符号的整数类型，表示的含义是从1970年1月1日到某一个时间点的秒数。若为32位系统，由int类型的范围可以推算出，time_t可以表示的时间范围是1901-12-13 20:45:52到2038-０1-19 03:14:07。</p>
<h3 id="struct-ime-b"><a href="#struct-ime-b" class="headerlink" title="struct ime_b"></a>struct ime_b</h3><p>time_b结构体是一个精确到毫秒的结构体，其有四个成员，成员列表如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeb&#123;</div><div class="line">  <span class="keyword">time_t</span> time;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> millitm;</div><div class="line">  <span class="keyword">short</span> timezone;　　　　<span class="comment">//时区标志</span></div><div class="line">  <span class="keyword">short</span> dstflag;　　　　 <span class="comment">//夏令时标志</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可以通过下列函数获取当前的timeb:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ftime</span><span class="params">(<span class="keyword">struct</span> timeb* tb)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="struct-timeval"><a href="#struct-timeval" class="headerlink" title="struct timeval"></a>struct timeval</h3><p>timeval是一个精确到微妙的结构体。其中主要包含两个成员：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeval&#123;</div><div class="line">  <span class="keyword">time_t</span> tv_sec;</div><div class="line">  suseconds tv_usec;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>此值通常通过gettimeofday获取<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval* tv, <span class="keyword">struct</span> timezone* tz)</span></span>; <span class="comment">//timezone参数已废弃，一般设为NULL，</span></div></pre></td></tr></table></figure></p>
<h3 id="struct-timespec"><a href="#struct-timespec" class="headerlink" title="struct timespec"></a>struct timespec</h3><p>timespec是一个精确到纳秒的结构体。其主要包含两个成员<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timespec&#123;</div><div class="line">  <span class="keyword">time_t</span> tv_sec; <span class="comment">//秒</span></div><div class="line">  <span class="keyword">long</span> tv_nsec; <span class="comment">//纳秒</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此结构体一般通过下列函数获取：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">clock_gettime</span><span class="params">(<span class="keyword">clockid_t</span> which_clock, <span class="keyword">struct</span> timespec* tp)</span></span>;</div></pre></td></tr></table></figure></p>
<p>上述参数中which_clock用于标识那种时钟时间，可选值如下</p>
<ul>
<li>CLOCK_REALTIME  　　　　　 : 系统当前时间,1970-1-1开始</li>
<li>CLOCK_MONOTONIC  　　　　　: 系统的启动时间，不能被设置</li>
<li>CLOCK_PROCESS_CPUTIME_ID : 进程运行时间</li>
<li>CLOCK_THREAD_CPUITME_ID  : 线程运行时间</li>
<li>CLOCK_REALTIME_HR        : CLOCK_REALTIME的高精度版本</li>
<li>CLOCK_MONOTONIC_HR       : CLOCK_MONOTONIC的高精度版本</li>
</ul>
<h3 id="struct-tm"><a href="#struct-tm" class="headerlink" title="struct tm"></a>struct tm</h3><p>struct tm被称为一种分解时间，日期和时间被分解成多个独立字段。其形式如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> tm &#123;</div><div class="line">  <span class="keyword">int</span> tm_sec;     <span class="comment">//秒 (0-60)</span></div><div class="line">  <span class="keyword">int</span> tm_min;     <span class="comment">//分 (0-59)</span></div><div class="line">  <span class="keyword">int</span> tm_hour;    <span class="comment">//时 (0-23)</span></div><div class="line">  <span class="keyword">int</span> tm_mday;    <span class="comment">//日 (1-31)</span></div><div class="line">  <span class="keyword">int</span> tm_mon;     <span class="comment">//月 (1-12)</span></div><div class="line">  <span class="keyword">int</span> tm_year;    <span class="comment">//年 (1900-)</span></div><div class="line">  <span class="keyword">int</span> tm_wday;    <span class="comment">//一周中的周几(周日为0)</span></div><div class="line">  <span class="keyword">int</span> tm_yday;    <span class="comment">//一年中的第几天。(1月1号为0)</span></div><div class="line">  <span class="keyword">int</span> m_isdst;    <span class="comment">//DST大于0表示为夏令时时间。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Unix时间相关函数"><a href="#Unix时间相关函数" class="headerlink" title="Unix时间相关函数"></a>Unix时间相关函数</h2><p>Unix时间相关的函数除了上面已经提到的函数还包括以下函数</p>
<ul>
<li>time(time_t timep)</li>
<li>ctime</li>
<li>gmtime</li>
<li>localtime</li>
<li>mktime</li>
<li>asctime</li>
<li>strftime</li>
<li>strptime</li>
</ul>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">time_t</span> time(<span class="keyword">time_t</span>* timep);</div></pre></td></tr></table></figure>
<p>time函数返回当前时间的时间戳，此时间戳为从1970年1月1日到当前时间的时间戳，此值不受时区和夏令时(DST)。此函数的返回值为当前的时间戳，函数参数为time_t指针，当前时间除了返回值之外，还将此时间放入timep中。所以使用time函数时我们<strong>将timep设置为NULL</strong>即可。</p>
<h3 id="ctime"><a href="#ctime" class="headerlink" title="ctime"></a>ctime</h3><h4 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">ctime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">time_t</span>* timep)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h4><p>ctime函数的功能为<strong>将time_t转化为打印字符串格式</strong>。把一个指向time_t的指针timep传入函数ctime,将返回一个长度为26字节的字符串，包含\0和换行符。ctime进行转换的时候，会<strong>考虑时区和夏令时</strong>，所以返回的时间字符串为当地时间。返回时间的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wed Jun  8 14:22:34 2011</div></pre></td></tr></table></figure></p>
<p>特别注意返回的字符串是经由静态分配的，若多次调用此函数，之前获取的时间会受影响。SuSv3规定，调用ctime(),gmtime(),localtime()以及asctime()中的任意一个函数，都可能覆盖其他函数返回的结果。</p>
<blockquote>
<p>静态分配的意思是这些函数返回的数据都是般存在同一个静态变量中，所以下一次的结果会覆盖上一次的数据。如果需要对之前的数据保存，此时需要将结果拷贝到自己分配的内存中。</p>
</blockquote>
<p>###　gmtime和localtime</p>
<h4 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">struct</span> tm* <span class="title">gmtime</span><span class="params">(<span class="keyword">time_t</span>* timep)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> tm* <span class="title">localtime</span><span class="params">(time* timep)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能-1"><a href="#函数功能-1" class="headerlink" title="函数功能"></a>函数功能</h4><p>gmttime和localtime的作用是将time_t值转换为分解时间struct tm类型。他们的主要区别是<strong>gmtime转换为对应于UTC的分解时间，而localtime考虑时区和夏令时</strong>。</p>
<h3 id="mktime"><a href="#mktime" class="headerlink" title="mktime"></a>mktime</h3><h4 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">time_t</span> mktime(<span class="keyword">struct</span> tm* timeptr);</div></pre></td></tr></table></figure>
<p>####　函数功能<br>mktime的作用是将一个<strong>本地时区的分解时间转化为time_t类型</strong>。需要注意的是，mktime可能<strong>改变timeptr所指的内容。若分解时间不符合要求，mktime将其自动转换为有效时间</strong>。如秒为61,此时会将其变成1并讲分加１。</p>
<h3 id="asctime"><a href="#asctime" class="headerlink" title="asctime"></a>asctime</h3><h4 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#incude <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">asctime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> tm* timeptr)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能-2"><a href="#函数功能-2" class="headerlink" title="函数功能"></a>函数功能</h4><p>asc的功能是<strong>将分解时间转化为打印时间，特别注意的是asctime转化的过程中不考虑时区和夏令时</strong>，返回的数据也是静态分配的。</p>
<h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h3><h4 id="函数原型-5"><a href="#函数原型-5" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="keyword">size_t</span> strftime(<span class="keyword">char</span>* outstr, <span class="keyword">size_t</span> maxsize, <span class="keyword">const</span> <span class="keyword">char</span>* format, <span class="keyword">const</span> <span class="keyword">struct</span> tm* timeptr);</div></pre></td></tr></table></figure>
<h4 id="函数功能-3"><a href="#函数功能-3" class="headerlink" title="函数功能"></a>函数功能</h4><p>此函数的功能是将分解时间转换为打印时间，并可以指定打印时间的格式为format。不同于ctime和asctime，strftime结果不包含换行符。若返回的字符串超过了maxsize大小，函数返回0指示为转换错误。定义的格式中其格式化字符串可以参考预定义的格式。参考《Linux/Unix系统编程手册.上册》第158页。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix时间相关函数总结&quot;&gt;&lt;a href=&quot;#Unix时间相关函数总结&quot; class=&quot;headerlink&quot; title=&quot;Unix时间相关函数总结&quot;&gt;&lt;/a&gt;Unix时间相关函数总结&lt;/h1&gt;&lt;p&gt;在进行Unix编程的过程中，我们不可避免的会遇到需要时间相关
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="timestap" scheme="http://yoursite.com/tags/timestap/"/>
    
      <category term="分解时间" scheme="http://yoursite.com/tags/%E5%88%86%E8%A7%A3%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>C语言宏定义相关</title>
    <link href="http://yoursite.com/2017/06/11/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/06/11/C语言宏定义相关/</id>
    <published>2017-06-11T08:39:20.000Z</published>
    <updated>2017-06-11T08:53:17.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言宏定义相关"><a href="#C语言宏定义相关" class="headerlink" title="C语言宏定义相关"></a>C语言宏定义相关</h1><p>C语言宏定义在代码编写中很常见，它常会带来一些很高的性能和很方便的写法，在看Linux源码中sockaddr_in的时候遇到宏定义中##。特地在此记录.</p>
<h2 id="宏定义中-用法"><a href="#宏定义中-用法" class="headerlink" title="宏定义中##用法"></a>宏定义中##用法</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>Linux中sockaddr_in的定义在文件/netinet/in.h文件中。具体如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Structure describing an Internet socket address.  */</span></div><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    <span class="keyword">in_port_t</span> sin_port;                 <span class="comment">// Port number.  </span></div><div class="line">    <span class="keyword">struct</span> in_addr sin_addr;            <span class="comment">// Internet address.  </span></div><div class="line"></div><div class="line">    <span class="comment">// Pad to size of struct sockaddr.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr) -</div><div class="line">                           __SOCKADDR_COMMON_SIZE -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</div><div class="line">                           <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __SOCKADDR_COMMON(sa_prefix)\</span></div><div class="line">  sa_family_t sa_prefix##family</div></pre></td></tr></table></figure></p>
<p>从上面可以看出，__SOCKADDR_COMMON的宏定义中出现了##的使用方法。那它在宏定义中的意思是什么呢？</p>
<h3 id="详解"><a href="#详解" class="headerlink" title="##详解"></a>##详解</h3><p>##是一种分隔连接方式。它的作用是先分隔，然后进行强制连接。</p>
<p>在普通的宏定义中，预处理器一般吧空格解释为分段标志，然后进行相应的替换工作。但是这样做的结果是被替换的段之间会出现空格。如果我们不希望这些空格出现，可以使用##来代替空格。</p>
<p>如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> type1(type,name) type name_##type##_type</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> type2(type,name) type name##_##type##_type</span></div></pre></td></tr></table></figure></p>
<p>上述type1(int,c)将被替换为：int name_int_type<br>上述type2(int,c)将被替换为：int c_int_type</p>
<p>故我们再回去看<strong>SOCKADDR_COMMON的宏定义.
</strong>SOCKADDR<em>COMMON (sin</em>);将被解释为sa_family_t sin_family;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C语言宏定义相关&quot;&gt;&lt;a href=&quot;#C语言宏定义相关&quot; class=&quot;headerlink&quot; title=&quot;C语言宏定义相关&quot;&gt;&lt;/a&gt;C语言宏定义相关&lt;/h1&gt;&lt;p&gt;C语言宏定义在代码编写中很常见，它常会带来一些很高的性能和很方便的写法，在看Linux源码中
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="宏定义" scheme="http://yoursite.com/tags/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>protobuffer中string和bytes类型</title>
    <link href="http://yoursite.com/2017/06/07/protoBuffer%E4%B8%ADstring%E4%B8%8Ebyte%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/06/07/protoBuffer中string与byte类型区别/</id>
    <published>2017-06-07T10:04:59.000Z</published>
    <updated>2017-06-07T10:33:18.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="protobuffer中string和bytes类型"><a href="#protobuffer中string和bytes类型" class="headerlink" title="protobuffer中string和bytes类型"></a>protobuffer中string和bytes类型</h1><p>从上一节protobuffer的介绍中我们知道字符串类型在protobuffer中有string和bytes两种类型，那这两种类型有什么区别呢,什么时候用string,什么时候用bytes。在C++中两种类型分别对应的是什么类型.下面将揭开迷雾</p>
<h2 id="string与bytes区别"><a href="#string与bytes区别" class="headerlink" title="string与bytes区别"></a>string与bytes区别</h2><p>按照经验我们知道bytes一般适用于存储二进制数据的，但在C++中,string既可以存储ASCII文本字符串，也能存储任意多个\0的二进制序列，那两者的区别在哪里呢？</p>
<ul>
<li>string类型（protobuffer中的string，与C++区别开）不能存储非法的UTF-8字符，如果遇到该字符，序列化的时候将会出错。</li>
</ul>
<blockquote>
<p>[libprotobuf ERROR google/protobuf/wire_format.cc:1091] String field ‘str’ contains invalid UTF-8 data when serializing a protocol buffer. Use the ‘bytes’ type if you intend to send raw bytes.</p>
</blockquote>
<p>###出现上述错误的原因<br>这里从ProtoBuf的源码进行分析。protoBuf在序列化的过程中，都会调用SerializeFieldWithCachedSizes这个函数。我们看一下序列化string和bytes在序列化过程中的区别。</p>
<p>对于<strong>string</strong>类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> FieldDescriptor::TYPE_STRING: &#123;</div><div class="line">  <span class="built_in">string</span> scratch;</div><div class="line">  <span class="keyword">const</span> <span class="built_in">string</span>&amp; value = field-&gt;is_repeated() ?</div><div class="line">    message_reflection-&gt;GetRepeatedStringReference(</div><div class="line">      message, field, j, &amp;scratch) :</div><div class="line">    message_reflection-&gt;GetStringReference(message, field, &amp;scratch);</div><div class="line">  VerifyUTF8StringNamedField(value.data(), value.length(), SERIALIZE,</div><div class="line">                             field-&gt;name().c_str());</div><div class="line">  WireFormatLite::WriteString(field-&gt;number(), value, output);</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于<strong>bytes</strong>类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> FieldDescriptor::TYPE_BYTES: &#123;</div><div class="line">        <span class="built_in">string</span> scratch;</div><div class="line">        <span class="keyword">const</span> <span class="built_in">string</span>&amp; value = field-&gt;is_repeated() ?</div><div class="line">          message_reflection-&gt;GetRepeatedStringReference(</div><div class="line">            message, field, j, &amp;scratch) :</div><div class="line">          message_reflection-&gt;GetStringReference(message, field, &amp;scratch);</div><div class="line">        WireFormatLite::WriteBytes(field-&gt;number(), value, output);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看到，序列化string和bytes的区别主要在于:<strong>string类型序列化调用了VerifyUTF8StringNamedField函数检验string中是否有非法的UTF-8字符</strong>。其中VerifyUTF8StringNamedField实现如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> WireFormat::VerifyUTF8StringFallback(<span class="keyword">const</span> <span class="keyword">char</span>* data,</div><div class="line">                                          <span class="keyword">int</span> size,</div><div class="line">                                          Operation op,</div><div class="line">                                          <span class="keyword">const</span> <span class="keyword">char</span>* field_name) &#123;</div><div class="line">  <span class="keyword">if</span> (!IsStructurallyValidUTF8(data, size)) &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* operation_str = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">switch</span> (op) &#123;</div><div class="line">      <span class="keyword">case</span> PARSE:</div><div class="line">        operation_str = <span class="string">"parsing"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SERIALIZE:</div><div class="line">        operation_str = <span class="string">"serializing"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="comment">// no default case: have the compiler warn if a case is not covered.</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> quoted_field_name = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (field_name != <span class="literal">NULL</span>) &#123;</div><div class="line">      quoted_field_name = StringPrintf(<span class="string">" '%s'"</span>, field_name);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// no space below to avoid double space when the field name is missing.</span></div><div class="line">    GOOGLE_LOG(ERROR) &lt;&lt; <span class="string">"String field"</span> &lt;&lt; quoted_field_name &lt;&lt; <span class="string">" contains invalid "</span></div><div class="line">               &lt;&lt; <span class="string">"UTF-8 data when "</span> &lt;&lt; operation_str &lt;&lt; <span class="string">" a protocol "</span></div><div class="line">               &lt;&lt; <span class="string">"buffer. Use the 'bytes' type if you intend to send raw "</span></div><div class="line">               &lt;&lt; <span class="string">"bytes. "</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="string和bytes类型在C-和Java中的区别"><a href="#string和bytes类型在C-和Java中的区别" class="headerlink" title="string和bytes类型在C++和Java中的区别"></a>string和bytes类型在C++和Java中的区别</h2><p>protobuf类型在C++和java中的类型对应如下：</p>
<ul>
<li>在C++中，string和bytes的实现都是std::string类型。</li>
<li>在Java中string和bytes类型的实现分别是String和ByteString。</li>
</ul>
<p><strong>为什么bytes类型可以描述string类型，还需要string呢？</strong></p>
<p>根据论坛上说的，string类型在Java中有较多的API可供使用，而bytes较少，所以能定义为string的尽量定义为string，如果字段值确定或者可能含有非法的utf-8编码，则使用bytes类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;protobuffer中string和bytes类型&quot;&gt;&lt;a href=&quot;#protobuffer中string和bytes类型&quot; class=&quot;headerlink&quot; title=&quot;protobuffer中string和bytes类型&quot;&gt;&lt;/a&gt;protobuf
    
    </summary>
    
      <category term="序列化与反序列化" scheme="http://yoursite.com/categories/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="protobuffer" scheme="http://yoursite.com/tags/protobuffer/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux Regex正则表达式库</title>
    <link href="http://yoursite.com/2017/06/04/linux%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%93/"/>
    <id>http://yoursite.com/2017/06/04/linux正则表达式库/</id>
    <published>2017-06-04T09:08:00.000Z</published>
    <updated>2017-06-11T08:07:21.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Regex正则表达式库"><a href="#Linux-Regex正则表达式库" class="headerlink" title="Linux Regex正则表达式库"></a>Linux Regex正则表达式库</h1><p>标准的C/C++库不支持正则表达式。在Posix函数库中包含了<regex.h>正则表达式库。</regex.h></p>
<p>##　正则表达式匹配框架</p>
<p>标准的正则表达式匹配框架：</p>
<ul>
<li>编译正则表达式.</li>
<li>匹配正则表达式.</li>
<li>释放正则表达式.</li>
</ul>
<h3 id="编译正则表达式"><a href="#编译正则表达式" class="headerlink" title="编译正则表达式"></a>编译正则表达式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Regcomp</span><span class="params">(<span class="keyword">regex_t</span>* preg, <span class="keyword">const</span> <span class="keyword">char</span>* regex, <span class="keyword">int</span> cflags)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>preg : 用来保存编译之后的结果</li>
<li>regex :　正则表达式字符串，表示被编译的正则表达式。</li>
<li>cflags : 编译控制参数<ul>
<li>REG_EXTENDED : 使用扩展正则表达式模式</li>
<li>REG_ICASE　:　对规则中字符串不区分大小写</li>
<li>REG_NOSUB : 只检查是否有符合规则的子串。</li>
</ul>
</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>编译成功返回0,否则返回非0</p>
<h3 id="匹配正则表达式"><a href="#匹配正则表达式" class="headerlink" title="匹配正则表达式"></a>匹配正则表达式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  <span class="keyword">regoff_t</span> rm_so;</div><div class="line">  <span class="keyword">regoff_t</span> rm_eo;</div><div class="line">&#125; <span class="keyword">regmatch_t</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">regexec</span><span class="params">(<span class="keyword">const</span> <span class="keyword">regex_t</span>* preg,</span></span></div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">string</span>,</div><div class="line">            <span class="keyword">size_t</span> nmatch,</div><div class="line">            <span class="keyword">regmatch_t</span> pmatch[],</div><div class="line">            <span class="keyword">int</span> eflags);</div></pre></td></tr></table></figure>
<h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>preg : 上述编译之后的正则表达式regex_t指针。</li>
<li>string : 被匹配的字符串。</li>
<li>match :　被匹配的个数。告诉函数regexec最多可以把多少个匹配结果写入pmatch，一般为pmatch数组的长度。</li>
<li>pmatch : 匹配结果数组。<ul>
<li>rm_so : 满足子串在string中的起始偏移量</li>
<li>rm_eo : 满足子串在string中的结束偏移量</li>
</ul>
</li>
<li>eflags : 匹配的特性<ul>
<li>REG_NOTBOL : 是否为第一行</li>
<li>REG_NOTEOL : 是否是最后一行</li>
</ul>
</li>
</ul>
<h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>0表示匹配成功，1表示REG_NOMATCH。</p>
<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> regerror(<span class="keyword">int</span> errcode, <span class="keyword">const</span> <span class="keyword">regex_t</span>* preg, <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> buffer_size);</div></pre></td></tr></table></figure>
<h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>errcode : 来自regcomp和regexec的错误码。</li>
<li>preg : 编译后的正则表达式</li>
<li>buf : 缓冲区错误信息字符串</li>
<li>buffer_size : 缓冲区最大长度。</li>
</ul>
<h3 id="释放正则表达式"><a href="#释放正则表达式" class="headerlink" title="释放正则表达式"></a>释放正则表达式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//释放reget_t指针，无返回值。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">regfree</span><span class="params">(<span class="keyword">reget_t</span>* preg)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">regex_t</span> preg;</div><div class="line">	<span class="keyword">int</span> iErr = <span class="number">0</span>;</div><div class="line">	<span class="keyword">regmatch_t</span> subs[<span class="number">256</span>];</div><div class="line">	<span class="keyword">char</span> acReg[] = <span class="string">"[0-9a-zA-Z]+$"</span>;</div><div class="line"></div><div class="line">	iErr = regcomp(&amp;preg, acReg, REG_EXTENDED);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iErr) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"compile reg error\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	iErr = regexec(&amp;preg, <span class="string">"12345"</span>, <span class="number">256</span>, subs, <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (REG_NOMATCH == iErr) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"no match\n"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"match\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考资料:</p>
<ul>
<li><a href="http://crocodile.blog.51cto.com/2691566/967202" target="_blank" rel="external">http://crocodile.blog.51cto.com/2691566/967202</a></li>
<li><a href="http://crocodile.blog.51cto.com/2691566/967202" target="_blank" rel="external">http://crocodile.blog.51cto.com/2691566/967202</a></li>
<li><a href="http://crocodile.blog.51cto.com/2691566/967202" target="_blank" rel="external">http://crocodile.blog.51cto.com/2691566/967202</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-Regex正则表达式库&quot;&gt;&lt;a href=&quot;#Linux-Regex正则表达式库&quot; class=&quot;headerlink&quot; title=&quot;Linux Regex正则表达式库&quot;&gt;&lt;/a&gt;Linux Regex正则表达式库&lt;/h1&gt;&lt;p&gt;标准的C/C++库不
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Unix标准IO库相关函数总结之读写流(二)</title>
    <link href="http://yoursite.com/2017/06/03/Unix%E6%A0%87%E5%87%86IO%E5%BA%93%E5%87%BD%E6%95%B0%E4%B9%8B%E8%AF%BB%E5%86%99%E6%B5%81(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/06/03/Unix标准IO库函数之读写流(二)/</id>
    <published>2017-06-03T08:04:00.000Z</published>
    <updated>2017-06-04T11:34:24.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix标准IO库相关函数总结之读写流-二"><a href="#Unix标准IO库相关函数总结之读写流-二" class="headerlink" title="Unix标准IO库相关函数总结之读写流(二)"></a>Unix标准IO库相关函数总结之读写流(二)</h1><h2 id="读写流的三种方式"><a href="#读写流的三种方式" class="headerlink" title="读写流的三种方式"></a>读写流的三种方式</h2><p>一旦一个流被打开，则可以选择三种方式对其进行读写。</p>
<ul>
<li><strong>每次一个字符的IO</strong>，一次读或者写一个字符，如果流是带缓冲的,则标准IO函数处理所有的缓冲。</li>
<li>每次一行的IO。每次读写一行数据，可以使用fgets和fputs函数，但是要说明最大行的长度。</li>
<li>直接IO。通常使用fread和fwrite函数。</li>
</ul>
<h2 id="一个字符的IO"><a href="#一个字符的IO" class="headerlink" title="一个字符的IO"></a>一个字符的IO</h2><h3 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h3><p>通常使用以下三个函数进行一个字符的读。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span><span class="params">(FILE*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h4><p>这三个函数都用于一个字符的读取。其区别和联系如下：</p>
<ul>
<li><strong>getchar()相当于getc(stdin)</strong>。即每次从标准输入流读入一个字符。<strong>实质上getc是宏</strong>。</li>
<li>getc和fgetc的区别是<strong>getc可以被实现为宏，而fgetc不能被实现为宏</strong>。这就意味着:<ul>
<li>getc的参数不能是具有副作用的表达式，因为它的值可能被计算多次。</li>
<li>fgetc是一个函数，可以获得其地址， 这就允许将fgetc作为参数传递给另一个函数。</li>
<li>调用fgetc时间比getc时间长，因为调用宏的时间更短。</li>
</ul>
</li>
</ul>
<blockquote>
<p>有副作用的表达式是指：表达式的作用本质是用于计算的，原则上只返回一个计算结果，而不会改变表达式中的变量的值。这种<strong>不改变表达式中变量值的表达式叫做无副作用的表达式</strong>。如：x+y，y-z等。除此之外，若<strong>表达式中变量的值被改变则成为有副作用的表达式</strong>，如x++，y+=2;</p>
<p>由于在宏中宏可能出现在程序的很多位置，也就是表达式会被计算多次，这个时候若表达式有副作用就会GG。</p>
</blockquote>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>这三个函数的返回值都是int类型，这三个函数在返回下一个字符的时候，将其unsigned char类型转换为int。说明无符号的理由是，如果最高位为1，也不会使返回值为负。返回整形的理由是<strong>这样既可以返回所有的字符，也可以返回出错或到达文件为的指示值</strong>。</p>
<p>注意不管是到达文件为还是出错，这个时候三个函数的返回值都一样。为了区分这两种情况，常调用ferror或feof函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//用于判断流fp是否遇到读取错误，若读取错误，返回非零值，否则返回0。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ferror</span><span class="params">(FILE* fp)</span></span>;</div><div class="line"><span class="comment">//用于判断流是否遇到文件结尾，若到达文件结尾，返回非零值，否则返回0.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">(FILE* fp)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearerr</span><span class="params">(FILE* fp)</span></span>;</div></pre></td></tr></table></figure>
<p>在大多数的实现中，为每个流在FILE对象中维护了两个标志：</p>
<ul>
<li>出错标志</li>
<li>文件结束标志</li>
</ul>
<p>调用clearerr可以清除这两个标志。</p>
<h3 id="压送字符到流中。"><a href="#压送字符到流中。" class="headerlink" title="压送字符到流中。"></a>压送字符到流中。</h3><p>从流中读取字符以后，可以使用ungetc将字符押送回流中，压回的字符又可以从流中读出，读出的顺序与压送的顺序相反。<strong>压送的字符不会被写到流中。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ungetc</span><span class="params">(<span class="keyword">int</span> c, FILE* fp)</span></span>;</div></pre></td></tr></table></figure></p>
<p>###输出函数<br>输出函数为以下三个，与输入对应，区别与联系和输入函数相同。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c, FILE* fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> c, FILE* fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span> c)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	FILE* test = fopen(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">	<span class="keyword">char</span> a;</div><div class="line">	<span class="keyword">while</span> ((a =getc(test)) != EOF) &#123;</div><div class="line">		putc(a, <span class="built_in">stdout</span>);</div><div class="line">		putc(<span class="string">'\n'</span>, <span class="built_in">stdout</span>);</div><div class="line">	&#125;</div><div class="line">	ungetc(<span class="string">'1'</span>, test);</div><div class="line">	ungetc(<span class="string">'2'</span>, test);</div><div class="line">	putc(getc(test), <span class="built_in">stdout</span>);</div><div class="line">	putc(getc(test), <span class="built_in">stdout</span>);</div><div class="line">	<span class="keyword">if</span> (ferror(test)) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"this is the read error\n"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (feof(test)) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"this is the eof\n"</span>);</div><div class="line">	&#125;</div><div class="line">	fclose(test);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一行的IO"><a href="#一行的IO" class="headerlink" title="一行的IO"></a>一行的IO</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>标准IO中提供了一下两个函数进行一行的读取：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fgets</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">restrict</span> buf, <span class="keyword">int</span> n, FILE* fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">gets</span><span class="params">(<span class="keyword">char</span>* buf)</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>若读取成功返回buf，若读取失败或者读取到文件结尾返回NULL.</p>
<h4 id="区别与联系-1"><a href="#区别与联系-1" class="headerlink" title="区别与联系"></a>区别与联系</h4><ul>
<li>对于fgets必须指定缓冲区的长度n.此函数一直读到下一个换行符为止，但是<strong>不能超过n-1个字符</strong>，读入的字符将被送入缓冲区，该缓冲区以null结尾。若改行包含换行符超过了n-1个字符，fgets只返回一个不完整的行。下一次读取的时候将继续从该行继续往下读。</li>
<li>gets函数用于从标准输入读取，但是gets不包含缓冲区的长度，所以在读取的时候可能会出现缓冲区溢出的情况。<strong>一般最好不要用gets函数</strong>.</li>
<li><strong>gets函数不将换行符存入缓冲区，而fgets将换行符存入缓冲区</strong>。</li>
</ul>
<blockquote>
<p>虽然ISO要求提供gets函数，但一般使用fgets不要使用gets函数。</p>
</blockquote>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对应的，标准IO提供了以下连个函数进行输出：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> buf, FILE* <span class="keyword">restrict</span> fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* buf)</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>成功返回非负值，失败返回EOF。</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul>
<li>fputs将一个以null结尾的字符串写到指定的流，但是<strong>null不写出</strong>，注意这不是每次输出一行，而取决于缓冲区中的内容。</li>
<li>puts将一个以null结尾的字符串写到指定的流，<strong>null不写出，但是在最后又添加了一个换行符</strong>。</li>
<li>一般情况下使用fgets和fputs，不适用gets和puts函数。</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	FILE* fp = fopen(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">	<span class="keyword">char</span> buf[<span class="number">5</span>];</div><div class="line">	<span class="keyword">while</span> (fgets(buf, <span class="number">5</span>, fp)) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="直接IO"><a href="#直接IO" class="headerlink" title="直接IO"></a>直接IO</h2><p>直接IO通常用于对二进制文件的读写，除此之外也可以对文本文件进行读写。其中对二进制文件的读写只能用直接IO的方式，因为二进制文件中可能含有null字符，会导致使用行或者字符获取时出现错误。直接IO进行读写的两个函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">size_t</span> fread(<span class="keyword">void</span>* <span class="keyword">restrict</span> ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nobj, FILE* fp);</div><div class="line"></div><div class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="keyword">restrict</span> ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nobj, FILE* fp);</div></pre></td></tr></table></figure></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>ptr：为缓冲区指针</li>
<li>size：为一个结构体（类型）的大小</li>
<li>nobj：结构体的个数，若在fread中说明将要写入nobj个大小为size的结构体(类型)，若为fwrite，则为要从流fp中读取nobj个大小为size的数据</li>
<li>fp：文件指针</li>
</ul>
<h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><p>返回值为实际读取或写入的对象的个数。对于fread，若文件出错或者读到文件结尾处都可以少于nobj，对于fwrite，若返回值小于nobj，则写入出错。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用这两个函数存在一个问题就是，他们只能用于读写在同一个系统上已写的数据。若是通过网络挂载的文件则不可行。<br>fread,fwrie可移植，而read,write不可移植。</p>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>格式化输出有以下几个函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> format, ...)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE* <span class="keyword">restrict</span> fp, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> format, ...)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dprintf</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> format, ...)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">restrict</span> buf, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> format, ...)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">restrict</span> buf, <span class="keyword">size_t</span> n, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> format, ...)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h3><p>前三个函数若输出成功，则返回输出字符的个数；若输出出错，则返回负值。</p>
<p>sprintf和snprintf若执行成功，则返回存入buf中的字符串的长度，否则返回负值。</p>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><ul>
<li>printf：向标准输出输出字符串。</li>
<li>fprintf:向标准文件流输fp出字符串。</li>
<li>dprintf：向文件描述符所指向的文件输出字符串。</li>
<li>sprintf:向缓冲区buf写入字符串。</li>
<li>snprintf:<strong>安全的向缓冲区buf写入字符串并指定缓冲区的最大长度</strong>.一般用此函数代替sprintf</li>
</ul>
<h3 id="格式化字符串format的格式"><a href="#格式化字符串format的格式" class="headerlink" title="格式化字符串format的格式"></a>格式化字符串format的格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其中[]表示可选部分，converter不可选</span></div><div class="line">%[flags][fldwidth][precision][lenmodifier]converter</div></pre></td></tr></table></figure>
<ul>
<li>flags ：　是该输出的标志，其包含如下几个值：<ul>
<li>‘ : 将整数按千位分组字符。</li>
<li><ul>
<li>: 在字段内左对齐输出。</li>
</ul>
</li>
<li><ul>
<li>: 总是显示正负号</li>
</ul>
</li>
<li>(空格) : 如果第一个字符不是正负号，则在其前面加上一个空格</li>
<li><h1 id="指定另一种转换形式，如对于16进制，在前面加0x"><a href="#指定另一种转换形式，如对于16进制，在前面加0x" class="headerlink" title=": 指定另一种转换形式，如对于16进制，在前面加0x"></a>: 指定另一种转换形式，如对于16进制，在前面加0x</h1></li>
<li>0 ： 添加前导0进行填充</li>
</ul>
</li>
<li>fldwidth :　说明最小字段宽度，若参数字段小于此宽度，多余位置用空格填充。</li>
<li>precision : 浮点数精度。前导为.</li>
</ul>
<blockquote>
<p>注意：fldwidth可以用*作为占位符，然后在后面对其进行指定。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//      10.10</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%10.2lf"</span>, <span class="number">10.1</span>);</div><div class="line">  <span class="comment">//与上面写法等效。</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%*.*lf"</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">10.1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix标准IO库相关函数总结之读写流-二&quot;&gt;&lt;a href=&quot;#Unix标准IO库相关函数总结之读写流-二&quot; class=&quot;headerlink&quot; title=&quot;Unix标准IO库相关函数总结之读写流(二)&quot;&gt;&lt;/a&gt;Unix标准IO库相关函数总结之读写流(二)
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="标准IO" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86IO/"/>
    
      <category term="FILE" scheme="http://yoursite.com/tags/FILE/"/>
    
      <category term="fopen" scheme="http://yoursite.com/tags/fopen/"/>
    
      <category term="freopen" scheme="http://yoursite.com/tags/freopen/"/>
    
  </entry>
  
  <entry>
    <title>Unix标准IO库相关函数总结之打开关闭流(一)</title>
    <link href="http://yoursite.com/2017/05/31/Unix%E6%A0%87%E5%87%86IO%E5%BA%93%E5%87%BD%E6%95%B0%E4%B9%8B%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E6%B5%81(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/05/31/Unix标准IO库函数之打开关闭流(一)/</id>
    <published>2017-05-31T12:04:00.000Z</published>
    <updated>2017-06-03T12:35:41.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix标准IO库相关函数总结之打开关闭流-一"><a href="#Unix标准IO库相关函数总结之打开关闭流-一" class="headerlink" title="Unix标准IO库相关函数总结之打开关闭流(一)"></a>Unix标准IO库相关函数总结之打开关闭流(一)</h1><h2 id="Unix标准IO类型FILE"><a href="#Unix标准IO类型FILE" class="headerlink" title="Unix标准IO类型FILE"></a>Unix标准IO类型FILE</h2><p>在Unix相关的文件IO中几乎所有的函数都用到了文件描述符，文件描述符是打开一个文件时返回的一个可用的最小的文件描述标识。相应的在Unix标准IO相关的函数中，几乎每个函数都用到了FILE数据类型。本小结简单介绍一下FILE结构体的内容。</p>
<p>FILE实际上是一个struct的typedef,可以在/usr/include/stdio.h中找到它的定义为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> _IO_FILE FILE;</div></pre></td></tr></table></figure></p>
<p>_IO_FILE_的定义在文件/usr/include/libio.h中，我们可以看到它的具体定义为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">struct</span> _IO_FILE &#123;</div><div class="line">  <span class="keyword">int</span> _flags;           <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></div><div class="line"></div><div class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></div><div class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></div><div class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></div><div class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></div><div class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></div><div class="line"></div><div class="line">  <span class="keyword">struct</span> _IO_marker *_markers;</div><div class="line"></div><div class="line">  <span class="keyword">struct</span> _IO_FILE *_chain;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> _fileno;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">  <span class="keyword">int</span> _blksize;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  <span class="keyword">int</span> _flags2;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></div><div class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</div><div class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</div><div class="line"></div><div class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class="line"></div><div class="line">  _IO_lock_t *_lock;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>从上面的struct中可以观察到FILE中是有文件描述符标志的，即为fileno参数。</p>
<h2 id="打开标准IO流"><a href="#打开标准IO流" class="headerlink" title="打开标准IO流"></a>打开标准IO流</h2><p>打开标准文件IO流的方法有如下三个：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">FILE* <span class="title">fopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> pathname, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> type)</span></span>;</div><div class="line"></div><div class="line"><span class="function">FILE* <span class="title">freopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> pathname, <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">restrict</span> type, FILE* <span class="keyword">restrict</span> fp)</span></span>;</div><div class="line"></div><div class="line"><span class="function">FILE* <span class="title">fdopen</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span>* type)</span></span>;</div></pre></td></tr></table></figure></p>
<p>上述三个函数<strong>区别以及使用场景</strong>说明:</p>
<ul>
<li>fopen的作用是打开一个指定文件路径的文件流。</li>
<li>freopen的作用是在一个指定的留上打开一个指定文件。如果当前流已经打开，则先关闭该流；若该流被重定向，则清除重定向。该函数常用于<strong>将一个指定的文件打开为一个默认的流</strong>，如若想使用printf函数将打印出来的内容输出到一个指定文件中，此时可以讲stdout重定向到指定的文件路径并指定打开模式。</li>
<li>fdopen的作用是将一个已经打开的文件描述符(该文件描述符可能是open,dup,socket等获取的)绑定到一个标准IO流上。此函数<strong>常用于由管道和网络通信通道函数返回的文件描述符</strong>，因为这些无法显式的指定文件。</li>
</ul>
<p><strong>参数说明：</strong></p>
<ul>
<li>pathname: 文件路径，相对或绝对</li>
<li>type： 打开模式（r,w,a,r+,w+,a+以及所有后面加b）</li>
</ul>
<p><strong>打开模式说明：</strong></p>
<ul>
<li>r  : 读模式</li>
<li>w  : 写模式，在写之前将原有文件内容全部清楚</li>
<li>a  : 追加模式，offset为文件结尾</li>
<li>r+ : 读写模式(不删除文件原有内容，offset初始为文件开头)。如原有文件内容为”123456”,若以此模式打开文件并写入”abc”，此时写入之后的结果是”abc456”。</li>
<li>w+ : 读写模式(删除文件原有内容，offset为文件开头).如原有文件内容为”123456”,若以此模式打开文件并写入”abc”，此时写入之后的结果是”abc”。</li>
<li>a+ : 读写模式(offset为文件结尾).如原有文件内容为”123456”,若以此模式打开文件并写入”abc”，此时写入之后的结果是”123456abc”。</li>
</ul>
<p>上述所有的模式后面都加上b表示对二进制文件的操作(rb,wb,ab,rb+,wb+,ab+)。</p>
<blockquote>
<p>注意：对于fdopen函数由于文件已经由文件描述符打开，此时w模式时将不清除文件内容，追加模式不常见文件。</p>
<p>当以读写模式打开文件时候，将有一些限制。如果中间没有fflush,fseek,fsetpos以及rewind函数，标注输出之后不能直接进行输入;如果没有fseek,fsetpos或者rewind，或者一个输入没有到达文件尾，则输入操作之后不能跟输出操作。</p>
</blockquote>
<h2 id="关闭标准文件流"><a href="#关闭标准文件流" class="headerlink" title="关闭标准文件流"></a>关闭标准文件流</h2><p>一般情况下在关闭文件流之前通常先使用fflush刷新缓冲区防止数据丢失，关闭标准文件流使用的函数为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">int fclose(FILE* fp);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix标准IO库相关函数总结之打开关闭流-一&quot;&gt;&lt;a href=&quot;#Unix标准IO库相关函数总结之打开关闭流-一&quot; class=&quot;headerlink&quot; title=&quot;Unix标准IO库相关函数总结之打开关闭流(一)&quot;&gt;&lt;/a&gt;Unix标准IO库相关函数总结之
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="标准IO" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86IO/"/>
    
      <category term="FILE" scheme="http://yoursite.com/tags/FILE/"/>
    
      <category term="fopen" scheme="http://yoursite.com/tags/fopen/"/>
    
      <category term="freopen" scheme="http://yoursite.com/tags/freopen/"/>
    
  </entry>
  
  <entry>
    <title>TCP状态转换图</title>
    <link href="http://yoursite.com/2017/05/30/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BTCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/05/30/Unix网络编程之TCP状态转换图/</id>
    <published>2017-05-30T09:01:00.000Z</published>
    <updated>2017-06-13T02:04:48.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP状态转换图"><a href="#TCP状态转换图" class="headerlink" title="TCP状态转换图"></a>TCP状态转换图</h1><p>TCP涉及连接建立和连接终止的操作可以用状态转换图来说明。</p>
<p>TCP为一个连接定义了11中状态，并且规定了如何基于当前状态以及该状态下接收的分节(TCP报文段)从一个状态转换为另一个状态。其状态转换图如下所示：</p>
<p><img src="../assets/images/TCP状态转化图.jpg" alt=""></p>
<p>具体转化过程和转换条件如上图所示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP状态转换图&quot;&gt;&lt;a href=&quot;#TCP状态转换图&quot; class=&quot;headerlink&quot; title=&quot;TCP状态转换图&quot;&gt;&lt;/a&gt;TCP状态转换图&lt;/h1&gt;&lt;p&gt;TCP涉及连接建立和连接终止的操作可以用状态转换图来说明。&lt;/p&gt;
&lt;p&gt;TCP为一个连接定
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
      <category term="状态转换图" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>TCP的连接与建立</title>
    <link href="http://yoursite.com/2017/05/30/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BTCP%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/05/30/Unix网络编程之TCP的连接与建立过程/</id>
    <published>2017-05-30T08:43:00.000Z</published>
    <updated>2017-06-13T02:05:13.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP的连接与建立"><a href="#TCP的连接与建立" class="headerlink" title="TCP的连接与建立"></a>TCP的连接与建立</h1><p>最常用的传输层协议包括TCP和UDP两种，当然除此之外还有其他协议。UDP是一种既不面向连接有不可靠的传输层协议，而TCP是一种面向连接的可靠的传输层协议，为了达到这个目的，其在设计上使用了差错检测，重传，累计确认，定时器以及用于序号和确认好的字段等等。</p>
<h2 id="TCP的特点"><a href="#TCP的特点" class="headerlink" title="TCP的特点"></a>TCP的特点</h2><p>TCP协议有以下特点：</p>
<ul>
<li>面向连接：TCP的连接不是一条电路的或者虚电路，其连接状完全保留在两个端系统中。</li>
<li>可靠传输：TCP连接在传输消息的过程中保证了数据的可靠性，即保证数据在传输过程中不会丢失。</li>
<li>点对点：一条TCP连接只能连接两个端点。</li>
<li>全双工：如果一台主机上的进程A和另一台主机上的进程B建立了一条TCP连接，那么应用层数据就可以从A进程发送到B进程的<strong>同时</strong>，B进程也可以发送数据到A进程。</li>
</ul>
<h2 id="TCP报文段结构"><a href="#TCP报文段结构" class="headerlink" title="TCP报文段结构"></a>TCP报文段结构</h2><p>TCP报文段是由首部字段和一个数据字段组成的，数据字段中包含应用程序需要发送的数据。通常报文段中通过MSS(max segment size)来限制报文段数据字段的最大长度。报文段的结构如下：</p>
<p><img src="../assets/images/TCP报文.png" alt=""></p>
<p>说明：</p>
<ul>
<li>源端口号与目的端口号指的是客户端和服务器端应用程序分别使用的端口号。用于识别主机上某一个特定的应用程序。</li>
<li>序号(seq)为TCP报文段中数据其实字节的序号。</li>
<li>确认号字段为(ACK)期待接收的下一个TCP报文段中数据的序号。</li>
<li>首部长度：首部长度表示当前TCP报文的首部的长度，一般为20，即可以看到表中报文首部的长度为20个字节。但是有时选项中有一些内容，这个时候首部长度大于20。</li>
<li>保留字：NULL</li>
<li>标志位：当某一些标志位被设置的时候表达一些特定的含义。<ul>
<li>UGR标识报文段中存在着紧急数据。其中紧急数据的指针字段存放在后面16位的紧急数据指针中。</li>
<li>ACK标识确认号字段生效，一般连接建立之后的内个报文段的ACK被会被设置</li>
<li>PSH:不常用</li>
<li>SYN:连接建立时的客户端发送的服务端的第一个报文段和服务端响应客户端的报文段中被设置，标识当前为建立连接的过程。</li>
<li>FIN：与SYN类似，它是在断开连接时被设置。</li>
</ul>
</li>
<li>互联网检验和：用于错误检测</li>
<li>紧急数据指针：即为上述当UGR标志被设置时标识紧急数据的指针。</li>
<li>选项：应用程序中自定义的首部的其他内容。</li>
<li>数据：应用程序发送的真正数据。</li>
</ul>
<h2 id="TCP建立连接（三次握手）"><a href="#TCP建立连接（三次握手）" class="headerlink" title="TCP建立连接（三次握手）"></a>TCP建立连接（三次握手）</h2><p>TCP连接的过程可以简单描述为以下几个过程：</p>
<ul>
<li>第一次握手：客户端发送请求连接报文段到服务器。此报文段中SYN被设置为1，同时随机或者指定一个起始序号x。此时客户端进入SYN_SENT（同步已发送）状态。</li>
<li>第二次握手：服务端收到请求报文段之后，向客户端发送确认报文段。确认报文段中ACK设置为1,SYN设置为1,确认号为x+1，同时为自己生成一个序号y。此时服务端进入SYN_RECV状态（同步接受到）。</li>
<li>第三次握手：客户端收到服务端的确认报文段之后，还要给服务端发送一个确认报文段。这个报文段中ACK被设置为1，确认号为y+1。此报文段可以携带数据。</li>
</ul>
<p>经过上述三个步骤之后，TCP连接建立成功。客户端进入连接建立状态(ESTABLISHED)。然后就可以相互发送数据了。</p>
<p><img src="../assets/images/三次连接.png" alt=""></p>
<blockquote>
<p>为什么要经过三次握手？</p>
<p>三次握手的目的是为了防止失效的报文段突然传送到服务端而出现问题。</p>
<p>上述已经失效的报文段是指：如果客户端在发送第一次连接请求的过程中，由于网络原因导致此报文段在某个网络节点滞留较长时间，这个时候TCP传输协议会视为此报文段已经丢失，于是重传。若此滞留的报文段在连接断开之后才到达服务器，这个时候就会出现问题。</p>
<p>若不是使用三次握手，服务器收到失效的报文段之后会建立连接，故之后无法释放TCP资源。导致资源浪费以致于长期会使服务器宕机。</p>
</blockquote>
<h3 id="三次握手过程中服务器和客户端程序的行为"><a href="#三次握手过程中服务器和客户端程序的行为" class="headerlink" title="三次握手过程中服务器和客户端程序的行为"></a>三次握手过程中服务器和客户端程序的行为</h3><ul>
<li>服务器必须准备好接受外来的连接，调用socket(),bind()以及listen三个函数来完成，我们称为被动打开。</li>
<li>客户端通过调用connect发起主动打开连接，向服务器发送SYN(同步)包，connect函数阻塞。</li>
<li>服务器通过accept接收到客户端来送的TCP包，需要进行确认同事发送自己的SYN包，此时accept函数阻塞，</li>
<li>客户端收到服务器的SYN包，connect函数返回，并向服务器发送确认。服务器接收到确认之后accept函数返回。</li>
</ul>
<h2 id="TCP连接断开（四次挥手）"><a href="#TCP连接断开（四次挥手）" class="headerlink" title="TCP连接断开（四次挥手）"></a>TCP连接断开（四次挥手）</h2><p>由于TCP连接是全双工的，因此每个方向都必须单独的关闭，也就是发送方和接收方都需要FIN和ACK。<strong>客户端和服务器都可以首先主动发送连接终止的报文</strong>。当其中一方发送完数据之后即可向另一方发出连接断开的请求。当收到FIN意味着这一方向上没有数据流动，但是一方收到FIN之后仍然可以发送数据。四次挥手的具体过程如下：</p>
<ol>
<li>此时TCP连接两端都处于ESTABLISHED的状态，客户端停止发送数据，并发出一个FIN报文段。首部FIN设置为1,序号seq=u(u为客户端传输数据的字后一个字节的序号加1)。客户端进入FIN_WAIT-1状态。</li>
<li>服务端回复确认报文段，确认号为ack=u+1，序号为seq=v(v为服务端传输数据的最后一个字节序号加1)，服务端进入close_wait状态。现在TCP连接处于半关闭状态，服务端如果继续发送数据，客户端依然接收。</li>
<li>客户端收到确认报文段,进入FIN_WAIT-2状态，服务端发送完数据之后，发出FIN报文段，FIN被置位1，确认号为ack=u+1，然后进入LAST_ACK状态。</li>
<li>客户端回复确认报文段。ACK=1，确认号为sck=w+1(w为半开半闭时收到的最后一个字节数据的编号)，序号为seq=u+1，然后进入TIME_WAIT状态。</li>
</ol>
<p>一段时间(大约4分钟)之后等待状态结束，连接两端进入CLOSED状态。<br><img src="../assets/images/四次挥手.png" alt=""></p>
<blockquote>
<p>参考链接：</p>
<ul>
<li><a href="https://book.douban.com/subject/26176870/" target="_blank" rel="external">计算机网络 自顶向下方法</a></li>
<li><a href="https://book.douban.com/subject/4859464/" target="_blank" rel="external">Unix网络编程</a></li>
<li><a href="http://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">http://blog.csdn.net/whuslei/article/details/6667471/</a></li>
<li><a href="http://blog.csdn.net/wenqian1991/article/details/39667131" target="_blank" rel="external">http://blog.csdn.net/wenqian1991/article/details/39667131</a></li>
<li><a href="https://cnbin.github.io/blog/2015/07/01/chuan-shu-ceng-:tcp-xie-yi/" target="_blank" rel="external">https://cnbin.github.io/blog/2015/07/01/chuan-shu-ceng-:tcp-xie-yi/</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP的连接与建立&quot;&gt;&lt;a href=&quot;#TCP的连接与建立&quot; class=&quot;headerlink&quot; title=&quot;TCP的连接与建立&quot;&gt;&lt;/a&gt;TCP的连接与建立&lt;/h1&gt;&lt;p&gt;最常用的传输层协议包括TCP和UDP两种，当然除此之外还有其他协议。UDP是一种既不
    
    </summary>
    
      <category term="Unix网络编程" scheme="http://yoursite.com/categories/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
      <category term="三次握手" scheme="http://yoursite.com/tags/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="四次挥手" scheme="http://yoursite.com/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    
      <category term="传输层协议" scheme="http://yoursite.com/tags/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>硬链接与软链接的区别</title>
    <link href="http://yoursite.com/2017/05/27/%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E9%93%BE%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/05/27/硬链接和软链接的区别/</id>
    <published>2017-05-27T01:45:00.000Z</published>
    <updated>2017-05-27T01:46:50.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬链接与软链接的区别"><a href="#硬链接与软链接的区别" class="headerlink" title="硬链接与软链接的区别"></a>硬链接与软链接的区别</h1><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;硬链接与软链接的区别&quot;&gt;&lt;a href=&quot;#硬链接与软链接的区别&quot; class=&quot;headerlink&quot; title=&quot;硬链接与软链接的区别&quot;&gt;&lt;/a&gt;硬链接与软链接的区别&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developer
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="链接，硬链接，软连接" scheme="http://yoursite.com/tags/%E9%93%BE%E6%8E%A5%EF%BC%8C%E7%A1%AC%E9%93%BE%E6%8E%A5%EF%BC%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>rapidjson Stream</title>
    <link href="http://yoursite.com/2017/05/27/rapidJsonStream/"/>
    <id>http://yoursite.com/2017/05/27/rapidJsonStream/</id>
    <published>2017-05-27T01:36:00.000Z</published>
    <updated>2017-05-27T01:40:41.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rapidjson-Stream-待更新"><a href="#rapidjson-Stream-待更新" class="headerlink" title="rapidjson Stream(待更新)"></a>rapidjson Stream(待更新)</h1><blockquote>
<p>本系列文章以例子的方式进行呈现。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include "rapidjson/rapidjson.h"</div><div class="line">#include "rapidjson/document.h"</div><div class="line">#include "rapidjson/stringbuffer.h"</div><div class="line">#include "rapidjson/writer.h"</div><div class="line">#include "rapidjson/filereadstream.h"</div><div class="line">#include "cstdio"</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace rapidjson;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  const char json[] = "[1, 2, 3]";</div><div class="line">  StringStream s(json);</div><div class="line">  Document document;</div><div class="line">  document.ParseStream(s);</div><div class="line"></div><div class="line">  for (int i = 0; i &lt; 3; i++)</div><div class="line">    std::cout &lt;&lt; document[i].GetInt() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  StringBuffer SB;</div><div class="line">  Writer&lt;StringBuffer&gt; writer(SB);</div><div class="line">  document.Accept(writer);</div><div class="line">  std::cout &lt;&lt; SB.GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  FILE* fp = fopen("test.json", "rb");</div><div class="line"></div><div class="line">  char readBuffer[65535];</div><div class="line">  FileReadStream is(fp, readBuffer, sizeof(readBuffer));</div><div class="line"></div><div class="line">  document.ParseStream(is);</div><div class="line">  fclose(fp);</div><div class="line">  for (Value::ConstMemberIterator it = document.MemberBegin();</div><div class="line">        it != document.MemberEnd(); it++)</div><div class="line">        std::cout &lt;&lt; (it-&gt;name).GetString() &lt;&lt; std::endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rapidjson-Stream-待更新&quot;&gt;&lt;a href=&quot;#rapidjson-Stream-待更新&quot; class=&quot;headerlink&quot; title=&quot;rapidjson Stream(待更新)&quot;&gt;&lt;/a&gt;rapidjson Stream(待更新)&lt;/h1
    
    </summary>
    
      <category term="rapidjson学习" scheme="http://yoursite.com/categories/rapidjson%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="rapidjson" scheme="http://yoursite.com/tags/rapidjson/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="stream" scheme="http://yoursite.com/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>rapidjson Schema</title>
    <link href="http://yoursite.com/2017/05/27/rapidjsonSchema/"/>
    <id>http://yoursite.com/2017/05/27/rapidjsonSchema/</id>
    <published>2017-05-27T01:35:00.000Z</published>
    <updated>2017-05-27T01:41:30.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rapidjson-Schema"><a href="#rapidjson-Schema" class="headerlink" title="rapidjson Schema"></a>rapidjson Schema</h1><blockquote>
<p>本系列文章以例子的方式进行呈现。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* JsonSchema本质上是一个json，其作用是用于校验Json，使用schema对json进行校验，</div><div class="line">* 可以让代码安全的去当问DOM，而不需要去检查类型或者键值的存在等等。这也能确保输</div><div class="line">* 出的json符合特定的schema。</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rapidjson/schema.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rapidjson/stringbuffer.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> rapidjson;</div><div class="line"></div><div class="line"><span class="comment">/*使用JsonSchema校校验json格式的流程:</span></div><div class="line">*       1. 将schema(模板)解析成一个Document</div><div class="line">*       2. 然后将Document编译成一个SchemaDocument</div><div class="line">*       3. 通过上述SchemaDocument创建一个SchemaValidator。</div><div class="line">*       4. 然后通过document.Accept(validator)去校验一个json，获取校验结果。</div><div class="line">*注意：</div><div class="line">*       1. 一个SchemaDocument能被多个SchemaValidator引用，他不会被SchemaValidator修改。</div><div class="line">*       2. 可以重复使用SchemaValidator校验多个文件。在校验其他文件之前，必须先调用validator.Reset()。</div><div class="line">*JsonSchema的格式：</div><div class="line">*       1. JsonSchema实质上是一个json数据。</div><div class="line">*       2. JsonSchema与其他json数据不同的是它在每一个对象和元素中定义了他们的类型type，属性(如object的properties，以及integer的minimum等等)，</div><div class="line">*           同时，我们可以通过JsonSchema对json的值的类型以及取值范围等进行限定。schema中必须的值需要显示的声明在required中。</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ValidateJson</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> testSchema = <span class="string">"&#123;\"type\":\"object\", \"properties\":&#123;\"code\":&#123;\"type\":\"string\"&#125;, \"int\":&#123;\"type\":\"integer\", \"minimum\":0&#125;&#125;, \"required\":[\"int\",\"code\"]&#125;"</span>;</div><div class="line">  Document sd;</div><div class="line">  <span class="keyword">if</span> (sd.Parse(testSchema.c_str()).HasParseError()) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"jsonSchema is not valid : %s"</span>, testSchema.c_str());</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//创建SchemaDocument</span></div><div class="line">  <span class="function">SchemaDocument <span class="title">schema</span><span class="params">(sd)</span></span>;</div><div class="line"></div><div class="line">  Document d;</div><div class="line">  <span class="keyword">if</span> (d.Parse(<span class="string">"&#123;\"code\":123, \"int\":1&#125;"</span>).HasParseError()) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Document is not a valid json"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function">SchemaValidator <span class="title">validator</span><span class="params">(schema)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!d.Accept(validator)) &#123;</div><div class="line">    StringBuffer sb;</div><div class="line">    validator.GetInvalidSchemaPointer().StringifyUriFragment(sb);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid schema: %s\n"</span>, sb.GetString());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid keyword: %s\n"</span>, validator.GetInvalidSchemaKeyword());</div><div class="line">    sb.Clear();</div><div class="line">    validator.GetInvalidDocumentPointer().StringifyUriFragment(sb);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid document:%s\n "</span>, sb.GetString());</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"符合schemas模式\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  ValidateJson();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rapidjson-Schema&quot;&gt;&lt;a href=&quot;#rapidjson-Schema&quot; class=&quot;headerlink&quot; title=&quot;rapidjson Schema&quot;&gt;&lt;/a&gt;rapidjson Schema&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本
    
    </summary>
    
      <category term="rapidjson学习" scheme="http://yoursite.com/categories/rapidjson%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="rapidjson" scheme="http://yoursite.com/tags/rapidjson/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>rapidjson指针</title>
    <link href="http://yoursite.com/2017/05/27/rapidjson%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2017/05/27/rapidjson指针/</id>
    <published>2017-05-27T01:35:00.000Z</published>
    <updated>2017-05-27T01:41:40.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rapidjson指针"><a href="#rapidjson指针" class="headerlink" title="rapidjson指针"></a>rapidjson指针</h1><blockquote>
<p>本系列文章以例子的方式进行呈现。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rapidjson/document.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rapidjson/pointer.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> rapidjson;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">*     Json Pointer</div><div class="line">*     一个Json Pointer有一串（0至多个）token所组成，每个token之前都有/前缀。每个token</div><div class="line">*     可以是字符串或者数字。例如，给定一个json:&#123;</div><div class="line">*                                            "foo":["bar", "baz"],</div><div class="line">*                                            "pi":3.414</div><div class="line">*                                           &#125;</div><div class="line">*                               JsonPointer解析为:</div><div class="line">*                               1. "/foo"-&gt;["bar", "baz"]</div><div class="line">*                               2."/foo/0"-&gt;"bar"</div><div class="line">*                               3."/foo/1"-&gt;"baz"</div><div class="line">*                               4."pi"-&gt;3.414</div><div class="line">*       特别注意：一个空Json Pointer""解析为整个json</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  Document d;</div><div class="line"></div><div class="line">  <span class="comment">/*          创建、修改、访问dom元素</span></div><div class="line">  *           创建dom元素的方法: (两种都可以自动生成父值，可以同时创建几级)</div><div class="line">  *               1.Pointer("/Key").Set(document, "value"); key对应值为value</div><div class="line">  *               2.Pointer("/Key").Create(document). 此时创建出来的key对应的值为null</div><div class="line">  *           获取Dom元素的pointer：</div><div class="line">  *                1.Value* vptr = Pointer("/Key").Get(document)</div><div class="line">  *                2.Value&amp; vref = Pointer("/Key").GetWithDefault(document, "defaultValue");</div><div class="line">  *                       注意返回的是引用，如值不存在，则创建此键并深拷贝默认值。</div><div class="line">  *           交换:</div><div class="line">  *                 Pointer("/Key").Swap(document, value); //注意交换的是Value，不能为其他类型</div><div class="line">  *            删除：</div><div class="line">  *                 Pointer("/Key").Erase(document);</div><div class="line">  */</div><div class="line"></div><div class="line">  <span class="comment">/*            针对上述函数的辅助函数</span></div><div class="line">  *           SetValueByPointer(document, "/Key", "KeyValue");</div><div class="line">  *           CreateValueByPointer(document, "/Key");</div><div class="line">  *           GetValueByPointer(document, "/Key");</div><div class="line">  *           GetValueByPointerWithDefault(document, "/default", "defaultValue");</div><div class="line">  *           SwapValueByPointer(document, "/Key", Value); //必须为Value</div><div class="line">  *           EraseValueByPointer(document, "/Key");</div><div class="line">  */</div><div class="line"></div><div class="line">  <span class="comment">/*          Pointer相关函数说明</span></div><div class="line">  *           1.Pointer::Get() 或 GetValueByPointer() 函数并不修改 DOM。</div><div class="line">  *                  若那些 token 不能匹配 DOM 里的值，这些函数便返回 nullptr。</div><div class="line">  *                  使用者可利用这个方法来检查一个值是否存在。</div><div class="line">  *           2. Create()、GetWithDefault()、Set()、Swap()都会改变Dom.</div><div class="line">  *                  若一些父值不存在，就会创建它们。若父值类型不匹配 token，</div><div class="line">  *                   也会强行改变其类型。改变类型也意味着完全移除其 DOM 子树的内容</div><div class="line">  */</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">  *         Pointer中负号解析</div><div class="line">  *         1.在Get中,负号永远都是Key的名字</div><div class="line">  *         2.在Set中，若负号在数组的后面，则表示数组最后一个元素的下一个</div><div class="line">  *                   否则表示数组名。例：</div><div class="line">  *         d.Parse("&#123;\"foo\":[123]&#125;");</div><div class="line">  *         SetValueByPointer(d, "/foo/-", 456); // &#123; "foo" : [123, 456] &#125;</div><div class="line">  *         SetValueByPointer(d, "/-", 789);    // &#123; "foo" : [123, 456], "-" : 789 &#125;</div><div class="line">  */</div><div class="line"></div><div class="line">  <span class="comment">/*      字符串化</span></div><div class="line">  *     可以将一个Pointe字符串化，存储于字符串或者其他输出流。</div><div class="line">  *     如：</div><div class="line">  *     Pointer p(...);</div><div class="line">  *     StringBuffer sb;</div><div class="line">  *     p.StringFy(sb);</div><div class="line">  *     std::cout &lt;&lt; sb.GetString() &lt;&lt; std::endl;</div><div class="line">  */</div><div class="line"></div><div class="line"></div><div class="line">  Pointer(<span class="string">"/project"</span>).Set(d, <span class="string">"RapidJson"</span>);</div><div class="line">  Pointer(<span class="string">"/stars"</span>).Set(d, <span class="number">10</span>);</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d[<span class="string">"project"</span>].GetString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d[<span class="string">"stars"</span>].GetInt() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">if</span> (Value* stars = Pointer(<span class="string">"/stars"</span>).Get(d))</div><div class="line">  &#123;</div><div class="line">    stars-&gt;SetInt(stars-&gt;GetInt() + <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d[<span class="string">"stars"</span>].GetInt() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  Pointer(<span class="string">"/default"</span>).GetWithDefault(d, <span class="string">"defaultValue"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (d.HasMember(<span class="string">"default"</span>))</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d[<span class="string">"default"</span>].GetString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="function">Value <span class="title">swapValue</span><span class="params">(<span class="string">"SwapValue"</span>)</span></span>;</div><div class="line">  Pointer(<span class="string">"/default"</span>).Swap(d, swapValue);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d[<span class="string">"default"</span>].GetString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  Pointer(<span class="string">"/default"</span>).Erase(d);</div><div class="line">  <span class="keyword">if</span> (!d.HasMember(<span class="string">"default"</span>))</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d Erase default successful"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rapidjson指针&quot;&gt;&lt;a href=&quot;#rapidjson指针&quot; class=&quot;headerlink&quot; title=&quot;rapidjson指针&quot;&gt;&lt;/a&gt;rapidjson指针&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本系列文章以例子的方式进行呈现。&lt;/p&gt;

    
    </summary>
    
      <category term="rapidjson学习" scheme="http://yoursite.com/categories/rapidjson%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="rapidjson" scheme="http://yoursite.com/tags/rapidjson/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>rapidjson基本用法</title>
    <link href="http://yoursite.com/2017/05/27/rapidjson%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/05/27/rapidjson基本用法/</id>
    <published>2017-05-27T01:32:00.000Z</published>
    <updated>2017-05-27T01:47:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rapidjson基本用法"><a href="#rapidjson基本用法" class="headerlink" title="rapidjson基本用法"></a>rapidjson基本用法</h1><blockquote>
<p>本系列文章以例子的方式进行呈现。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div></pre></td><td class="code"><pre><div class="line">#include "rapidjson/document.h"</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">  const char* test = "&#123;\"num\":123, \"hello\":null, \"type\": \"object\",\"properties\": &#123;\"oid\": &#123;\"type\": \"string\"&#125;, \"username\": &#123;\"type\": \"string\"&#125;,\"creid\": &#123;\"type\": \"string\"&#125;&#125;,\"required\": [\"oid\", \"username\",\"creid\"]&#125;";</div><div class="line">  rapidjson::Document document;</div><div class="line">  //Parse(const char*). 从c-string解析为Document json格式</div><div class="line">  document.Parse(test);</div><div class="line"></div><div class="line">  //GetString().从Document json中取出string</div><div class="line">  std::cout &lt;&lt; "type = " &lt;&lt; document["type"].GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /*  函数原型          函数功能</div><div class="line">  *   IsNull()       判断当前键对应的值是不是null</div><div class="line">  *   IsNumber()     判断当前键对应的值是不是number</div><div class="line">  *   IsInt()        判断当前键对应的值是不是int</div><div class="line">  *   IsDouble()     判断当前键对应的值是不是double</div><div class="line">  *   IsString()     判断当前键对应的值是不是string</div><div class="line">  *   IsBool()       判断当前键对应的值是不是bool</div><div class="line">  *   IsArray()      判断当前键对应的值是不是array</div><div class="line">  *   ...</div><div class="line">  */</div><div class="line">  std::cout &lt;&lt; "hello is " &lt;&lt; (document["hello"].IsNull() ? "null" : "not null") &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; "num is " &lt;&lt; (document["num"].IsNumber() ? "number" : "not number") &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; "required is " &lt;&lt; (document["required"].IsArray()? "array" : "not array") &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /*      访问Array的两种方法</div><div class="line">  *    1. 通过下标访问    //使用引用来连续访问，方便之余还更高效。</div><div class="line">  *    2. 通过迭代器访问</div><div class="line">  *        注意问题</div><div class="line">  *    1.索引使用SizeType类型，而不是size_t类型，缺省情况下，SizeType是unsigned的typedef</div><div class="line">  *    2.对于String类型使用GetInt是非法的，这个时候会导致程序崩溃</div><div class="line">  */</div><div class="line">  const rapidjson::Value &amp;a = document["required"];</div><div class="line">  assert(a.IsArray());</div><div class="line">  for (rapidjson::SizeType i = 0; i &lt; a.Size(); i++)</div><div class="line">    std::cout &lt;&lt; a[i].GetString() &lt;&lt; std::endl;</div><div class="line">  for (rapidjson::Value::ConstValueIterator it = a.Begin(); it != a.End(); it++) &#123;</div><div class="line">    std::cout &lt;&lt; it-&gt;GetString() &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; it-&gt;GetStringLength() &lt;&lt; std::endl;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /*        访问object的方法</div><div class="line">  *    1.使用迭代器进行访问</div><div class="line">  *    2.使用键对应的下标进行当问 如:document["required"]</div><div class="line">  *          注意问题</div><div class="line">  *    1.在使用下标访问之前，最好先调用HasMember()检查一下当前键是否存在，若存在再往下继续。否则会出现段错误。</div><div class="line">  */</div><div class="line">  static const char* kTypeNames[] = &#123;"Null", "False", "True", "Object", "Array", "String", "Number"&#125;;</div><div class="line">  for (rapidjson::Value::ConstMemberIterator it = document.MemberBegin();</div><div class="line">        it != document.MemberEnd(); it++) &#123;</div><div class="line">        std::cout &lt;&lt; it-&gt;name.GetString() &lt;&lt; " is type : " &lt;&lt; kTypeNames[it-&gt;value.GetType()] &lt;&lt; std::endl;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /*        查询Number</div><div class="line">  *      说明:Json只提供一种数值类型---Number。Number可以是实数也可以是整数</div><div class="line">  *           Dom提供了5中数值类型。包括unsigned,int,uint_64,int_64,double</div><div class="line">  *         类型检查          数值提取</div><div class="line">  *        IsUint()          GetUint()</div><div class="line">  *        IsInt()           GetInt()</div><div class="line">  *        IsUint64()        GetUint64()</div><div class="line">  *        IsInt64()         GetInt64()</div><div class="line">  *        IsDouble()        GetDouble()</div><div class="line">  *</div><div class="line">  *       查询String</div><div class="line">  *     说明：除了getString(), Value类也有一个GetStringLength();原因是rapidjson的String需要支持Unicode字符，如\u0000.问题是C/C++字符串是</div><div class="line">  *         空字符结尾的字符串，，这种字符串会把'\0'作为结束符号。为了符合RFC4627，若要处理这些带有unicode的字符串，</div><div class="line">  *         需要使用GetStringLength获取正确的字符串长度</div><div class="line">  *       函数                                功能</div><div class="line">  *     const char* getString()             获取C字符串</div><div class="line">  *     SizeType GetStringLength()const     获取字符串的长度,</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Document d1;</div><div class="line">  d1.Parse("&#123;\"s\":\"a\\u0000b\", \"num\":123&#125;");</div><div class="line">  std::cout &lt;&lt; d1["s"].GetString() &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; d1["s"].GetStringLength() &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; strlen(d1["s"].GetString()) &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /*</div><div class="line">  *       比较两个Value的值</div><div class="line">  *     1.使用==和!=比较两Value的值，当且仅当两个Value的类型和内容相等才算相等。</div><div class="line">  *     2.可以将Value与原始值进行比较</div><div class="line">  *     3.若被比较的两个Value的类型不同，直接返回false。</div><div class="line">  *     4.可以比较不同Object的值</div><div class="line">  */</div><div class="line"></div><div class="line">  std::cout &lt;&lt; (document["num"] == document["hello"]) &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; (document["num"] == d1["num"]) &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /*</div><div class="line">  *           创建/修改值</div><div class="line">  *       1.改变Value的类型:当使用默认构造函数创建一个Value或者Document的时候，它的类型默认为</div><div class="line">  *         NULL,要改变其类型，使用SetXXX()。如</div><div class="line">  *                             rapidjsons::Document d;</div><div class="line">  *                             d.SetObject()； //将d的类型修改为Object</div><div class="line">  *                             rapidjson::Value v;</div><div class="line">  *                             v.SetInt(1); //或者v = 1;</div><div class="line">  *       2.构造函数的重载</div><div class="line">  *                              rapidjson::Value b(false);</div><div class="line">  *                              rapidjson::Value n(10);</div><div class="line">  *</div><div class="line">  *       3.特别注意Value的转移语义。 Value重载operator=()时使用了转移语义。</div><div class="line">  *                              rapidjson::Value a(123);</div><div class="line">  *                              rapidjson::Value b(456);</div><div class="line">  *                              a = b; //此时b变为null,a为456</div><div class="line">  *       4.使用move()函数实现函数参数中的转移语义</div><div class="line">  *                              rapidjson::Value a(0);</div><div class="line">  *                               test(a.move());</div><div class="line">  *</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Value testa(10);</div><div class="line">  rapidjson::Value testb(10);</div><div class="line">  testa = testb;</div><div class="line">  std::cout &lt;&lt; testa.GetInt() &lt;&lt; std::endl;</div><div class="line">  if (testb.IsNull())</div><div class="line">  &#123;</div><div class="line">    std::cout &lt;&lt; "testb is moved to a, and now testb is null" &lt;&lt; std::endl;</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    std::cout &lt;&lt; testb.GetInt() &lt;&lt; std::endl;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /*</div><div class="line">  *                创建String</div><div class="line">  *         rapidjson提供两种string的存储策略:</div><div class="line">  *                       1.copy-string(深拷贝)：分配缓冲区，然后把来源数据复制至它</div><div class="line">  *                       2.const-string(浅拷贝)：简单的存储字符串指针</div><div class="line">  *          说明：</div><div class="line">  *               1.copy-string总是安全的,因为它拥有数据的克隆</div><div class="line">  *               2.当数据源发生改变，const-string中的数据也会受到影响</div><div class="line">  *         上面两种字符串的创建方式:</div><div class="line">  *               1.copy-string创建方式需要给API传递一个Allocator参数,这个做法避免了给每一个</div><div class="line">  *                             Value都保存一个Allocator。另外还需要一个length参数，保存长度信息，故</div><div class="line">  *                             此函数可以处理带有空字符的字符串。</div><div class="line">  *               2.const-string创建方式不需要长度信息和Allocator参数，它默认字符串以\0结束.</div><div class="line">  *                              一般用于常量字符串或者具有安全生存周期的字符串上</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Value autor;</div><div class="line">  char buffer[50];</div><div class="line">  int len = sprintf(buffer, "%s %s", "Milo", "Yip");</div><div class="line">  autor.SetString(buffer,len, document.GetAllocator());</div><div class="line">  memset(buffer, 0x0, sizeof(buffer));</div><div class="line">  std::cout &lt;&lt; autor.GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  rapidjson::Value testString;</div><div class="line">  testString = "testString";</div><div class="line">  std::cout &lt;&lt; testString.GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /**                   修改Array</div><div class="line">  *           函数                                                              功能</div><div class="line">  *        clear()                                                      清空Array中的内容</div><div class="line">  *        Reserve(SizeType, Allocator&amp;)                                申请指定大小空间，单不插入数据</div><div class="line">  *        Value&amp; PushBack(Value&amp;, Allocator&amp;)                          添加元素</div><div class="line">  *        template &lt;typename T&gt; GenericValue&amp; PushBack(T, Allocator&amp;)  添加元素</div><div class="line">  *        Value&amp; PopBack()                                             删除最后一个元素</div><div class="line">  *        ValueIterator Erase(ConstValueIterator pos)                  删除指定位置元素</div><div class="line">  *        ValueIterator Erase(ConstValueIterator first, ConstValueIterator last) 删除指定范围元素</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Value testArray(rapidjson::kArrayType);</div><div class="line">  rapidjson::Document::AllocatorType&amp; testAllocator = document.GetAllocator();</div><div class="line"></div><div class="line">  for (int i = 0; i &lt; 5; i++)</div><div class="line">  &#123;</div><div class="line">    testArray.PushBack(i, testAllocator);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  testArray.PushBack("lua", testAllocator).PushBack("Mio", testAllocator);</div><div class="line"></div><div class="line">  for (rapidjson::SizeType i = 0;i &lt; 5; i++)</div><div class="line">    std::cout &lt;&lt;  testArray[i].GetInt() &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; testArray[5].GetString() &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; testArray[6].GetString() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  /*                      修改Object</div><div class="line">  *     说明：每个Object都是键值对的集合。每个键必须为String。</div><div class="line">  *     添加成员的函数：</div><div class="line">  *                   1.Value&amp; AddMember(Value&amp;, Value&amp;, Allocator&amp; allocator)</div><div class="line">  *                   2.Value&amp; AddMember(StringRefType, Value&amp;, Allocator&amp;)</div><div class="line">  *                   3.template &lt;typename T&gt; Value&amp; AddMember(StringRefType, T value, Allocator&amp;)</div><div class="line">  *</div><div class="line">  *     补充说明：1.使用StingRefType作为name参数的重载版本与字符串的SetString()类似。这些重载是为了避免复制name字符串</div><div class="line">  *               因为jsonObject中经常会使常数键名。</div><div class="line">  *              2.如果你需要从非常数字符串或者生命周期不足的字符串创建键名，需要使用copy-string API。</div><div class="line">  *                 为了避免中间变量，可以使用临时值</div><div class="line">  *</div><div class="line">  *     移除成员函数：</div><div class="line">  *             1.bool RemoveMember(const Ch* name)：使用键名来移除成员（线性时间复杂度）。</div><div class="line">  *             2.bool RemoveMember(const Value&amp; name)：除了 name 是一个 Value，和上一行相同。</div><div class="line">  *             3.MemberIterator RemoveMember(MemberIterator)：使用迭代器移除成员（_ 常数 _ 时间复杂度）。</div><div class="line">  *             4.MemberIterator EraseMember(MemberIterator)：和上行相似但维持成员次序（线性时间复杂度）。</div><div class="line">  *             5.MemberIterator EraseMember(MemberIterator first, MemberIterator last)：移除一个范围内的成员，维持次序（线性时间复杂度）。</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Value contact(rapidjson::kObjectType);</div><div class="line">  contact.AddMember("name", "milo", document.GetAllocator());</div><div class="line">  contact.AddMember("married", false, document.GetAllocator());</div><div class="line"></div><div class="line">  std::cout &lt;&lt; "contact[name] is:"&lt;&lt;contact["name"].GetString() &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; "contact[married] is:" &lt;&lt; contact["married"].GetBool() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  contact.AddMember(rapidjson::Value("copy", document.GetAllocator()).Move(), // copy string</div><div class="line">                  rapidjson::Value().Move(),                                // null value</div><div class="line">                  document.GetAllocator());</div><div class="line"></div><div class="line">  /*                        深复制Value</div><div class="line">  *           方法：</div><div class="line">  *                   1.含有Allocator的构造函数</div><div class="line">  *                   2.含有Allocator的CopyFrom</div><div class="line">  *                           交换Value</div><div class="line">  *            方法：  Swap() 无论两颗Dom树多复杂，交换时间为常数</div><div class="line">  */</div><div class="line"></div><div class="line">  rapidjson::Value testCopy1(123);</div><div class="line">  rapidjson::Value testCopy2(testCopy1, document.GetAllocator());</div><div class="line">  rapidjson::Value testCopy3;</div><div class="line">  testCopy3.CopyFrom(testCopy1, document.GetAllocator());</div><div class="line"></div><div class="line">  testCopy1.Swap(testCopy3);</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rapidjson基本用法&quot;&gt;&lt;a href=&quot;#rapidjson基本用法&quot; class=&quot;headerlink&quot; title=&quot;rapidjson基本用法&quot;&gt;&lt;/a&gt;rapidjson基本用法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本系列文章以例子的方式进行
    
    </summary>
    
      <category term="rapidjson学习" scheme="http://yoursite.com/categories/rapidjson%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="rapidjson" scheme="http://yoursite.com/tags/rapidjson/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>protobuffer学习总结</title>
    <link href="http://yoursite.com/2017/05/26/protobuffer%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/26/protobuffer学习总结/</id>
    <published>2017-05-26T11:48:59.000Z</published>
    <updated>2017-06-02T08:21:19.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="protobuffer学习总结"><a href="#protobuffer学习总结" class="headerlink" title="protobuffer学习总结"></a>protobuffer学习总结</h1><p>protobuffer是google开发的一种数据描述语言，它能够将结构化的数据序列化，并切可以将序列化的数据进行反序列化恢复原有的数据结构。一般用于数据存储以及通信协议方面。</p>
<p>如果是第一次使用protobuffer,我们可以将其与json或者xml进行类比，其实它与json或xml类似都可以作为数据的存储方式，不同的是json和xml是文本格式，而protobuffer是二进制格式。二进制格式不利于使用者直观的阅读，但是与json以及xml相比它有更多的优点。</p>
<h2 id="protoBuffer相比于xml的优点"><a href="#protoBuffer相比于xml的优点" class="headerlink" title="protoBuffer相比于xml的优点"></a>protoBuffer相比于xml的优点</h2><ul>
<li>更加简介</li>
<li>体积小：消息大小只需要xml的1/10~1/3</li>
<li>解析速度快：解析速度比xml快20~100倍</li>
<li>使用proto Buffer的编译器，可以生成方便在编程中使用的数据访问代码.</li>
<li>具有更好的兼容性，很好的支持向上或向下兼容的特性</li>
<li>提供多种序列化的出口和入口,如文件流，string流,array流等等</li>
</ul>
<h2 id="protobuffer语法"><a href="#protobuffer语法" class="headerlink" title="protobuffer语法"></a>protobuffer语法</h2><p>消息类型实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Package example;</div><div class="line"></div><div class="line">message Person&#123;</div><div class="line">  required string name = 1;</div><div class="line">  required int32 id = 2;</div><div class="line">  optional string email = 3;</div><div class="line"></div><div class="line">  enum PhoneType&#123;</div><div class="line">    mobile = 1;</div><div class="line">    home = 2;</div><div class="line">    work = 3;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  message PhoneNumber&#123;</div><div class="line">    required string number = 1;</div><div class="line">    optional PhoneType type = 2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  repeated PhoneNumber phone = 4;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="指定字段规则"><a href="#指定字段规则" class="headerlink" title="指定字段规则"></a>指定字段规则</h3><p>protobuffer中字段规则包括一下三种：</p>
<ul>
<li>required：实例中必须包含的字段</li>
<li>optional：实例中可以选择性包含的字段，若实例没有指定，则为默认值，若没有设置该字段的默认值，其值是该类型的默认值。如string默认值为””，bool默认值为false,整数默认值为0。</li>
<li>repeated: 可以有多个值的字段，这类变量类似于vector，可以存储此类型的多个值。</li>
</ul>
<blockquote>
<p>由于一些历史原因，基本数值类型的repeated的字段并没有被尽可能地高效编码。在新的代码中，用户应该使用特殊选项[packed=true]来保证更高效的编码。<br>一般情况下慎重使用required字段，当此字段一定是必要的时候才使用。</p>
</blockquote>
<p>repeated使用实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">message Person &#123;  </div><div class="line">  required int32 age = 1;  </div><div class="line">  required string name = 2;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">message Family &#123;  </div><div class="line">  repeated Person person = 1;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span>  </span></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    GOOGLE_PROTOBUF_VERIFY_VERSION;  </div><div class="line"></div><div class="line">    Family family;  </div><div class="line">    Person* person;  </div><div class="line"></div><div class="line">    <span class="comment">// 添加一个家庭成员，John  </span></div><div class="line">    person = family.add_person();  </div><div class="line">    person-&gt;set_age(<span class="number">25</span>);  </div><div class="line">    person-&gt;set_name(<span class="string">"John"</span>);  </div><div class="line"></div><div class="line">    <span class="comment">// 添加一个家庭成员，Lucy  </span></div><div class="line">    person = family.add_person();  </div><div class="line">    person-&gt;set_age(<span class="number">23</span>);  </div><div class="line">    person-&gt;set_name(<span class="string">"Lucy"</span>);  </div><div class="line"></div><div class="line">    <span class="comment">// 添加一个家庭成员，Tony  </span></div><div class="line">    person = family.add_person();  </div><div class="line">    person-&gt;set_age(<span class="number">2</span>);  </div><div class="line">    person-&gt;set_name(<span class="string">"Tony"</span>);  </div><div class="line"></div><div class="line">    <span class="comment">// 显示所有家庭成员  </span></div><div class="line">    <span class="keyword">int</span> size = family.person_size();  </div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"这个家庭有 "</span> &lt;&lt; size &lt;&lt; <span class="string">" 个成员，如下："</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)  </div><div class="line">    &#123;  </div><div class="line">        Person psn = family.person(i);  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">". "</span> &lt;&lt; psn.name() &lt;&lt; <span class="string">", 年龄 "</span> &lt;&lt; psn.age() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>protobuffer中的数据类型与C++数据类型之间的关联如下图：</p>
<table>
<thead>
<tr>
<th style="text-align:center">protobuffer类型</th>
<th style="text-align:center">C++类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">double</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">float</td>
</tr>
<tr>
<td style="text-align:center">int32</td>
<td style="text-align:center">int32</td>
</tr>
<tr>
<td style="text-align:center">int64</td>
<td style="text-align:center">int64</td>
</tr>
<tr>
<td style="text-align:center">uint32</td>
<td style="text-align:center">uint32</td>
</tr>
<tr>
<td style="text-align:center">uint64</td>
<td style="text-align:center">uint64</td>
</tr>
<tr>
<td style="text-align:center">sint32</td>
<td style="text-align:center">int32</td>
</tr>
<tr>
<td style="text-align:center">sint64</td>
<td style="text-align:center">int64</td>
</tr>
<tr>
<td style="text-align:center">fixed32</td>
<td style="text-align:center">uint32</td>
</tr>
<tr>
<td style="text-align:center">fixed64</td>
<td style="text-align:center">uint64</td>
</tr>
<tr>
<td style="text-align:center">sfixed32</td>
<td style="text-align:center">uint32</td>
</tr>
<tr>
<td style="text-align:center">sfixed64</td>
<td style="text-align:center">uint64</td>
</tr>
<tr>
<td style="text-align:center">bool</td>
<td style="text-align:center">bool</td>
</tr>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:center">string</td>
</tr>
<tr>
<td style="text-align:center">bytes</td>
<td style="text-align:center">string</td>
</tr>
</tbody>
</table>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>当需要定义一个消息类型的时候，我们可能想为某一个字段指定预定义列表中的值。这个时候就需要用到枚举</p>
<p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">message SearchRequest &#123;</div><div class="line">  required string query = 1;</div><div class="line">  optional int32 page_number = 2;</div><div class="line">  optional int32 result_per_page = 3 [default = 10];</div><div class="line">  enum Corpus &#123;</div><div class="line">    UNIVERSAL = 0;</div><div class="line">    WEB = 1;</div><div class="line">    IMAGES = 2;</div><div class="line">    LOCAL = 3;</div><div class="line">    NEWS = 4;</div><div class="line">    PRODUCTS = 5;</div><div class="line">    VIDEO = 6;</div><div class="line">  &#125;</div><div class="line">  optional Corpus corpus = 4 [default = UNIVERSAL];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="变量标识号"><a href="#变量标识号" class="headerlink" title="变量标识号"></a>变量标识号</h3><p>在proto数据结构中，每一个变量都有唯一的数字标识。这些标识符的作用是在二进制格式中识别各个字段的，一旦开始使用就不可再改变。</p>
<blockquote>
<p>此处需要注意的是1-15之内的标号在存储的时候只占一个字节，而大于15到162047之间的需要占两个字符，所以<strong>我们尽量为频繁使用的字段分配1-15内的标识号</strong><br>。另外19000-19999之内的标识号已经被预留，不可用。最大标识号为2^29-1。</p>
</blockquote>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>protobuffer中的消息可以嵌套消息，也就是在一个message中定义另一个message。如上面实例可以看出。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>我们可以通过扩展对proto文件进行扩展，而不需要直接区编辑原文件。</p>
<p>例如有原文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">message Foo&#123;</div><div class="line">  //...</div><div class="line">  extensions 100 to 199;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述extensions 100 to 199表示此范围内的标识号被保留为扩展用。我们在扩展文件中就可以使用这些标识号了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">extend Foo&#123;</div><div class="line">  optional int32 bar = 126;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述为扩展。当用户的Foo消息被编码的时候，数据的传输格式与用户在Foo里定义新字段的效果是完全一样的。然而，要在程序代码中访问扩展字段的方法与访问普通的字段稍有不同——生成的数据访问代码为扩展准备了特殊的访问函数来访问它。例如，下面是如何在C++中设置bar的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Foo foo;</div><div class="line">foo.SetExtentions(bar, 15);</div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>与c++注释风格相同。双斜杠</p>
<h3 id="向上且向下兼容更新消息"><a href="#向上且向下兼容更新消息" class="headerlink" title="向上且向下兼容更新消息"></a>向上且向下兼容更新消息</h3><p>当在需求不断增加的过程中，数据结构也会不断变化，这个时候就需要我们去更新消息。怎么才能做到更新消息不会影响之前的数据和代码。这个时候我们更新消息需要遵循以下几个原则：</p>
<ul>
<li>不要更改任何已有的字段的数值标识</li>
<li>所添加的字段必须是optional或者repeated。</li>
</ul>
<h3 id="包名称解析"><a href="#包名称解析" class="headerlink" title="包名称解析"></a>包名称解析</h3><p>为了防止消息明明冲突，我们往往会在文件的开始出生命包，包的作用相当于命名空间。在编译成C++代码时也是namespace。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">package foo.bar;</div><div class="line">message open&#123;</div><div class="line">  ///...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在C++对open进行访问的时候的访问方式为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo::bar::open test;</div></pre></td></tr></table></figure>
<h2 id="protobuffer编译为C-代码的常用接口"><a href="#protobuffer编译为C-代码的常用接口" class="headerlink" title="protobuffer编译为C++代码的常用接口"></a>protobuffer编译为C++代码的常用接口</h2><p>对于C++来说，编译器会为每个.proto文件生成一个.h文件和.cc文件。.proto文件中的每一个消息对应一个类。<br>protobuffer中常用的函数：</p>
<ul>
<li>has_name()          :判断是否有当前成员</li>
<li>clear_name()        :清空该成员变量值</li>
<li>name()              :获取成员的变量值</li>
<li>set_name(string)    :设置变量值</li>
<li>set_name(const char*):设置变量值</li>
<li>set_name(int)       :设置变量值</li>
<li>clear()             :清空所有元素为空状态</li>
<li>void CopyFrom(person):从给定的对象复制。</li>
<li>mutable_name()      :获取变量name的指针</li>
<li>add_name()          :为repeated变量增加值</li>
<li>ByteSize()          :获取变量所占的字节数<br>若有元素data属性为repeated，其行为类似于vector,则此时则可用下列函数：</li>
<li>add_data()          : 添加data元素，返回值为Date*类型。</li>
<li>data_size()         : 获取repeated元素size，即元素的个数。</li>
<li>data(i)             : 获取data中地i个元素。<h2 id="常用的序列化方法"><a href="#常用的序列化方法" class="headerlink" title="常用的序列化方法"></a>常用的序列化方法</h2></li>
</ul>
<h3 id="C数组的序列化与反序列化的API"><a href="#C数组的序列化与反序列化的API" class="headerlink" title="C数组的序列化与反序列化的API"></a>C数组的序列化与反序列化的API</h3><p>如果想将其序列为char*并通过socket进行传输，这是使用SerializeToArray来达到目的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>* parray = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">256</span>);</div><div class="line"><span class="comment">//API</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParseFromArray</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* data, <span class="keyword">int</span> size)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SerializeToArray</span><span class="params">(<span class="keyword">void</span>* data. <span class="keyword">int</span> size)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_people</span><span class="params">()</span>               </span></div><div class="line">&#123;  </div><div class="line">    wp.set_name(<span class="string">"sealyao"</span>);     </div><div class="line">    wp.set_id(<span class="number">123456</span>);          </div><div class="line">    wp.set_email(<span class="string">"sealyaog@gmail.com"</span>);  </div><div class="line">    wp.SerializeToArray(parray,<span class="number">256</span>);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_people</span><span class="params">()</span>               </span></div><div class="line">&#123;  </div><div class="line">    rap.ParseFromArray(parray,<span class="number">256</span>);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Get People from Array:"</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Name : "</span> &lt;&lt;rap.name() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Id : "</span> &lt;&lt; rap.id() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t email : "</span> &lt;&lt; rap.email() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-String的序列化与反序列化API"><a href="#C-String的序列化与反序列化API" class="headerlink" title="C++ String的序列化与反序列化API"></a>C++ String的序列化与反序列化API</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//C++string序列化和序列化API  </span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SerializeToString</span><span class="params">(<span class="built_in">string</span>* output)</span> <span class="keyword">const</span></span>;  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParseFromString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; data)</span></span>;  </div><div class="line"><span class="comment">//使用：  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_people</span><span class="params">()</span>               </span></div><div class="line">&#123;  </div><div class="line">    wp.set_name(<span class="string">"sealyao"</span>);     </div><div class="line">    wp.set_id(<span class="number">123456</span>);          </div><div class="line">    wp.set_email(<span class="string">"sealyaog@gmail.com"</span>);  </div><div class="line">    wp.SerializeToString(&amp;pstring);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_people</span><span class="params">()</span>               </span></div><div class="line">&#123;  </div><div class="line">    rsp.ParseFromString(pstring);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Get People from String:"</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Name : "</span> &lt;&lt;rsp.name() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Id : "</span> &lt;&lt; rsp.id() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t email : "</span> &lt;&lt; rsp.email() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="文件描述符序列化与反序列化API"><a href="#文件描述符序列化与反序列化API" class="headerlink" title="文件描述符序列化与反序列化API"></a>文件描述符序列化与反序列化API</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件描述符的序列化和序列化API  </span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SerializeToFileDescriptor</span><span class="params">(<span class="keyword">int</span> file_descriptor)</span> <span class="keyword">const</span></span>;  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParseFromFileDescriptor</span><span class="params">(<span class="keyword">int</span> file_descriptor)</span></span>;  </div><div class="line"></div><div class="line"><span class="comment">//使用:  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_people</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">   fd = open(path,O_CREAT|O_TRUNC|O_RDWR,<span class="number">0644</span>);  </div><div class="line">   <span class="keyword">if</span>(fd &lt;= <span class="number">0</span>)&#123;  </div><div class="line">       perror(<span class="string">"open"</span>);  </div><div class="line">       <span class="built_in">exit</span>(<span class="number">0</span>);   </div><div class="line">   &#125;     </div><div class="line">   wp.set_name(<span class="string">"sealyaog"</span>);  </div><div class="line">   wp.set_id(<span class="number">123456</span>);  </div><div class="line">   wp.set_email(<span class="string">"sealyaog@gmail.com"</span>);  </div><div class="line">   wp.SerializeToFileDescriptor(fd);     </div><div class="line">   close(fd);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_people</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">   fd = open(path,O_RDONLY);  </div><div class="line">   <span class="keyword">if</span>(fd &lt;= <span class="number">0</span>)&#123;  </div><div class="line">       perror(<span class="string">"open"</span>);  </div><div class="line">       <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">   &#125;  </div><div class="line">   rp.ParseFromFileDescriptor(fd);  </div><div class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Get People from FD:"</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Name : "</span> &lt;&lt;rp.name() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Id : "</span> &lt;&lt; rp.id() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t email : "</span> &lt;&lt; rp.email() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">   close(fd);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-stream-序列化和反序列化API"><a href="#C-stream-序列化和反序列化API" class="headerlink" title="C++ stream 序列化和反序列化API"></a>C++ stream 序列化和反序列化API</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//C++ stream 序列化/反序列化API  </span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SerializeToOstream</span><span class="params">(ostream* output)</span> <span class="keyword">const</span></span>;  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParseFromIstream</span><span class="params">(istream* input)</span></span>;  </div><div class="line"></div><div class="line"><span class="comment">//使用：  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_people</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(path,ios::out|ios::trunc|ios::binary)</span></span>;  </div><div class="line">    wp.set_name(<span class="string">"sealyaog"</span>);  </div><div class="line">    wp.set_id(<span class="number">123456</span>);  </div><div class="line">    wp.set_email(<span class="string">"sealyaog@gmail.com"</span>);  </div><div class="line">    wp.SerializeToOstream(&amp;fs);      </div><div class="line">    fs.close();  </div><div class="line">    fs.clear();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_people</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(path,ios::in|ios::binary)</span></span>;  </div><div class="line">    rp.ParseFromIstream(&amp;fs);  </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Name : "</span> &lt;&lt;rp.name() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t Id : "</span> &lt;&lt; rp.id() &lt;&lt; <span class="built_in">endl</span>;   </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t email : "</span> &lt;&lt; rp.email() &lt;&lt; <span class="built_in">endl</span>;     </div><div class="line">    fs.close();  </div><div class="line">    fs.clear();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/mycwq/article/details/19622571" target="_blank" rel="external">http://blog.csdn.net/mycwq/article/details/19622571</a><br><a href="http://colobu.com/2015/01/07/Protobuf-language-guide/" target="_blank" rel="external">http://colobu.com/2015/01/07/Protobuf-language-guide/</a><br><a href="https://worktile.com/tech/share/prototol-buffers" target="_blank" rel="external">https://worktile.com/tech/share/prototol-buffers</a><br><a href="http://tech.meituan.com/serialization_vs_deserialization.html" target="_blank" rel="external">http://tech.meituan.com/serialization_vs_deserialization.html</a><br><a href="http://blog.csdn.net/weiwangchao_/article/details/16797763" target="_blank" rel="external">http://blog.csdn.net/weiwangchao_/article/details/16797763</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;protobuffer学习总结&quot;&gt;&lt;a href=&quot;#protobuffer学习总结&quot; class=&quot;headerlink&quot; title=&quot;protobuffer学习总结&quot;&gt;&lt;/a&gt;protobuffer学习总结&lt;/h1&gt;&lt;p&gt;protobuffer是google
    
    </summary>
    
      <category term="序列化与反序列化" scheme="http://yoursite.com/categories/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="protobuffer" scheme="http://yoursite.com/tags/protobuffer/"/>
    
      <category term="序列化" scheme="http://yoursite.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>makefile常用相关函数</title>
    <link href="http://yoursite.com/2017/05/25/makefile%E5%B8%B8%E7%94%A8%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/05/25/makefile常用相关函数/</id>
    <published>2017-05-25T11:48:59.000Z</published>
    <updated>2017-05-25T12:05:57.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile常用相关函数"><a href="#makefile常用相关函数" class="headerlink" title="makefile常用相关函数"></a>makefile常用相关函数</h1><p>makefile中函数的用法与变量类似，变量的用法是在变量前面加上$，函数的用法一样，也是使用$开头，$之后加一个括号，括号中的第一个参数是函数名，后面紧跟此函数需要的参数，用逗号分隔。下面介绍几个常用的函数。</p>
<h2 id="wildcard函数"><a href="#wildcard函数" class="headerlink" title="wildcard函数"></a>wildcard函数</h2><ul>
<li>参数: 一个正则表达式</li>
</ul>
<p>wildcard的中文意思是通配符，它的功能类似于正则表达式，用于展开一列所有符合其参数描述的文件名，文件之间用空格分割。</p>
<p>实例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SOURCE=$(wildcard *.cpp)</div></pre></td></tr></table></figure>
<p>此时SOURCE的值为所有的以.cpp为后缀的文件集合，以空格隔开。</p>
<h2 id="patsubst函数"><a href="#patsubst函数" class="headerlink" title="patsubst函数"></a>patsubst函数</h2><p>其功能是一个匹配替换的函数(pattern substitute)。</p>
<ul>
<li>参数：第一个是需要匹配的样式，第二个是表示用什么替换它，第三个被处理的以空格隔开的字符串。</li>
</ul>
<p>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TARGET = $(patsubst *.cpp, *.o, $(SOURCE))</div></pre></td></tr></table></figure></p>
<p>TARGET表示与SOURCE中同名的目标文件.</p>
<h2 id="lt"><a href="#lt" class="headerlink" title="$@,$&lt;, $^"></a>$@,$&lt;, $^</h2><p>上述几个变量的含义：</p>
<ul>
<li>$@ 表示目标的文件名</li>
<li>$&lt; 表示依赖中的第一个文件名</li>
<li>$^ 表示依赖中所有的文件名</li>
</ul>
<p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">all: library.cpp main.cpp</div></pre></td></tr></table></figure></p>
<p>其中$@标识all, $&lt;表示library.cpp ，$^表示library.cpp main.cpp</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;makefile常用相关函数&quot;&gt;&lt;a href=&quot;#makefile常用相关函数&quot; class=&quot;headerlink&quot; title=&quot;makefile常用相关函数&quot;&gt;&lt;/a&gt;makefile常用相关函数&lt;/h1&gt;&lt;p&gt;makefile中函数的用法与变量类似，变量
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>Unix标准IO文件流及缓冲类型</title>
    <link href="http://yoursite.com/2017/05/24/Unix%E6%A0%87%E5%87%86IO%E7%BC%93%E5%86%B2%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/05/24/Unix标准IO缓冲类型/</id>
    <published>2017-05-24T13:14:10.000Z</published>
    <updated>2017-05-25T01:45:32.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix标准IO文件流及缓冲类型"><a href="#Unix标准IO文件流及缓冲类型" class="headerlink" title="Unix标准IO文件流及缓冲类型"></a>Unix标准IO文件流及缓冲类型</h1><h2 id="Unix标准IO文件流"><a href="#Unix标准IO文件流" class="headerlink" title="Unix标准IO文件流"></a>Unix标准IO文件流</h2><p>在<strong>文件IO相关函数</strong>的一节中,我们所有的I/O函数都是围绕着文件描述符来操作的，当打开一个文件的时候，即返回一个文件描述符，然后该文件描述符用于后续的文件操作。而对于标准IO库，对于文件的操作都是围绕这<strong> 文件流 file stream</strong>进行的。当我们使用标准IO库打开或创建一个文件的时候，我们已经使一个流和一个文件进行关联。</p>
<h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p>由于历史原因，C语言中原来表示流的数据结构是FILE，而不是叫做流。由于大多数的库函数使用到了FILE类型，有的时候在使用FILE指针的时候也叫其为流，这导致后来很多数据把FILE和流搞得十分混乱。实际上流就是标准IO库中程序与文件交互的一种方式。</p>
<p>标准IO函数fopen打开一个文件时返回一个指向FILE对象的指针，该对象通常是一个结构，<strong>它包含了标准IO库为管理该流所需要的所有信息，包括该文件的文件描述符，用于指向该流缓冲区的指针，缓冲区的长度，当前缓冲区中的字符数以及出错标志等等</strong>。</p>
<h3 id="标准输入，标准输出以及标准错误"><a href="#标准输入，标准输出以及标准错误" class="headerlink" title="标准输入，标准输出以及标准错误"></a>标准输入，标准输出以及标准错误</h3><p>标准库中对于每一个进程都预定义了三个流，分别是stdin,stdout以及stderr，他们分别对应与Linux文件IO中的STDIN_FILENO,STDOUT_FILENO和STDERR_FILENO。它们的定义在stdio.h中</p>
<h2 id="I-O文件流的缓冲类型"><a href="#I-O文件流的缓冲类型" class="headerlink" title="I/O文件流的缓冲类型"></a>I/O文件流的缓冲类型</h2><p>标准IO提供缓冲的目的是为了通过减少使用read和write调用的次数来提高IO读写的效率，它对每个IO流自动的进行缓冲处理，从而避免了用户程序在使用read和write需要考虑的这一点。</p>
<p>标准IO流提供了三种缓冲。分别是全缓冲(fully buffering)，行缓冲(line Buffering)以及无缓冲(nonBuffering)。</p>
<h3 id="全缓冲"><a href="#全缓冲" class="headerlink" title="全缓冲"></a>全缓冲</h3><p>在使用全缓冲的情况下，当数据填满整个缓冲区之后才进行实际的IO操作。对于驻留在磁盘上的文件的读写通常是使用全缓冲。通常如果不给文件流指定缓冲区的情况下，标准IO函数会首先调用malloc函数获取所需要的缓冲区。</p>
<h3 id="行缓冲"><a href="#行缓冲" class="headerlink" title="行缓冲"></a>行缓冲</h3><p>在使用行缓冲的情况下，每当输入输出遇到换行或者缓冲区满了的情况下才会进行实际的IO操作，当涉及到终端输入输出的时候通常使用行缓冲。</p>
<p>对于行缓冲有两个限制。1.由于接收行缓冲的缓冲区的长度是固定的，所以只要填满了缓冲区，即使还没有遇到换行符，也会进行IO操作。2.任何时候，只要通过IO库要求从一个不带缓冲的流或者一个行缓冲的流得到输入数据，那么就会冲洗所有缓冲输出流。</p>
<p>###不带缓冲<br>此时标准IO库不对字符进行缓冲存储。这就使得输入流要求IO立即进行，如标准错误流，若果出现错误，会立马输出。</p>
<blockquote>
<p>flush一个流即刷新缓冲区有两个含义。</p>
<ul>
<li>在IO库方面，flush意味着将缓冲区中的内容写到磁盘上，该缓冲区可能还没有满</li>
<li>在终端驱动方面表示丢弃已经存储在缓冲区中的内容。</li>
</ul>
</blockquote>
<p>##标准文件流与缓冲类型之间的关系</p>
<ul>
<li>当标准输入输出指向的是交互式设备（如终端）的时候，它们是行缓冲的，若不是则是全缓冲的。</li>
<li>标准错误永远是无缓冲的。</li>
</ul>
<h2 id="与缓冲相关的函数"><a href="#与缓冲相关的函数" class="headerlink" title="与缓冲相关的函数"></a>与缓冲相关的函数</h2><p>我们可以通过一下两个函数对将缓冲关闭或者改变缓冲的类型。其中这些函数应该在流被打开之后调用，而且也应该在对流进行一切操作之前调用。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuf</span><span class="params">(FILE* <span class="keyword">restrict</span> fd, <span class="keyword">char</span>* <span class="keyword">restrict</span> buf)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">setvbuf</span><span class="params">(FILE* <span class="keyword">restrict</span> fd, <span class="keyword">char</span>* <span class="keyword">restrict</span> buf, <span class="keyword">int</span> mode, <span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p>使用setbuf函数打开或者关闭缓冲，当buf是一个有效缓冲区时，此时缓冲打开，若流指向的是终端设备，则此时该流是行缓冲的，否则该流是全缓冲的；当buf为NULL的时候，表示关闭该缓冲。</p>
<p>使用setvbuf可以精确的说明缓冲的类型，这里是使用mode来说明的，mode的值包括以下几个：</p>
<ul>
<li>_IOFBF 全缓冲</li>
<li>_IOLBUF 行缓冲</li>
<li>_IONBUF 无缓冲</li>
</ul>
<p>如果指定一个不带缓冲的流,则忽略buf和size参数。如果指定缓冲，则buf和size分别指定一个缓冲区域和缓冲区域的长度。若此时buf为NULL，则标准IO库将自动制定一个适合长度的缓冲区。</p>
<p>上述函数与缓冲之间的关系</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">mode</th>
<th style="text-align:center">buf</th>
<th style="text-align:center">缓冲区及长度</th>
<th style="text-align:left">缓冲类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">setbuf</td>
<td style="text-align:center"></td>
<td style="text-align:center">非空</td>
<td style="text-align:center">长度为size的缓冲区buf</td>
<td style="text-align:left">全缓冲或行缓冲</td>
</tr>
<tr>
<td style="text-align:center">setbuf</td>
<td style="text-align:center"></td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">无缓冲区</td>
<td style="text-align:left">不带缓冲</td>
</tr>
<tr>
<td style="text-align:center">setvbuf</td>
<td style="text-align:center">_IOFBF</td>
<td style="text-align:center">非空</td>
<td style="text-align:center">长度为size的缓冲区buf</td>
<td style="text-align:left">全缓冲</td>
</tr>
<tr>
<td style="text-align:center">setvbuf</td>
<td style="text-align:center">_IOFBF</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">合适长度的缓冲区buf</td>
<td style="text-align:left">全缓冲</td>
</tr>
<tr>
<td style="text-align:center">setvbuf</td>
<td style="text-align:center">_IOLBF</td>
<td style="text-align:center">非空</td>
<td style="text-align:center">长度为size的缓冲区buf</td>
<td style="text-align:left">行缓冲</td>
</tr>
<tr>
<td style="text-align:center">setvbuf</td>
<td style="text-align:center">_IOLBF</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">合适长度的缓冲区buf</td>
<td style="text-align:left">行缓冲</td>
</tr>
<tr>
<td style="text-align:center">setvbuf</td>
<td style="text-align:center">_IONBF</td>
<td style="text-align:center">忽略</td>
<td style="text-align:center">无缓冲区</td>
<td style="text-align:left">不带缓冲</td>
</tr>
</tbody>
</table>
<p>我们还可以通过fflush强制冲洗一个流，此函数使该流所有未写的数据都被传送到内核。作为一种特殊的情况，当流的NULL时，所有的流将被冲洗：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE* fd)</span></span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix标准IO文件流及缓冲类型&quot;&gt;&lt;a href=&quot;#Unix标准IO文件流及缓冲类型&quot; class=&quot;headerlink&quot; title=&quot;Unix标准IO文件流及缓冲类型&quot;&gt;&lt;/a&gt;Unix标准IO文件流及缓冲类型&lt;/h1&gt;&lt;h2 id=&quot;Unix标准IO文
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="标准IO" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86IO/"/>
    
      <category term="缓冲" scheme="http://yoursite.com/tags/%E7%BC%93%E5%86%B2/"/>
    
  </entry>
  
  <entry>
    <title>CprintNULL</title>
    <link href="http://yoursite.com/2017/05/22/CprintNULL/"/>
    <id>http://yoursite.com/2017/05/22/CprintNULL/</id>
    <published>2017-05-22T15:55:20.000Z</published>
    <updated>2017-05-22T15:56:04.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="printf-s情况下字符串为NULL的输出结果"><a href="#printf-s情况下字符串为NULL的输出结果" class="headerlink" title="printf %s情况下字符串为NULL的输出结果"></a>printf %s情况下字符串为NULL的输出结果</h1><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"this%s\n"</span>, s);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</div></pre></td></tr></table></figure>
<p>当s为NULL的时候，执行上面三个语句两个语句执行结果分别为:<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this(null)</div><div class="line">segment fault</div></pre></td></tr></table></figure></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在ANSI C中没有对printf时字符串为NULL的情况进行明确的定义，所以当出现这种情况时往往是未定义行为。<br>所以上面第一种情况会出现segment fault的情况是一种未定义行为，可能在其他编译器上不会出现段错误。</p>
<p>上面出现段错误的行为我们可以通过反汇编进行查看。</p>
<p>反汇编的结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">804842</span>d:	c7 <span class="number">04</span> <span class="number">24</span> <span class="number">20</span> <span class="number">85</span> <span class="number">04</span> <span class="number">08</span> 	movl   $<span class="number">0x8048520</span>,(%esp)</div><div class="line"><span class="number">8048434</span>:	e8 <span class="number">0b</span> ff ff ff       	call   <span class="number">8048344</span> &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line"><span class="number">8048439</span>:	c7 <span class="number">04</span> <span class="number">24</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 	movl   $<span class="number">0x0</span>,(%esp)</div><div class="line"><span class="number">8048440</span>:	e8 df fe ff ff       	call   <span class="number">8048324</span> &lt;<span class="built_in">puts</span>@plt&gt;</div><div class="line"><span class="number">8048445</span>:	<span class="number">83</span> c4 <span class="number">14</span>             	add    $<span class="number">0x14</span>,%esp</div></pre></td></tr></table></figure>
<p>从上面可以看出第一个执行被汇编成真正的printf指令，而第二个简单的printf NULL的指令被汇编成puts。<br>所以才出现了上面的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;printf-s情况下字符串为NULL的输出结果&quot;&gt;&lt;a href=&quot;#printf-s情况下字符串为NULL的输出结果&quot; class=&quot;headerlink&quot; title=&quot;printf %s情况下字符串为NULL的输出结果&quot;&gt;&lt;/a&gt;printf %s情况下字
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="print" scheme="http://yoursite.com/tags/print/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境变量</title>
    <link href="http://yoursite.com/2017/05/22/Unix%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2017/05/22/Unix环境变量/</id>
    <published>2017-05-22T15:53:53.000Z</published>
    <updated>2017-05-24T12:20:42.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix环境变量"><a href="#Unix环境变量" class="headerlink" title="Unix环境变量"></a>Unix环境变量</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Unix中，<strong>每个进程都有自己的一组环境变量</strong>，这些环境变量，要么是一组全局字符串，要么是子进程从父进程继承而来的,如果子进程不对其修改则与父进程的环境变量一模一样。<br>Unix内核并不查看这些字符串，它们的解释权完全取决于各个应用程序。例如shell是Unix中一个可执行程序，通常shell的启动文件中会对环境变量进行设置。所以当我们进入shell之后可以查看path等环境变量。在当前shell中启动的进程会继承其父进程shell的环境变量，也就可以查看path等环境变量，环境变量可以在登录的时候自动设置，也可以由用户自行设置。</p>
<h2 id="环境变量相关变量"><a href="#环境变量相关变量" class="headerlink" title="环境变量相关变量"></a>环境变量相关变量</h2><p>每个程序都会接收到一张环境表。与参数表一样，环境表也是一个字符指针数组。其中每个指针都包含一个以NULL结尾的字符串的地址。全局变量<br>environ指向了这个数组的地址。</p>
<p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">extern char **environ;</div><div class="line">if (environ!= NULL) &#123;</div><div class="line">        for (i = 0; environ[i] != NULL; i++) &#123;</div><div class="line">            printf(&quot;env: %s\n&quot;, environ[i]);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="环境变量相关的函数"><a href="#环境变量相关的函数" class="headerlink" title="环境变量相关的函数"></a>环境变量相关的函数</h2><p>与环境变量相关的函数包括以下几种：取环境变量的值，添加环境变量、修改环境变量、以及删除环境变量.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">//获取环境变量的值</div><div class="line">char* getenv(const char* name); //若包含此key返回对应的值，否则返回NULL</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 修改环境变量的值 前面两个分别为键值对，最后一个表示是否需要删除原有的定义重写。</div><div class="line">* params：键没有存在，则创建此键值对。若键已经存在：rewrite=0时不覆盖原来的值；rewrite!=0覆盖原来的值</div><div class="line">* return：成功返回0， 出错返回非0。</div><div class="line">*/</div><div class="line">int setenv(const char* name, const char* value, int rewrite);</div><div class="line"></div><div class="line">/*</div><div class="line">* function： 添加环境变量，若存在则删除原有的，添加新的，不存在则直接添加</div><div class="line">* params:  参数为一个键值对字符串，如&quot;name=test&quot;</div><div class="line">* return: 成功返回0,不成功返回-1</div><div class="line">*/</div><div class="line">int putenv(char *str);</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 删除name的定义，即使不存在也不出错。</div><div class="line">* params: 参数为键</div><div class="line">* return：出错返回-1,不出错返回0</div><div class="line">*/</div><div class="line">int unsetenv(const char*name);</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 清除所有的环境变量</div><div class="line">* return: 成功返回0, 失败返回-1。</div><div class="line">*/</div><div class="line">int clearenv();</div></pre></td></tr></table></figure>
<h3 id="putenv和setenv的区别"><a href="#putenv和setenv的区别" class="headerlink" title="putenv和setenv的区别"></a>putenv和setenv的区别</h3><p>putenv可以使用程序中已经定义的且形如”name=value”的字符串作为参数。此时<strong>系统不再为该环境变量分配内存</strong>，环境变量将使用程序中定义变量的内存。<br>并将该字符串的地址保存在环境变量中。所以要<strong>使用putenv一定要用全局变量作为参数</strong>，否则程序退出栈内存被释放，再次访问环境变量将会出现未定义行为，<br>导致环境变量不可用。</p>
<p>putenv也可用字符串常量做参数，这个时候系统将为其分配内存。</p>
<p>但是setenv去设置环境变量系统将会先malloc出一块内存给环境变量使用，所以此时不需要担心环境不可用的情况。</p>
<h2 id="环境变量在进程空间中的存储位置"><a href="#环境变量在进程空间中的存储位置" class="headerlink" title="环境变量在进程空间中的存储位置"></a>环境变量在进程空间中的存储位置</h2><p><strong>环境变量和环境字符串通常放在进程存储空间的顶部，也就是栈内存之上</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">extern char **environ;</div><div class="line">int main() &#123;</div><div class="line">    int i;</div><div class="line">    printf(&quot;the address of the environment: %p\n&quot;, environ);</div><div class="line">    printf(&quot;the adress of first i: %p\n&quot;, &amp;i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="环境变量中进行增删改操作的实现机制"><a href="#环境变量中进行增删改操作的实现机制" class="headerlink" title="环境变量中进行增删改操作的实现机制"></a>环境变量中进行增删改操作的实现机制</h2><p>删除环境变量比较容易，当增加或者修改环境变量的时候由于环境表和环境字符串通常占用的是进程地址空间的顶部，所以它不能再向<br>高地址（向上）扩展，同时也不能在移动在它之下的各栈帧，所以也不能向下扩展。两者的组合使得该空间的长度不能再增加。</p>
<ul>
<li><strong>删除环境变量</strong>：删除环境变量时只需要先找到该指针，然后将所有后续指针都向环境表的首部顺序移一个位置。</li>
<li><strong>修改环境变量</strong>:<ul>
<li>若新的环境变量value长度小于或者等于原有的值，则直接将其复制到旧值。</li>
<li>否则，先调用malloc在堆上分配一块内存，然后将新字符串指向该空间，接着使环境变量表中针对name的指针指向新分区。</li>
</ul>
</li>
<li><strong>增加环境变量</strong>： 增加新环境变量比较复杂。必须首先通过调用malloc为新的name=value分配内存空间，然后将字符串复制到此空间中。<ul>
<li>如果该name是第一次增加，则必须调用malloc为<strong>新的指针表</strong>分配内存空间，然后将原来的环境表复制到新的内存，并将指向新的name=value字符串<br>的指针存放在该指针表的表尾，然后将空指针放在其后面。最后<strong>使environ指向新的环境表</strong>。这样就导致原来位于栈顶之上的环境表移到了堆内存中。<br>但是大多数的环境指针仍然指向栈顶之上的name=value字符串。</li>
<li>如果不是第一次新增加一个name，可知之前已经将环境表迁移到堆内存中，所以只需要调用realloc，以分配比原空间多存放一个指针的空间。然后将指针指向name=value<br>字符串的指针，最后是一个NULL指针。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix环境变量&quot;&gt;&lt;a href=&quot;#Unix环境变量&quot; class=&quot;headerlink&quot; title=&quot;Unix环境变量&quot;&gt;&lt;/a&gt;Unix环境变量&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="setenv" scheme="http://yoursite.com/tags/setenv/"/>
    
      <category term="putenv" scheme="http://yoursite.com/tags/putenv/"/>
    
      <category term="unsetenv" scheme="http://yoursite.com/tags/unsetenv/"/>
    
      <category term="clearenv" scheme="http://yoursite.com/tags/clearenv/"/>
    
  </entry>
  
</feed>
