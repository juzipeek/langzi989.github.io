<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏传柳</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-22T15:56:04.607Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏传柳(langzi989)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CprintNULL</title>
    <link href="http://yoursite.com/2017/05/22/CprintNULL/"/>
    <id>http://yoursite.com/2017/05/22/CprintNULL/</id>
    <published>2017-05-22T15:55:20.000Z</published>
    <updated>2017-05-22T15:56:04.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="printf-s情况下字符串为NULL的输出结果"><a href="#printf-s情况下字符串为NULL的输出结果" class="headerlink" title="printf %s情况下字符串为NULL的输出结果"></a>printf %s情况下字符串为NULL的输出结果</h1><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"this%s\n"</span>, s);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</div></pre></td></tr></table></figure>
<p>当s为NULL的时候，执行上面三个语句两个语句执行结果分别为:<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this(null)</div><div class="line">segment fault</div></pre></td></tr></table></figure></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在ANSI C中没有对printf时字符串为NULL的情况进行明确的定义，所以当出现这种情况时往往是未定义行为。<br>所以上面第一种情况会出现segment fault的情况是一种未定义行为，可能在其他编译器上不会出现段错误。</p>
<p>上面出现段错误的行为我们可以通过反汇编进行查看。</p>
<p>反汇编的结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">804842</span>d:	c7 <span class="number">04</span> <span class="number">24</span> <span class="number">20</span> <span class="number">85</span> <span class="number">04</span> <span class="number">08</span> 	movl   $<span class="number">0x8048520</span>,(%esp)</div><div class="line"><span class="number">8048434</span>:	e8 <span class="number">0b</span> ff ff ff       	call   <span class="number">8048344</span> &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line"><span class="number">8048439</span>:	c7 <span class="number">04</span> <span class="number">24</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 	movl   $<span class="number">0x0</span>,(%esp)</div><div class="line"><span class="number">8048440</span>:	e8 df fe ff ff       	call   <span class="number">8048324</span> &lt;<span class="built_in">puts</span>@plt&gt;</div><div class="line"><span class="number">8048445</span>:	<span class="number">83</span> c4 <span class="number">14</span>             	add    $<span class="number">0x14</span>,%esp</div></pre></td></tr></table></figure>
<p>从上面可以看出第一个执行被汇编成真正的printf指令，而第二个简单的printf NULL的指令被汇编成puts。<br>所以才出现了上面的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;printf-s情况下字符串为NULL的输出结果&quot;&gt;&lt;a href=&quot;#printf-s情况下字符串为NULL的输出结果&quot; class=&quot;headerlink&quot; title=&quot;printf %s情况下字符串为NULL的输出结果&quot;&gt;&lt;/a&gt;printf %s情况下字
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="print" scheme="http://yoursite.com/tags/print/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境变量</title>
    <link href="http://yoursite.com/2017/05/22/Unix%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2017/05/22/Unix环境变量/</id>
    <published>2017-05-22T15:53:53.000Z</published>
    <updated>2017-05-22T15:54:56.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix环境变量"><a href="#Unix环境变量" class="headerlink" title="Unix环境变量"></a>Unix环境变量</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Unix中，<strong>每个进程都有自己的一组环境变量</strong>，这些环境变量，要么是一组全局字符串，要么是子进程从父进程继承而来的,如果子进程不对其修改则与父进程的环境变量一模一样。<br>Unix内核并不查看这些字符串，它们的解释权完全取决于各个应用程序。例如shell是Unix中一个可执行程序，通常shell的启动文件中<br>会对环境变量进行设置。所以当我们进入shell之后可以查看path等环境变量。环境变量可以在登录的时候自动设置，也可以由用户自行设置。</p>
<h2 id="环境变量相关变量"><a href="#环境变量相关变量" class="headerlink" title="环境变量相关变量"></a>环境变量相关变量</h2><p>每个程序都会接收到一张环境表。与参数表一样，环境表也是一个字符指针数组。其中每个指针都包含一个以NULL结尾的字符串的地址。全局变量<br>environ指向了这个数组的地址。</p>
<p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">extern char **environ;</div><div class="line">if (environ!= NULL) &#123;</div><div class="line">        for (i = 0; environ[i] != NULL; i++) &#123;</div><div class="line">            printf(&quot;env: %s\n&quot;, environ[i]);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="环境变量相关的函数"><a href="#环境变量相关的函数" class="headerlink" title="环境变量相关的函数"></a>环境变量相关的函数</h2><p>与环境变量相关的函数包括以下几种：取环境变量的值，添加环境变量、修改环境变量、以及删除环境变量.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">//获取环境变量的值</div><div class="line">char* getenv(const char* name); //若包含此key返回对应的值，否则返回NULL</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 修改环境变量的值 前面两个分别为键值对，最后一个表示是否需要删除原有的定义重写。</div><div class="line">* params：键没有存在，则创建此键值对。若键已经存在：rewrite=0时不覆盖原来的值；rewrite!=0覆盖原来的值</div><div class="line">* return：成功返回0， 出错返回非0。</div><div class="line">*/</div><div class="line">int setenv(const char* name, const char* value, int rewrite);</div><div class="line"></div><div class="line">/*</div><div class="line">* function： 添加环境变量，若存在则删除原有的，添加新的，不存在则直接添加</div><div class="line">* params:  参数为一个键值对字符串，如&quot;name=test&quot;</div><div class="line">* return: 成功返回0,不成功返回-1</div><div class="line">*/</div><div class="line">int putenv(char *str);</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 删除name的定义，即使不存在也不出错。</div><div class="line">* params: 参数为键</div><div class="line">* return：出错返回-1,不出错返回0</div><div class="line">*/</div><div class="line">int unsetenv(const char*name);</div><div class="line"></div><div class="line">/*</div><div class="line">* function: 清除所有的环境变量</div><div class="line">* return: 成功返回0, 失败返回-1。</div><div class="line">*/</div><div class="line">int clearenv();</div></pre></td></tr></table></figure>
<h3 id="putenv和setenv的区别"><a href="#putenv和setenv的区别" class="headerlink" title="putenv和setenv的区别"></a>putenv和setenv的区别</h3><p>putenv可以使用程序中已经定义的且形如”name=value”的字符串作为参数。此时<strong>系统不再为该环境变量分配内存</strong>，环境变量将使用程序中定义变量的内存。<br>并将该字符串的地址保存在环境变量中。所以要<strong>使用putenv一定要用全局变量作为参数</strong>，否则程序退出栈内存被释放，再次访问环境变量将会出现未定义行为，<br>导致环境变量不可用。</p>
<p>putenv也可用字符串常量做参数，这个时候系统将为其分配内存。</p>
<p>但是setenv去设置环境变量系统将会先malloc出一块内存给环境变量使用，所以此时不需要担心环境不可用的情况。</p>
<h2 id="环境变量在进程空间中的存储位置"><a href="#环境变量在进程空间中的存储位置" class="headerlink" title="环境变量在进程空间中的存储位置"></a>环境变量在进程空间中的存储位置</h2><p><strong>环境变量和环境字符串通常放在进程存储空间的顶部，也就是栈内存之上</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">extern char **environ;</div><div class="line">int main() &#123;</div><div class="line">    int i;</div><div class="line">    printf(&quot;the address of the environment: %p\n&quot;, environ);</div><div class="line">    printf(&quot;the adress of first i: %p\n&quot;, &amp;i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="环境变量中进行增删改操作的实现机制"><a href="#环境变量中进行增删改操作的实现机制" class="headerlink" title="环境变量中进行增删改操作的实现机制"></a>环境变量中进行增删改操作的实现机制</h2><p>删除环境变量比较容易，当增加或者修改环境变量的时候由于环境表和环境字符串通常占用的是进程地址空间的顶部，所以它不能再向<br>高地址（向上）扩展，同时也不能在移动在它之下的各栈帧，所以也不能向下扩展。两者的组合使得该空间的长度不能再增加。</p>
<ul>
<li><strong>删除环境变量</strong>：删除环境变量时只需要先找到该指针，然后将所有后续指针都向环境表的首部顺序移一个位置。</li>
<li><strong>修改环境变量</strong>:<ul>
<li>若新的环境变量value长度小于或者等于原有的值，则直接将其复制到旧值。</li>
<li>否则，先调用malloc在堆上分配一块内存，然后将新字符串指向该空间，接着使环境变量表中针对name的指针指向新分区。</li>
</ul>
</li>
<li><strong>增加环境变量</strong>： 增加新环境变量比较复杂。必须首先通过调用malloc为新的name=value分配内存空间，然后将字符串复制到此空间中。<ul>
<li>如果该name是第一次增加，则必须调用malloc为<strong>新的指针表</strong>分配内存空间，然后将原来的环境表复制到新的内存，并将指向新的name=value字符串<br>的指针存放在该指针表的表尾，然后将空指针放在其后面。最后<strong>使environ指向新的环境表</strong>。这样就导致原来位于栈顶之上的环境表移到了堆内存中。<br>但是大多数的环境指针仍然指向栈顶之上的name=value字符串。</li>
<li>如果不是第一次新增加一个name，可知之前已经将环境表迁移到堆内存中，所以只需要调用realloc，以分配比原空间多存放一个指针的空间。然后将指针指向name=value<br>字符串的指针，最后是一个NULL指针。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix环境变量&quot;&gt;&lt;a href=&quot;#Unix环境变量&quot; class=&quot;headerlink&quot; title=&quot;Unix环境变量&quot;&gt;&lt;/a&gt;Unix环境变量&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="setenv" scheme="http://yoursite.com/tags/setenv/"/>
    
      <category term="putenv" scheme="http://yoursite.com/tags/putenv/"/>
    
      <category term="unsetenv" scheme="http://yoursite.com/tags/unsetenv/"/>
    
      <category term="clearenv" scheme="http://yoursite.com/tags/clearenv/"/>
    
  </entry>
  
  <entry>
    <title>文件IO相关函数</title>
    <link href="http://yoursite.com/2017/05/22/%E6%96%87%E4%BB%B6IO%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/05/22/文件IO相关函数/</id>
    <published>2017-05-22T15:31:31.000Z</published>
    <updated>2017-05-22T15:42:41.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件IO相关函数"><a href="#文件IO相关函数" class="headerlink" title="文件IO相关函数"></a>文件IO相关函数</h1><p>Unix中大多数文件的操作只需要用到五个函数open、read、write、lseek、和close。本章将详细讲解这些函数的用法以及参数详解。</p>
<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>对于内核而言，所有打开的文件都是通过文件描述符进行引用。文件描述符是一个非负整数。当打开或者创建一个文件的时候，内核向进程返回<br>一个文件描述符。当对这个文件进行读写的时候，将这个参数传递给read或write。LINUX用于IO的数据结构一章中讲了STDIN_FILENO、STDOUT_FILENO以及STDERR_FILENO所对应的文件描述符。</p>
<p>为了保证系统资源的合理使用和安全性，Unix系统对于系统和用户能打开的文件描述符的格式都做了一定的限制。通过一下命令我们可以进行查看：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sysctl -a | grep fs.file-max //查看系统级限制的文件描述符的个数</div><div class="line">ulimit -n //查看用户（进程）级别限制的文件描述符的个数，</div></pre></td></tr></table></figure>
<h3 id="文件描述符与文件指针的关系"><a href="#文件描述符与文件指针的关系" class="headerlink" title="文件描述符与文件指针的关系"></a>文件描述符与文件指针的关系</h3><p>文件描述符：内核会为每一个运行中的进程在进程控制块(pcb)中维护一个打开文件的记录表，每个表项都有一个指针指向打开的文件，文件描述符就是记录表的索引。</p>
<p>文件指针：C语言使用文件指针而不是文件描述符作为文件IO的句柄，文件指针是指向进程的用户空间中的一个FILE结构的数据结构，FILE结构中包括一个IO缓冲区和一个文件描述符，而文件描述符是<br>文件描述符表的一个索引，从某种意义上可以将文件指针理解为文件句柄的句柄。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  <span class="keyword">char</span>*	_ptr;</div><div class="line">  <span class="keyword">int</span>	_cnt;</div><div class="line">  <span class="keyword">char</span>*	_base;</div><div class="line">  <span class="keyword">int</span>	_flag;</div><div class="line">  <span class="keyword">int</span>	_file;</div><div class="line">  <span class="keyword">int</span>	_charbuf;</div><div class="line">  <span class="keyword">int</span>	_bufsiz;</div><div class="line">  <span class="keyword">char</span>*	_tmpfname;</div><div class="line">&#125; FILE;</div></pre></td></tr></table></figure>
<ul>
<li>文件指针相比于文件描述符是高级的接口.</li>
<li>文件指针使用fread()和fwrite()函数进行操作,文件描述符使用write()和read()函数进行操作</li>
<li>文件指针具有缓冲区，是较高级别的IO，读写时具有缓冲，具有错误指示和EOF检测；文件描述符没有</li>
<li>文件指针具有移植性，文件描述符不能移植到除Unix之外的系统。</li>
<li>fopen在stdio.h中，open在fcntl.h中</li>
<li>fopen是标准C中定义的，而open是posix中定义的。</li>
<li>fwrite/fread处理的速度快于read/write，但是在内存方面read/write性能较好。</li>
</ul>
<h2 id="函数open-和openat"><a href="#函数open-和openat" class="headerlink" title="函数open()和openat()"></a>函数open()和openat()</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">int</span> oflag, ...<span class="comment">/*mode_t mode*/</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">openat</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">int</span> oflag, ...<span class="comment">/*mode_t mode*/</span>)</span></span></div></pre></td></tr></table></figure>
<h3 id="返回值说明"><a href="#返回值说明" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>若文件打开失败返回-1，打开失败原因可以通过errno或者strerror(errno)查看;</p>
<p>若成功将返回最小的未用的文件描述符的值。</p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>path为要打开的文件的文件路径</li>
<li>oflag为文件打开模式.</li>
<li>…为可变参数，可以视情况添加</li>
</ul>
<h4 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h4><p>文件打开模式标识当前进程对打开文件的操作权限。通常用一个或者多个权限的或来表示。权限列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">flag</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">O_RDONLY</td>
<td>只读权限</td>
</tr>
<tr>
<td style="text-align:center">O_WRONLY</td>
<td>只写权限</td>
</tr>
<tr>
<td style="text-align:center">O_RDWR</td>
<td>读写权限</td>
</tr>
<tr>
<td style="text-align:center">O_EXEC</td>
<td>可执行权限</td>
</tr>
<tr>
<td style="text-align:center">O_SEARCH</td>
<td>搜索权限(针对目录)</td>
</tr>
<tr>
<td style="text-align:center">O_APPEND</td>
<td>每次写都追加到文件的末端</td>
</tr>
<tr>
<td style="text-align:center">O_CLOEXEC</td>
<td>把close_on_exec设置为文件描述符标识</td>
</tr>
<tr>
<td style="text-align:center">O_CREATE</td>
<td>若文件不存在，则创建它。使用此选项的时候，需要使用第三个参数指定该新文件的访问权限位</td>
</tr>
<tr>
<td style="text-align:center">O_DIRECTORY</td>
<td>如果path不是目录则出错</td>
</tr>
<tr>
<td style="text-align:center">O_EXCL</td>
<td>若同时执行了O_CREATE，若文件存在则出错，可以用此选项测试文件是否存在</td>
</tr>
<tr>
<td style="text-align:center">O_NOCTTY</td>
<td>如果PATH引用的是终端设备，则不将该终端设备作为该进程的控制终端</td>
</tr>
<tr>
<td style="text-align:center">O_NOFOLLOW</td>
<td>若PATH引用的是符号链接，则出错</td>
</tr>
<tr>
<td style="text-align:center">O_NONBLOCK</td>
<td>如果path引用的是FIFO,一个块特殊文件或者一个字符特殊文件，则将文本打开操作和后续的IO设置为非阻塞模式</td>
</tr>
<tr>
<td style="text-align:center">O_SYNC</td>
<td>使每次write等待物理IO完成，包括该write属性引起的文件属性更新需要的IO</td>
</tr>
<tr>
<td style="text-align:center">O_TRUNC</td>
<td>如果文件存在，且打开模式为只写或者读写，则将文件内容截断为0</td>
</tr>
<tr>
<td style="text-align:center">O_TTY_INIT</td>
<td>如果打开一个还未打开的终端设备，设置非标准termios参数值，使其符合Single Unix Specification</td>
</tr>
<tr>
<td style="text-align:center">O_DSYNC</td>
<td>每次write要等待物理IO操作完成，但是如果该写操作并不影响读取刚写入的数据，则不需要等待文件属性被更新</td>
</tr>
<tr>
<td style="text-align:center">O_RSYNC</td>
<td>使每一个以文件描述符作为参数进行的read操作等待，直至所有对文件同一部分挂起的写操作完成</td>
</tr>
</tbody>
</table>
<h4 id="文件访问权限mode-t"><a href="#文件访问权限mode-t" class="headerlink" title="文件访问权限mode_t"></a>文件访问权限mode_t</h4><p>mode的值表示了对文件的访问权限。这个访问权限与使用shell命令chmod去修改文件的权限的含义相同，文件的权限包括三大类，分别是当前文件对于文件所有者(u)，文件所有者所在的组(g)以及其他<br>用户(o)而言,对这三种角色又分别具有读写可执行的权限。所以这个参数只有在创建文件的时候才用到，用来指定当前创建的文件所对应的权限。</p>
<table>
<thead>
<tr>
<th style="text-align:center">mode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">S_IRUSR</td>
<td>用户读</td>
</tr>
<tr>
<td style="text-align:center">S_IWUSR</td>
<td>用户写</td>
</tr>
<tr>
<td style="text-align:center">S_IXUSR</td>
<td>用户可执行</td>
</tr>
<tr>
<td style="text-align:center">S_IRGRP</td>
<td>组读</td>
</tr>
<tr>
<td style="text-align:center">S_IWGRP</td>
<td>组写</td>
</tr>
<tr>
<td style="text-align:center">S_IXGRP</td>
<td>组可执行</td>
</tr>
<tr>
<td style="text-align:center">S_IROTH</td>
<td>其他读</td>
</tr>
<tr>
<td style="text-align:center">S_IWOTH</td>
<td>其他写</td>
</tr>
<tr>
<td style="text-align:center">S_IXOTH</td>
<td>其他可执行</td>
</tr>
</tbody>
</table>
<blockquote>
<p>需要注意的是，目录的可执行权限以及读权限与文件的相应权限完全不同。目录的可执行权限表示搜索位，即可搜索权限，若目录不具有可执行权限则不能cd进入文件；<br>目录的读权限是可以查看目录中文件内容的权限，若文件夹不具有读权限，则ls不能显示目录内的内容。</p>
</blockquote>
<h3 id="open与openat的区别"><a href="#open与openat的区别" class="headerlink" title="open与openat的区别"></a>open与openat的区别</h3><p>open和openat的区别主要在fd上</p>
<ul>
<li>path参数指定的是绝对路径名，在这种情况下，open与openat相同，fd忽略.</li>
<li>path参数是相对路径名，fd参数指出了相对路径名在文件系统中的开始地址。fd参数通过打开相对路径名所在的文件目录获取。即此时fd为打开相对路径所获取的文件描述符。</li>
<li>path参数为相对路径，fd参数为AT_FDCWD，此时相对路径为当前目录，作用于open相同。</li>
</ul>
<h2 id="函数create"><a href="#函数create" class="headerlink" title="函数create()"></a>函数create()</h2><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="返回值说明-1"><a href="#返回值说明-1" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>若文件创建失败返回-1;<br>若创建成功返回当前创建文件的文件描述符。</p>
<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><p>参数与open中对应的参数含义相同</p>
<h3 id="函数功能说明"><a href="#函数功能说明" class="headerlink" title="函数功能说明"></a>函数功能说明</h3><p>create(path, mode)函数功能为创建新文件，与open(path, O_CREATE|O_TRUNC|O_WRONLY)功能相同。</p>
<h2 id="函数close"><a href="#函数close" class="headerlink" title="函数close()"></a>函数close()</h2><h3 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="返回值说明-2"><a href="#返回值说明-2" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>文件关闭成功返回0,关闭失败返回-1.</p>
<h3 id="函数功能介绍"><a href="#函数功能介绍" class="headerlink" title="函数功能介绍"></a>函数功能介绍</h3><p>该函数的作用是关闭指定文件描述符的文件，关闭文件时还会释放该进程加在该文件上的所有的记录锁。当一个进程终止时，内核自动关闭它所有打开的文件。很多程序都是利用这一功能而不是close<br>函数关闭打开的文件。但是对于长期运行的函数，最好还是使用close关闭打开的文件。</p>
<h2 id="lseek-函数"><a href="#lseek-函数" class="headerlink" title="lseek()函数"></a>lseek()函数</h2><p>每个打开的文件在文件表项中存在着对应的当前文件的偏移量(current file offset)，通常为非负整数。文件的读写操作都是从当前偏移量开始，并在操作后将偏移量增加相应的字节数。当打开文件<br>模式为O_APPEND时，该文件的offset是文件末尾，除此之外，其他情况都被初始化为0.</p>
<h3 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="返回值说明-3"><a href="#返回值说明-3" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>成功则返回新的文件的偏移量；<br>失败则返回-1.</p>
<h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>使用lseek()函数显式的为一个打开的文件设置偏移量。lseek仅将文件的偏移量记录在内核中，并不引起IO开销。</p>
<h3 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h3><p>参数offset的解释与whence相关。</p>
<ul>
<li>若whence为SEEK_SET，则将该文件的偏移量设置为距离<strong>当前文件开始处offset</strong>字节。</li>
<li>若whence为SEEK_CUR，则将该文件的偏移量设置为距离<strong>当前偏移量加offset</strong>个字节,此时offset可正可负。</li>
<li>若whence为SEEK_END，则将该文件的偏移量设置为<strong>当前文件长度加offser</strong>个字节，此时offset可正可负。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fd = open(<span class="string">"./data"</span>, O_WRONLY | O_CREAT | O_TRUNC);</div><div class="line">    lseek(fd, <span class="number">20</span>, SEEK_END);</div><div class="line">    write(fd, <span class="string">"haha"</span>, <span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="comment">//可以用这种方法查看打开文件的当前偏移量。</span></div><div class="line">    <span class="comment">//这种方法可以用来确定当前文件是否可以设置偏移量</span></div><div class="line">    <span class="comment">//若文件是管道、FIFO或者网络套接字，则lseek返回-1，并将errno设置为ESPIPE</span></div><div class="line">    <span class="keyword">off_t</span> currpos;</div><div class="line">    currpos = lseek(fd, <span class="number">0</span>, SEEK_CUR);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意一般情况下文件的偏移量不能为负值，但是一些特殊的文件允许偏移量为负值，如在FreeBSD上运行的设备/dev/kmem支持负的偏移量。<br>因为偏移量可能为负值，所以在比较偏移量的时候不能直接判断其是否小于0，而是要判断其是否等于-1.</p>
<p>文件的偏移量允许大于文件的长度，这时会在文件中出现一些空洞，但是是被允许的。文件中的空洞并不在文件中占磁盘块（block）。</p>
</blockquote>
<h2 id="read-函数"><a href="#read-函数" class="headerlink" title="read()函数"></a>read()函数</h2><h3 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure>
<h3 id="返回值说明-4"><a href="#返回值说明-4" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>若读取成功，读到文件末尾返回0，未读到文件末尾返回当前读的字节数。<br>若读取失败，返回-1。</p>
<h3 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h3><p>fd为要读取文件的文件描述符。buf为读取文件数据缓冲区，nbytes为期待读取的字节数，通常为sizeof(buf)。</p>
<blockquote>
<p>注意read函数默认读入多行，遇到换行不会停止读入，直到读到文件末尾，下一次读取返回值为0.</p>
</blockquote>
<h2 id="write-函数"><a href="#write-函数" class="headerlink" title="write()函数"></a>write()函数</h2><h3 id="函数原型-5"><a href="#函数原型-5" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> ntyes);</div></pre></td></tr></table></figure>
<h3 id="返回值说明-5"><a href="#返回值说明-5" class="headerlink" title="返回值说明"></a>返回值说明</h3><p>若写入成功则返回写入的字节数；失败返回-1.</p>
<h3 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h3><p>buf为写入内容的缓冲区，ntyes为期待写入的字节数，通常为sizeof(buf)。一般情况下返回值与ntypes相等，否则写入失败。</p>
<blockquote>
<p>当指定O_APPEND选项，内容将从文件末尾写入，否则从文件开始写入。一般情况下将缓冲区的长度设置为磁盘块的大小可以最大程度的提升程序读写的性能。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件IO相关函数&quot;&gt;&lt;a href=&quot;#文件IO相关函数&quot; class=&quot;headerlink&quot; title=&quot;文件IO相关函数&quot;&gt;&lt;/a&gt;文件IO相关函数&lt;/h1&gt;&lt;p&gt;Unix中大多数文件的操作只需要用到五个函数open、read、write、lseek、和c
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="open" scheme="http://yoursite.com/tags/open/"/>
    
      <category term="openat" scheme="http://yoursite.com/tags/openat/"/>
    
      <category term="read" scheme="http://yoursite.com/tags/read/"/>
    
      <category term="write" scheme="http://yoursite.com/tags/write/"/>
    
      <category term="close" scheme="http://yoursite.com/tags/close/"/>
    
      <category term="lseek" scheme="http://yoursite.com/tags/lseek/"/>
    
  </entry>
  
  <entry>
    <title>Unix错误处理</title>
    <link href="http://yoursite.com/2017/05/22/Unix%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/05/22/Unix错误处理/</id>
    <published>2017-05-22T15:24:40.000Z</published>
    <updated>2017-05-22T15:29:25.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix错误处理"><a href="#Unix错误处理" class="headerlink" title="Unix错误处理"></a>Unix错误处理</h1><p>当Unix系统函数出错的时候，通常会返回一个负值，同时整型变量errno通常被设置为具有特定信息的值。例如当使用open打开文件的时候，若当前文件不存在，此时open的返回值为-1,errno被设置为2(ENOENT)。<br>系统函数出错的返回值不一定为负数，是根据具体函数具体定义的，如当系统函数返回一个指针时，若出错，将会返回NULL。</p>
<p>Linux系统中errno.h中定义了一系列的错误宏，他们之处了不同错误对应的错误ID，为整型变量，可被赋值。</p>
<blockquote>
<p>关于errno需要注意的两点：</p>
<ul>
<li>如果没出错，errno将不会被进程设置，所以一般当利用函数返回值确认已经出错的时候，再去查看相应的errno</li>
<li>任何函数不会讲errno的值设置为0,而且在errno.h中定义的所有宏定义都不为0</li>
</ul>
</blockquote>
<h2 id="Unix错误处理的两个相关函数"><a href="#Unix错误处理的两个相关函数" class="headerlink" title="Unix错误处理的两个相关函数"></a>Unix错误处理的两个相关函数</h2><h3 id="strerror函数"><a href="#strerror函数" class="headerlink" title="strerror函数"></a>strerror函数</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strerror</span><span class="params">(<span class="keyword">int</span> errno)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h4><p>此函数的功能为将errno转化为其对应的具体错误信息。</p>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> fd = open(<span class="string">"data"</span>);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</div><div class="line">       <span class="built_in">printf</span>(<span class="string">"%s"</span>, strerror(errno));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="perror函数"><a href="#perror函数" class="headerlink" title="perror函数"></a>perror函数</h3><h4 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="函数功能-1"><a href="#函数功能-1" class="headerlink" title="函数功能"></a>函数功能</h4><p>perror基于当前errno的值，在标准错误流上输出一个出错信息。输出内容首先输出msg所指的字符串，然后一个冒号，空格，接着是errno对应的错误字符串，最后是一个换行符。</p>
<h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> fd = open(<span class="string">"data"</span>);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</div><div class="line">       <span class="built_in">printf</span>(<span class="string">"%s"</span>, strerror(errno));</div><div class="line">       perror(argv[<span class="number">0</span>]);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一些特殊的错误"><a href="#一些特殊的错误" class="headerlink" title="一些特殊的错误"></a>一些特殊的错误</h2><p>EAGAIN，EWOULDBLOCK和EINTR</p>
<p>在Linux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。</p>
<p>从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。</p>
<p>　　例如，以 O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返 回，</p>
<p>read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。</p>
<p>　　又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。</p>
<p>EAGAIN：Linux - 非阻塞socket编程处理EAGAIN错误</p>
<p>　　在linux进行非阻塞的socket接收数据时经常出现Resource temporarily unavailable，errno代码为11(EAGAIN)，这是什么意思？</p>
<p>这表明你在非阻塞模式下调用了阻塞操作，在该操作没有完成就返回这个错误，这个错误不会破坏socket的同步，不用管它，下次循环接着recv就可以。</p>
<p>对非阻塞socket而言，EAGAIN不是一种错误。在VxWorks和Windows上，EAGAIN的名字叫做EWOULDBLOCK。</p>
<p>另外，如果出现EINTR即errno为4，错误描述Interrupted system call，操作也应该继续。</p>
<p>最后，如果recv的返回值为0，那表明连接已经断开，我们的接收操作也应该结束。</p>
<h2 id="错误恢复"><a href="#错误恢复" class="headerlink" title="错误恢复"></a>错误恢复</h2><p>我们可以将errno.h中定义的错误分为两种，分别是致命的和非致命的，对于致命性错误，无法执行恢复操作。对于非致命性错误，大多数来说是暂时的。</p>
<p>对于非致命性错误，最常用的做法就是延迟一段时间，然后重试。例如当错误表示网络不可用，这时我们将可以通过延迟一段时间，进行重新连接。</p>
<h2 id="errno宏定义及相应解释"><a href="#errno宏定义及相应解释" class="headerlink" title="errno宏定义及相应解释"></a>errno宏定义及相应解释</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="number">124</span> EMEDIUMTYPE   Wrong medium type</div><div class="line">　　<span class="number">123</span> ENOMEDIUM     No medium found</div><div class="line">　　<span class="number">122</span> EDQUOT        Disk quota exceeded</div><div class="line">　　<span class="number">121</span> EREMOTEIO     Remote I/O error</div><div class="line">　　<span class="number">120</span> EISNAM        Is a named type file</div><div class="line">　　<span class="number">119</span> ENAVAIL       No XENIX semaphores available</div><div class="line">　　<span class="number">118</span> ENOTNAM       Not a XENIX named type file</div><div class="line">　　<span class="number">117</span> EUCLEAN       Structure needs cleaning</div><div class="line">　　<span class="number">116</span> ESTALE        Stale NFS file handle</div><div class="line">　　<span class="number">115</span> EINPROGRESS  +Operation now in progress</div><div class="line">　　<span class="number">114</span> EALREADY      Operation already in progress</div><div class="line">　　<span class="number">113</span> EHOSTUNREACH  No route to host</div><div class="line">　　<span class="number">112</span> EHOSTDOWN     Host is down</div><div class="line">　　<span class="number">111</span> ECONNREFUSED  Connection refused</div><div class="line">　　<span class="number">110</span> ETIMEDOUT    +Connection timed out</div><div class="line">　　<span class="number">109</span> ETOOMANYREFS  Too many references: cannot splice</div><div class="line">　　<span class="number">108</span> ESHUTDOWN     Cannot send after transport endpoint shutdown</div><div class="line">　　<span class="number">107</span> ENOTCONN      Transport endpoint is not connected</div><div class="line">　　<span class="number">106</span> EISCONN       Transport endpoint is already connected</div><div class="line">　　<span class="number">105</span> ENOBUFS       No buffer space available</div><div class="line">　　<span class="number">104</span> ECONNRESET    Connection reset by peer</div><div class="line">　　<span class="number">103</span> ECONNABORTED  Software caused connection <span class="built_in">abort</span></div><div class="line">　　<span class="number">102</span> ENETRESET     Network dropped connection on reset</div><div class="line">　　<span class="number">101</span> ENETUNREACH   Network is unreachable</div><div class="line">　　<span class="number">100</span> ENETDOWN      Network is down</div><div class="line">　　<span class="number">99</span> EADDRNOTAVAIL Cannot assign requested address</div><div class="line">　　<span class="number">98</span> EADDRINUSE    Address already in use</div><div class="line">　　<span class="number">97</span> EAFNOSUPPORT  Address family not supported by protocol</div><div class="line">　　<span class="number">96</span> EPFNOSUPPORT  Protocol family not supported</div><div class="line">　　<span class="number">95</span> EOPNOTSUPP    Operation not supported</div><div class="line">　　<span class="number">94</span> ESOCKTNOSUPPORT Socket type not supported</div><div class="line">　　<span class="number">93</span> EPROTONOSUPPORT Protocol not supported</div><div class="line">　　<span class="number">92</span> ENOPROTOOPT   Protocol not available</div><div class="line">　　<span class="number">91</span> EPROTOTYPE    Protocol wrong type <span class="keyword">for</span> socket</div><div class="line">　　<span class="number">90</span> EMSGSIZE     +Message too <span class="keyword">long</span></div><div class="line">　　<span class="number">89</span> EDESTADDRREQ  Destination address required</div><div class="line">　　<span class="number">88</span> ENOTSOCK      Socket operation on non-socket</div><div class="line">　　<span class="number">87</span> EUSERS        Too many users</div><div class="line">　　<span class="number">86</span> ESTRPIPE      Streams pipe error</div><div class="line">　　<span class="number">85</span> ERESTART      Interrupted system call should be restarted</div><div class="line">　　<span class="number">84</span> EILSEQ        Invalid or incomplete multibyte or wide character</div><div class="line">　　<span class="number">83</span> ELIBEXEC      Cannot exec a shared library directly</div><div class="line">　　<span class="number">82</span> ELIBMAX       Attempting to link in too many shared libraries</div><div class="line">　　<span class="number">81</span> ELIBSCN       .lib section in a.out corrupted</div><div class="line">　　<span class="number">80</span> ELIBBAD       Accessing a corrupted shared library</div><div class="line">　　<span class="number">79</span> ELIBACC       Can not access a needed shared library</div><div class="line">　　<span class="number">78</span> EREMCHG       Remote address changed</div><div class="line">　　<span class="number">77</span> EBADFD        File descriptor in bad state</div><div class="line">　　<span class="number">76</span> ENOTUNIQ      Name not unique on network</div><div class="line">　　<span class="number">75</span> EOVERFLOW     Value too large <span class="keyword">for</span> defined data type</div><div class="line">　　<span class="number">74</span> EBADMSG      +Bad message</div><div class="line">　　<span class="number">73</span> EDOTDOT       RFS specific error</div><div class="line">　　<span class="number">72</span> EMULTIHOP     Multihop attempted</div><div class="line">　　<span class="number">71</span> EPROTO        Protocol error</div><div class="line">　　<span class="number">70</span> ECOMM         Communication error on send</div><div class="line">　　<span class="number">69</span> ESRMNT        Srmount error</div><div class="line">　　<span class="number">68</span> EADV          Advertise error</div><div class="line">　　<span class="number">67</span> ENOLINK       Link has been severed</div><div class="line">　　<span class="number">66</span> EREMOTE       Object is remote</div><div class="line">　　<span class="number">65</span> ENOPKG        Package not installed</div><div class="line">　　<span class="number">64</span> ENONET        Machine is not on the network</div><div class="line">　　<span class="number">63</span> ENOSR         Out of streams resources</div><div class="line">　　<span class="number">62</span> ETIME         Timer expired</div><div class="line">　　<span class="number">61</span> ENODATA       No data available</div><div class="line">　　<span class="number">60</span> ENOSTR        Device not a stream</div><div class="line">　　<span class="number">59</span> EBFONT        Bad font file format</div><div class="line">　　<span class="number">57</span> EBADSLT       Invalid slot</div><div class="line">　　<span class="number">56</span> EBADRQC       Invalid request code</div><div class="line">　　<span class="number">55</span> ENOANO        No anode</div><div class="line">　　<span class="number">54</span> EXFULL        Exchange full</div><div class="line">　　<span class="number">53</span> EBADR         Invalid request descriptor</div><div class="line">　　<span class="number">52</span> EBADE         Invalid exchange</div><div class="line">　　<span class="number">51</span> EL2HLT        Level <span class="number">2</span> halted</div><div class="line">　　<span class="number">50</span> ENOCSI        No CSI structure available</div><div class="line">　　<span class="number">49</span> EUNATCH       Protocol driver not attached</div><div class="line">　　<span class="number">48</span> ELNRNG        Link number out of range</div><div class="line">　　<span class="number">47</span> EL3RST        Level <span class="number">3</span> reset</div><div class="line">　　<span class="number">46</span> EL3HLT        Level <span class="number">3</span> halted</div><div class="line">　　<span class="number">45</span> EL2NSYNC      Level <span class="number">2</span> not synchronized</div><div class="line">　　<span class="number">44</span> ECHRNG        Channel number out of range</div><div class="line">　　<span class="number">43</span> EIDRM         Identifier removed</div><div class="line">　　<span class="number">42</span> ENOMSG        No message of desired type</div><div class="line">　　<span class="number">40</span> ELOOP         Too many levels of symbolic links</div><div class="line">　　<span class="number">39</span> ENOTEMPTY    +Directory not empty</div><div class="line">　　<span class="number">38</span> ENOSYS       +Function not implemented</div><div class="line">　　<span class="number">37</span> ENOLCK       +No locks available</div><div class="line">　　<span class="number">36</span> ENAMETOOLONG +File name too <span class="keyword">long</span></div><div class="line">　　<span class="number">35</span> EDEADLK      +Resource deadlock avoided</div><div class="line">　　<span class="number">34</span> ERANGE       +Numerical result out of range</div><div class="line">　　<span class="number">33</span> EDOM         +Numerical argument out of domain</div><div class="line">　　<span class="number">32</span> EPIPE        +Broken pipe</div><div class="line">　　<span class="number">31</span> EMLINK       +Too many links</div><div class="line">　　<span class="number">30</span> EROFS        +Read-only file system</div><div class="line">　　<span class="number">29</span> ESPIPE       +Illegal seek</div><div class="line">　　<span class="number">28</span> ENOSPC       +No space left on device</div><div class="line">　　<span class="number">27</span> EFBIG        +File too large</div><div class="line">　　<span class="number">26</span> ETXTBSY       Text file busy</div><div class="line">　　<span class="number">25</span> ENOTTY       +Inappropriate ioctl <span class="keyword">for</span> device</div><div class="line">　　<span class="number">24</span> EMFILE       +Too many open files</div><div class="line">　　<span class="number">23</span> ENFILE       +Too many open files in system</div><div class="line">　　<span class="number">22</span> EINVAL       +Invalid argument</div><div class="line">　　<span class="number">21</span> EISDIR       +Is a directory</div><div class="line">　　<span class="number">20</span> ENOTDIR      +Not a directory</div><div class="line">　　<span class="number">19</span> ENODEV       +No such device</div><div class="line">　　<span class="number">18</span> EXDEV        +Invalid cross-device link</div><div class="line">　　<span class="number">17</span> EEXIST       +File exists</div><div class="line">　　<span class="number">16</span> EBUSY        +Device or resource busy</div><div class="line">　　<span class="number">15</span> ENOTBLK       Block device required</div><div class="line">　　<span class="number">14</span> EFAULT       +Bad address</div><div class="line">　　<span class="number">13</span> EACCES       +Permission denied</div><div class="line">　　<span class="number">12</span> ENOMEM       +Cannot allocate memory</div><div class="line">　　<span class="number">11</span> EAGAIN       +Resource temporarily unavailable</div><div class="line">　　<span class="number">10</span> ECHILD       +No child processes</div><div class="line">　　<span class="number">9</span> EBADF        +Bad file descriptor</div><div class="line">　　<span class="number">8</span> ENOEXEC      +Exec format error</div><div class="line">　　<span class="number">7</span> E2BIG        +Argument <span class="built_in">list</span> too <span class="keyword">long</span></div><div class="line">　　<span class="number">6</span> ENXIO        +No such device or address</div><div class="line">　　<span class="number">5</span> EIO          +Input/output error</div><div class="line">　　<span class="number">4</span> EINTR        +Interrupted system call</div><div class="line">　　<span class="number">3</span> ESRCH        +No such process</div><div class="line">　　<span class="number">2</span> ENOENT       +No such file or directory</div><div class="line">　　<span class="number">1</span> EPERM        +Operation not permitted</div><div class="line">　　<span class="number">0</span>                    Success</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix错误处理&quot;&gt;&lt;a href=&quot;#Unix错误处理&quot; class=&quot;headerlink&quot; title=&quot;Unix错误处理&quot;&gt;&lt;/a&gt;Unix错误处理&lt;/h1&gt;&lt;p&gt;当Unix系统函数出错的时候，通常会返回一个负值，同时整型变量errno通常被设置为具有特定
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="errno" scheme="http://yoursite.com/tags/errno/"/>
    
      <category term="错误处理" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unix体系结构</title>
    <link href="http://yoursite.com/2017/05/22/Unix%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/05/22/Unix基础知识/</id>
    <published>2017-05-22T15:18:36.000Z</published>
    <updated>2017-05-22T15:24:05.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix基础知识"><a href="#Unix基础知识" class="headerlink" title="Unix基础知识"></a>Unix基础知识</h1><h2 id="Unix体系结构"><a href="#Unix体系结构" class="headerlink" title="Unix体系结构"></a>Unix体系结构</h2><p>从严格意义上讲，可以将操作系统定义为一种软件，它相当于一种控制计算机硬件资源，为程序提供运行环境的软件。我们通常将这种软件叫做内核，因为它相对比较小，并且位于环境的核心。Unix体系结构如下图:<br><img src="../assets/images/Unix体系结构.png" alt=""></p>
<p>内核的接口被称为系统调用（system Call），公共库函数建立在系统调用接口之上，<strong>应用程序既可以使用公共函数库，也可以使用系统调用。</strong>shell是一个特殊的应用程序，为运行其他应用程序提供了接口。</p>
<h2 id="Unix文件和目录"><a href="#Unix文件和目录" class="headerlink" title="Unix文件和目录"></a>Unix文件和目录</h2><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>Unix文件系统是文件和目录的一种层次结构，所有文件的起点都是<strong>根目录(root)</strong>，名称为”/“.</p>
<p>目录是一个包含目录项的文件。逻辑上，可以认为每个目录项都包含一个文件，同时还说明该文件属性的信息。<strong>文件属性包括文件类型(普通文件还是目录)、文件权限、；链接到改文件的进程数、文件所有者、文件所有者所在的组 文件大小以及文件最后修改的时间等</strong>。stat和fstat函数返回一个文件属性的信息结构。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//通过文件名获取文件信息，并保存在buf所指的结构体stat中</span></div><div class="line"><span class="comment">//返回值：成功返回0，失败-1，错误码存在errno中</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file_name, <span class="keyword">struct</span> stat* buf)</span></span>;</div><div class="line"></div><div class="line">数据类型：</div><div class="line"><span class="keyword">struct</span> stat &#123;</div><div class="line"><span class="keyword">dev_t</span>       st_dev;     <span class="comment">/* ID of device containing file -文件所在设备的ID*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">ino_t</span>       st_ino;     <span class="comment">/* inode number -inode节点号*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">mode_t</span>      st_mode;    <span class="comment">/* protection -保护模式?*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">nlink_t</span>     st_nlink;   <span class="comment">/* number of hard links -链向此文件的连接数(硬连接)*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">uid_t</span>       st_uid;     <span class="comment">/* user ID of owner -user id*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">gid_t</span>       st_gid;     <span class="comment">/* group ID of owner - group id*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">dev_t</span>       st_rdev;    <span class="comment">/* device ID (if special file) -设备号，针对设备文件*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">off_t</span>       st_size;    <span class="comment">/* total size, in bytes -文件大小，字节为单位*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">blksize_t</span>   st_blksize; <span class="comment">/* blocksize for filesystem I/O -系统块的大小*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">blkcnt_t</span>    st_blocks;  <span class="comment">/* number of blocks allocated -文件所占块数*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">time_t</span>      st_atime;   <span class="comment">/* time of last access -最近存取时间*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">time_t</span>      st_mtime;   <span class="comment">/* time of last modification -最近修改时间*/</span>  </div><div class="line"></div><div class="line"><span class="keyword">time_t</span>      st_ctime;   <span class="comment">/* time of last status change - */</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用C语言实现ls功能</p>
<p>涉及到的相关函数：</p>
<ul>
<li>文件夹操作函数opendir，readdir,closedir</li>
<li>opendir返回指向dir结构的指针，将该指针传递给readdir,无需关心dir结构中存在什么数据，直接读取即可。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err_quit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, message);</div><div class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</div><div class="line">  &#123;</div><div class="line">    err_quit(<span class="string">"usage: ls directory_name\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DIR *dp;</div><div class="line">  <span class="keyword">struct</span> dirent *dirp;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> ((dp = opendir(argv[<span class="number">1</span>])) == <span class="literal">NULL</span>)</div><div class="line">    err_quit(<span class="string">"can not open file\n"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">while</span> ((dirp = readdir(dp)) != <span class="literal">NULL</span>)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dirp-&gt;d_name);</div><div class="line">  closedir(dp);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>文件描述符是一个很小的非负整数，<strong>内核用文件描述符来标识一个特定进程正在访问的文件</strong>。当内核打开或创建文件时，他都会返回一个文件描述符。在读写文件时，都可以使用这个描述符（根据打开时的模式赋予权限）.</p>
<h3 id="标准输入、标准输出和标准错误流"><a href="#标准输入、标准输出和标准错误流" class="headerlink" title="标准输入、标准输出和标准错误流"></a>标准输入、标准输出和标准错误流</h3><p>按照惯例，每当运行一个新程序的时候，所有的shell都会为改程序默认打开三个文件描述符，即标准输入，标准输出和标注错误。如果不做特殊处理，这三个描述符都连接到终端，也可以将其重定向到文件。如ls &gt; test.data</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix基础知识&quot;&gt;&lt;a href=&quot;#Unix基础知识&quot; class=&quot;headerlink&quot; title=&quot;Unix基础知识&quot;&gt;&lt;/a&gt;Unix基础知识&lt;/h1&gt;&lt;h2 id=&quot;Unix体系结构&quot;&gt;&lt;a href=&quot;#Unix体系结构&quot; class=&quot;head
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Unix体系结构" scheme="http://yoursite.com/tags/Unix%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>函数dup与dup2</title>
    <link href="http://yoursite.com/2017/05/21/%E5%87%BD%E6%95%B0dup/"/>
    <id>http://yoursite.com/2017/05/21/函数dup/</id>
    <published>2017-05-21T15:31:31.000Z</published>
    <updated>2017-05-22T15:42:45.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数dup与dup2"><a href="#函数dup与dup2" class="headerlink" title="函数dup与dup2"></a>函数dup与dup2</h1><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> fd2)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h2><p>这两个函数的功能都是用来复制一个现有的文件描述符。返回的文件描述符与原有的文件描述符共用同一个文件表项，但是文件描述符标志将被清除，即当进程调用exec时文件描述符将不会被关闭。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>dup返回当前可用的最小的文件描述符。dup2返回fd2，若fd2所表示的文件已经打开，则将该文件描述符先关闭，然后再将fd复制到fd2上返回。若fd2与fd相同，则直接返回fd、.</p>
<h2 id="等效函数"><a href="#等效函数" class="headerlink" title="等效函数"></a>等效函数</h2><p>dup函数与fcntl的F_DUPFD功能相同。</p>
<p>dup(fd)等效于fcntl(fd, F_DUPFD, 0)</p>
<p>dup2(fd, fd2)等效于close(fd), fcntl(fd, F_DUPFD, fd2)</p>
<p>但是dup2是原子的上述先关闭然后在复制不是原子操作。</p>
<h2 id="作用及用途"><a href="#作用及用途" class="headerlink" title="作用及用途"></a>作用及用途</h2><p>dup函数常用来重定向进程的stdin、stdout以及stderr。原理与CGI类似，即将标准输入标准输出重定向到一个文件或者socket流等。</p>
<h2 id="重定向标准输出"><a href="#重定向标准输出" class="headerlink" title="重定向标准输出"></a>重定向标准输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fd = dup(STDIN_FILENO);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"dup error\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> buf[] = <span class="string">"this is a test of dup\n"</span>;</div><div class="line">    write(fd, buf, <span class="keyword">sizeof</span>(buf));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数dup与dup2&quot;&gt;&lt;a href=&quot;#函数dup与dup2&quot; class=&quot;headerlink&quot; title=&quot;函数dup与dup2&quot;&gt;&lt;/a&gt;函数dup与dup2&lt;/h1&gt;&lt;h2 id=&quot;函数原型&quot;&gt;&lt;a href=&quot;#函数原型&quot; class=&quot;head
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="dup" scheme="http://yoursite.com/tags/dup/"/>
    
      <category term="dup2" scheme="http://yoursite.com/tags/dup2/"/>
    
  </entry>
  
  <entry>
    <title>cgi原理</title>
    <link href="http://yoursite.com/2017/05/04/cgi%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/05/04/cgi原理/</id>
    <published>2017-05-04T12:36:55.000Z</published>
    <updated>2017-05-22T15:34:49.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGI原理"><a href="#CGI原理" class="headerlink" title="CGI原理"></a>CGI原理</h1><p>CGI（Common Gateway Interface）通用网关接口，CGI描述了服务器和请求处理程序之间传输数据局的<br>一种标准。在理解的过程中我们需要区分CGI和CGI程序，CGI是一种数据传输的标准，而CGI程序是实际处理<br>业务的一个程序。webserver每请求一次，CGI程序就会fork出一个子进程进行处理。CGI程序的参数通过环境<br>变量和标准输入获得，它的相应通过标准输出传递给webServer。</p>
<h2 id="CGI的工作原理是："><a href="#CGI的工作原理是：" class="headerlink" title="CGI的工作原理是："></a>CGI的工作原理是：</h2><ul>
<li>客户端通过http将请求发送到web服务器</li>
<li>web服务器接收并收集用户请求，然后交给CGI程序进行处理</li>
<li>CGI程序把处理后的结果发送给服务器</li>
<li>服务器将结果传送给浏览器</li>
</ul>
<p>其中上述第二步web服务器通过环境变量或标准输入将请求发送给CGI程序，第三步CGI通过标准输出将结果<br>发送给webServer</p>
<h2 id="CGI接口标准：标准输入-环境变量以及标准输出"><a href="#CGI接口标准：标准输入-环境变量以及标准输出" class="headerlink" title="CGI接口标准：标准输入,环境变量以及标准输出"></a>CGI接口标准：标准输入,环境变量以及标准输出</h2><table>
<thead>
<tr>
<th style="text-align:left">借口标准</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">标准输入</td>
<td>CGI程序像其他可执行程序一样,可通过标准输入(stdin)从Web服务器得到输入信息,如Form中的数据,这就是所谓的向CGI程序传递数据的POST方法。这意味着在操作系统命令行状态可执行CGI程序,对CGI程序进行调试。POST方法是常用的方法。</td>
</tr>
<tr>
<td style="text-align:left">环境变量</td>
<td>操作系统提供了许多环境变量,它们定义了程序的执行环境,应用程序可以存取它们。Web服务器和CGI接口又另外设置了自己的一些环境变量,用来向CGI程序传递一些重要的参数。CGI的GET方法还通过环境变量QUERY-STRING向CGI程序传递Form中的数据。</td>
</tr>
<tr>
<td style="text-align:left">标准输出</td>
<td>CGI程序通过标准输出(stdout)将输出信息传送给Web服务器。传送给Web服务器的信息可以用各种格式,通常是以纯文本或者HTML文本的形式,这样我们就可以在命令行状态调试CGI程序,并且得到它们的输出。</td>
</tr>
</tbody>
</table>
<p>###常用的环境变量<br>Linux中的环境变量是一系列的键值对集合，它们的值可以通过shell设置，也可以被其他进程或程序设置和访问，它们是web服务器传递给CGI程序的一种最简单的方式，之所以叫做环境变量是因为它们是全局变量，任何程序都可以存取它们。</p>
<table>
<thead>
<tr>
<th style="text-align:center">key</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SERVER_NAME</td>
<td>CGI脚本运行时的主机名和IP地址</td>
</tr>
<tr>
<td style="text-align:center">SERVER_SOFTWARE</td>
<td>你的服务器的类型如： CERN/3.0 或 NCSA/1.3.</td>
</tr>
<tr>
<td style="text-align:center">GATEWAY_INTERFACE</td>
<td>运行的CGI版本. 对于UNIX服务器, 这是CGI/1.1</td>
</tr>
<tr>
<td style="text-align:center">SERVER_PROTOCOL</td>
<td>服务器运行的HTTP协议. 这里当是HTTP/1.0.</td>
</tr>
<tr>
<td style="text-align:center">SERVER_PORT</td>
<td>服务器运行的TCP口，通常Web服务器是80.</td>
</tr>
<tr>
<td style="text-align:center">REQUEST_METHOD</td>
<td>POST 或 GET, 取决于你的表单是怎样递交的</td>
</tr>
<tr>
<td style="text-align:center">HTTP_ACCEPT</td>
<td>浏览器能直接接收的Content-types, 可以有HTTP Accept header定义.</td>
</tr>
<tr>
<td style="text-align:center">HTTP_USER_AGENT</td>
<td>递交表单的浏览器的名称、版本 和其他平台性的附加信息。</td>
</tr>
<tr>
<td style="text-align:center">HTTP_REFERER</td>
<td>递交表单的文本的 URL，不是所有的浏览器都发出这个信息，不要依赖它</td>
</tr>
<tr>
<td style="text-align:center">PATH_INFO</td>
<td>附加的路径信息, 由浏览器通过GET方法发出.</td>
</tr>
<tr>
<td style="text-align:center">PATH_TRANSLATED</td>
<td>在PATH_INFO中系统规定的路径信息.</td>
</tr>
<tr>
<td style="text-align:center">SCRIPT_NAME</td>
<td>指向这个CGI脚本的路径, 是在URL中显示的(如, /cgi-bin/thescript).</td>
</tr>
<tr>
<td style="text-align:center"><strong>QUERY_STRING</strong></td>
<td><strong>脚本参数或者表单输入项(如果是用GET递交). QUERY_STRING包含URL中问号后面的参数</strong></td>
</tr>
<tr>
<td style="text-align:center">REMOTE_HOST</td>
<td>递交脚本的主机名，这个值不能被设置.</td>
</tr>
<tr>
<td style="text-align:center">REMOTE_ADDR</td>
<td>递交脚本的主机IP地址.</td>
</tr>
<tr>
<td style="text-align:center">REMOTE_USER</td>
<td>递交脚本的用户名. 如果服务器的authentication被激活，这个值可以设置。</td>
</tr>
<tr>
<td style="text-align:center">REMOTE_IDENT</td>
<td>如果Web服务器是在ident (一种确认用户连接你的协议)运行, 递交表单的系统也在运行ident, 这个变量就含有ident返回值.</td>
</tr>
<tr>
<td style="text-align:center">CONTENT_TYPE</td>
<td>如果表单是用POST递交, 这个值将是 application/x-www-form-urlencoded. 在上载文件的表单中, content-type 是个 multipart/form-data.</td>
</tr>
<tr>
<td style="text-align:center"><strong>CONTENT_LENGTH</strong></td>
<td><strong>对于用POST递交的表单,标准输入口的字节数.</strong></td>
</tr>
</tbody>
</table>
<h2 id="CGI的工作原理图"><a href="#CGI的工作原理图" class="headerlink" title="CGI的工作原理图"></a>CGI的工作原理图</h2><p><img src="../assets/images/CGI" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGI原理&quot;&gt;&lt;a href=&quot;#CGI原理&quot; class=&quot;headerlink&quot; title=&quot;CGI原理&quot;&gt;&lt;/a&gt;CGI原理&lt;/h1&gt;&lt;p&gt;CGI（Common Gateway Interface）通用网关接口，CGI描述了服务器和请求处理程序之间传输数据
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="cgi" scheme="http://yoursite.com/tags/cgi/"/>
    
  </entry>
  
  <entry>
    <title>Wait函数详解</title>
    <link href="http://yoursite.com/2017/05/04/Wait%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/05/04/Wait函数详解/</id>
    <published>2017-05-04T07:40:48.000Z</published>
    <updated>2017-05-22T15:17:19.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wait函数详解"><a href="#Wait函数详解" class="headerlink" title="Wait函数详解"></a>Wait函数详解</h1><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>sys/types.h<br>signal.h</p>
<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>int kill(pid_t pid, int sig);</p>
<p>返回值：执行成功返回0，执行失败返回-1。</p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>pid为进程ID,sig标识要发送的信号。</p>
<p>kill()函数的作用是用来向指定的进程或进程组发送信号。其中pid有一下<br>几种类型:</p>
<ul>
<li>pid &gt; 0： 发送信号给<strong>进程</strong>标识为pid的进程</li>
<li>pid = 0： 发送信号给当前进程<strong>相同进程组</strong>的所有进程</li>
<li>pid = -1：发送信号给<strong>系统内除了1号进程以外</strong>的所有进程</li>
<li>pid &lt; -1：发送信号给<strong>进程组</strong>标识为-pid的进程。</li>
</ul>
<p>当sig=0时没有信号发出，但是系统会执行错误检查，通常会利用sig值为0来检查某个进程是否在执行。</p>
<p>###Example<br>相关知识：WIFSIGNALED和WIFEXITED两个宏是用来判断当前程序的子进程的退出方式，是接收到信号异常退出<br>还是正常调用exit()或return退出。</p>
<ul>
<li>WIFEXITED: 调用exit()或return退出</li>
<li>WIFSIGNALED:接收到信号异常退出 此时可以使用WTERMSIG(status)获取其接受信号的内容。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">if</span>(!(pid= fork()))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Hi I am child process!\n"</span>);</div><div class="line">        sleep(<span class="number">10</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"send signal to child process (%d) \n"</span>, pid);</div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">        kill(pid, SIGABRT);</div><div class="line">        wait(&amp;status);</div><div class="line">        <span class="keyword">if</span>(WIFSIGNALED(status))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"chile process receive signal %d\n"</span>, WTERMSIG(status));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="wait-与waitpid"><a href="#wait-与waitpid" class="headerlink" title="wait()与waitpid()"></a>wait()与waitpid()</h2><p>###头文件<br>sys/wait.h</p>
<p>###函数原型<br>pid_t wait(int<em> status);<br>pid_t waitpid(pid_t pid, int</em> status, int options);</p>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>父进程创建子进程之后，父进程使用wait和waitpid具有监视子进程的运行状态的能力。这两个函数用于<strong>等待子进程的状态发生变化回调并且获取状态发生变化的信息</strong>，所能获取的状态变化包括：<strong>子进程运行结束,子进程被信号量暂停，子进程被信号量回复运行</strong>。</p>
<p>父进程执行wait函数之后，父进程会被阻塞在此处，如果子进程状态发生变化，则wait函数会立即返回结果；否则wait函数会一直阻塞直到子进程状态发生变化。</p>
<p>通常意义上，，如果子进程状态发生了变化，但是还是未被其父进程或者其他系统回调执行wait函数，此时的子进程被称为可等待的。</p>
<p>子进程运行结束后父进程执行wait函数可以推动系统释放与子进程相关的资源；否则子进程将会被维持在<strong>僵尸进程</strong>（子进程已结束，而父进程还在运行）的状态下一直存在。</p>
<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>pid：要监听的进程的ID(&lt;-1, =-1, =0, &gt; 0)</li>
<li>status: 用于存储出发状态变化时的信号值和exit(code)中的code值。</li>
<li>options 提供一些额外的选项控制waitpid,目前linux中只支持WNOHANG和WUNTRACED两个选项，这是两个常数宏，可以使用|连接使用.</li>
</ul>
<p><strong>pid详细说明</strong>:</p>
<ul>
<li>pid &lt; -1 : 监听范围为进程组为-pid的所有子进程</li>
<li>pid = -1 : 监听范围为调用wait/waitpid的所有子进程</li>
<li>pid = 0: 监听范围为子进程的进程组ID（与父进程相等）</li>
<li>pid &gt; 0: 监听特定pid的进程</li>
</ul>
<p><strong>status详细说明</strong></p>
<p>status用于保存出发wait的信号值或者退出时exit(code)中的code值</p>
<p><strong>options详细说明</strong></p>
<ul>
<li>WNOHANG : 使用此参数调用waitpid,即使子进程没有退出，他也会立即返回，而不是像wait一直等下去</li>
<li>WUNTRACED : 用于调试，极少用</li>
</ul>
<p>一般情况下使用值为0即可。</p>
<h3 id="wait与waitpid关系"><a href="#wait与waitpid关系" class="headerlink" title="wait与waitpid关系"></a>wait与waitpid关系</h3><p>wait实质上是waitpid中pid=-1,options=0时封装，即</p>
<p>wait(&amp;status)与waitpid(-1, &amp;status, 0)完全相同</p>
<p>###相关宏</p>
<p>wait.h中定义了一些宏用于解析status的值：</p>
<table>
<thead>
<tr>
<th style="text-align:center">宏</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">WIFEXITED(status)</td>
<td>子进程正常退出返回true否则false</td>
</tr>
<tr>
<td style="text-align:center">WEXITSTATUS(status)</td>
<td>当正常退出时，返回exit(code)中的code</td>
</tr>
<tr>
<td style="text-align:center">WIFSIGNALED</td>
<td>子进程接受信号退出时返回true，否则false</td>
</tr>
<tr>
<td style="text-align:center">WTERMSIG</td>
<td>被信号量杀死时，返回信号量的值</td>
</tr>
<tr>
<td style="text-align:center">WIFSTOPED(status)</td>
<td>当子进程被信号量暂停时返回true</td>
</tr>
<tr>
<td style="text-align:center">WSTOPSIG(status)</td>
<td>被信号量暂停时信号量的值</td>
</tr>
</tbody>
</table>
<p><strong>options值</strong>:</p>
<table>
<thead>
<tr>
<th style="text-align:center">常亮</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">WNOHANG</td>
<td>调用wait时制定pid仍未返回，wait立即返回0，用于判断子进程有没有结束</td>
</tr>
<tr>
<td style="text-align:center">WUNTRACED</td>
<td>当子进程被暂停时，则wait立即返回子进程的pid</td>
</tr>
<tr>
<td style="text-align:center">WCONTINUED</td>
<td>当被暂停的子进程又被信号量恢复后，则wait立即返回子进程的pid。Linux 2.6.10及以后生效。在Mac 0S X 10.9.5上未生效。</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Wait函数详解&quot;&gt;&lt;a href=&quot;#Wait函数详解&quot; class=&quot;headerlink&quot; title=&quot;Wait函数详解&quot;&gt;&lt;/a&gt;Wait函数详解&lt;/h1&gt;&lt;h2 id=&quot;kill&quot;&gt;&lt;a href=&quot;#kill&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="wait" scheme="http://yoursite.com/tags/wait/"/>
    
      <category term="kill" scheme="http://yoursite.com/tags/kill/"/>
    
  </entry>
  
  <entry>
    <title>Linux用于IO的数据结构及fcntl函数详解</title>
    <link href="http://yoursite.com/2017/05/01/Linux%E7%94%A8%E4%BA%8EIO%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8Afcntl%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/05/01/Linux用于IO的数据结构及fcntl函数详解/</id>
    <published>2017-05-01T15:31:31.000Z</published>
    <updated>2017-05-22T15:43:29.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux用于I-O的数据结构及fcntl函数详解"><a href="#Linux用于I-O的数据结构及fcntl函数详解" class="headerlink" title="Linux用于I/O的数据结构及fcntl函数详解"></a>Linux用于I/O的数据结构及fcntl函数详解</h1><h2 id="Linux内核用于IO的数据结构"><a href="#Linux内核用于IO的数据结构" class="headerlink" title="Linux内核用于IO的数据结构"></a>Linux内核用于IO的数据结构</h2><p>内核使用<strong>三种数据结构</strong>表示打开的文件，它们之间的关系决定了在文件共享方面一个进程对另一个进程可能产生的影响.</p>
<ul>
<li>进程表项 每个进程在记录表中都有一个记录项，记录项中包含一张打开的文件描述符表，可将其视为一个矢量，每个描述符占用一项。与每个文件描述符相关联的是：<ul>
<li>文件描述符标志(close_on_exec,close_on_exec是一个进程所有文件描述符的标记位图，每个比特位代表一个打开的文件描述符，用于确定在系统调用execve()时需要关闭的文件句柄)。</li>
<li>指向一个文件表项的指针</li>
</ul>
</li>
<li>文件表项 内核为所有打开文件维护一张文件表（<strong>不同进程打开相同文件将有两条记录</strong>），每个文件表项中包括：<ul>
<li>文件状态标志(read,write,append,async,nonblock等)</li>
<li>当前文件偏移量</li>
<li>指向该文件v(i)节点表项的指针</li>
</ul>
</li>
<li>节点表项。每个打开的文件都有一个v-node结构，v-node中包含了文件类型和对此文件进行各种操作函数的指针。对于大多数文件，V-node中还包含了文件inode节点信息，这些信息是打开文件时从磁盘上读入内存的，所以文件所有信息都是随时可用的。<ul>
<li>v节点的信息</li>
<li>当前文件的长度</li>
<li>i节点的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>close_on_exec是一个进程所有文件描述符（文件句柄）的位图标志，<strong>每个bit代表一个打开的文件描述符，用于<br>确定在系统调用execve()时是否需要关闭文件句柄。</strong>当一个进程fork出一个子进程时，通常会在子进程中调用execve()函数<br>加载执行另一个新程序。此时子进程将完全被新程序替换掉，并在子进程中执行新程序。若一个文件描述符在close_on_exec中对应的<br>bit被设置，那么在执行execve()时该文件描述符将被关闭，否则该文件描述符将始终处于打开状态。<br>当打开一个文件的时候，默认情况下文件句柄在子进程中也处于打开状态。<br>注意文件描述符和文件描述符标志的区别，文件描述符是文件进程打开文件时的文件句柄，文件描述符标志为close_on_exec。</p>
</blockquote>
<p>下图显示了一个进程打开两个不同文件时三张表对应的关系：</p>
<p><img src="../assets/images/singleProcessmultifile.png" alt=""></p>
<p>如果两个独立的进程同时打开同一个文件，三张表之间的对应关系如下：</p>
<p><img src="../assets/images/multiProcesssinglefile.png" alt=""><br>从上面可以看出，不同进程打开相同的文件时每个进程将获得各自的文件表项，这是因为不同的进程都有各自的文件偏移量。<br>当我们对文件进行操作的时候，上面三种表项之间的变化关系如下：</p>
<ul>
<li>当对文件进行写操作时（write），在文件表项中的文件偏移量将增加写入的字节数。如果此时文件偏移量超过了文件长度，更新文件长度为当前的文件偏移量</li>
<li>当用O_APPEND标志打开一个文件，则相应的标志也被设置到文件表项的文件标志状态中。每次对这种具有追加标志的文件进行写操作时，<strong>首先将当前文件偏移量设置为文件文件长度</strong>，这就使得每次增加的内容都会写到文件末尾。</li>
<li>若使用lseek定位到文件末尾，则文件表项中偏移量被设置为文件长度</li>
<li>lseek函数只修改文件表项中的偏移量，不进行任何IO操作。</li>
</ul>
<p><strong>注意问题：</strong></p>
<ul>
<li>可能有多个文件描述符指向同一个文件表项，如在fork的时候就有可能发生</li>
<li>注意文件描述符和文件状态标志在作用范围方面的区别。前者只用于一个进程的描述符，而后者则应用于指向该给定文件表项的任何进程中的所有描述符。</li>
</ul>
<h2 id="函数fcntl功能及用法"><a href="#函数fcntl功能及用法" class="headerlink" title="函数fcntl功能及用法"></a>函数fcntl功能及用法</h2><p><strong>函数原型</strong>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, ...<span class="comment">/*int args or lock args*/</span>)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>函数功能</strong>:<br>fcntl的作用是改变已经打开的文件属性。</p>
<p><strong>参数说明</strong>:</p>
<ul>
<li>fd 为file descriptor,即文件打开之后的文件描述符</li>
<li>cmd为命令，即需要对fd操作的命令,一般为几个宏定义中的其中一个</li>
<li>args 参数，此参数为执行cmd命令所需要的参数</li>
</ul>
<p><strong>cmd参数命令及功能</strong>:</p>
<p>fcntl的功能可以分为5种:</p>
<ul>
<li>复制一个已有的文件描述符<ul>
<li>cmd = F_DUPFD，此功能<strong>返回一个文件描述符，新的描述符的值为大于或等于args的可用的<br>（尚未打开）文件描述符的最小值，新描述符与fd共用一个文件表项</strong>。但是新的文件描述符有<br> 它自己的一套文件描述符标志.</li>
<li>cmd = F_DUPFD_CLOEXEC.与上述功能一致，唯一不同的是使用此命令会设置CLOSE_ON_EXEC，<br>即当执行execve的时候，文件描述符将被关闭。</li>
</ul>
</li>
<li>获取或设置文件描述符标志<ul>
<li>cmd = F_GETFD <strong>返回与fd关联的close_on_exec标志</strong>，第三个参数被忽略。</li>
<li>cnd = F_SETFD <strong>将文件描述符标志close_on_exec设置为第三个参数</strong>。</li>
</ul>
</li>
<li>获取或设置文件状态标志<ul>
<li>cmd = F_GETFL <strong>获取fd对应的文件的状态标志（存储于文件表项）</strong></li>
<li>cmd = F_SETFL <strong>设置fd对应文件的状态标志</strong></li>
</ul>
</li>
<li>获取或设置异步IO所有权<ul>
<li>cmd = F_GETOWN 获取当前接受SIGIO和SIGURG信号的进程IO或者进程组ID。</li>
<li>cmd = F_SETOWN 设置接受SIGIO和SIGURG信号的进程ID或进程组ID。返回值为正则为进程，返回值为负数即为进程组。</li>
</ul>
</li>
<li>获取或记录锁（cmd=F_GETLK、F_SETLK、F_SETLKW），此处不详解</li>
</ul>
<p><strong>文件状态标志说明</strong>：</p>
<p>文件状态标志存储与文件表项中，它用于说明进程对当前文件的可操作权限。文件的<br>操作权限说明如下图表所示，权限设置可使用|或者&amp;进行设置.</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件状态标志</th>
<th style="text-align:left">功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">O_RDONLY</td>
<td style="text-align:left">只读权限</td>
</tr>
<tr>
<td style="text-align:center">O_WRONLY</td>
<td style="text-align:left">只写权限</td>
</tr>
<tr>
<td style="text-align:center">O_RDWR</td>
<td style="text-align:left">读写权限</td>
</tr>
<tr>
<td style="text-align:center">O_EXEC</td>
<td style="text-align:left">可执行权限</td>
</tr>
<tr>
<td style="text-align:center">O_SEARCH</td>
<td style="text-align:left">只搜索打开权限</td>
</tr>
<tr>
<td style="text-align:center">O_APPEND</td>
<td style="text-align:left">追加写</td>
</tr>
<tr>
<td style="text-align:center">O_NONBLOCK</td>
<td style="text-align:left">非阻塞模式</td>
</tr>
<tr>
<td style="text-align:center">O_SYNC</td>
<td style="text-align:left">等待写完成（数据和属性）</td>
</tr>
<tr>
<td style="text-align:center">O_DSYNC</td>
<td style="text-align:left">等待写完成（仅数据）</td>
</tr>
<tr>
<td style="text-align:center">O_RSYNC</td>
<td style="text-align:left">同步读写</td>
</tr>
<tr>
<td style="text-align:center">O_FSYNC</td>
<td style="text-align:left">等待写完成</td>
</tr>
<tr>
<td style="text-align:center">O_ASYNC</td>
<td style="text-align:left">异步IO</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意O_RDONLY、O_WRONLY、O_RDWR、O_EXEC、O_SEARCH这个五个标志并不各占<br>一位，一个文件的访问方式只能取这五个里面的一个。因此检查当前文件的是这<br>五个标志中的哪一个需要使用屏蔽字O_ACCMODE取得当问方式位，在于这五个标志<br>进行对比。</p>
</blockquote>
<p><strong>代码示例说明</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> test;</div><div class="line">  <span class="comment">//返回结果：test = 10，返回大于等于第三个参数可用的fd(10)。</span></div><div class="line">  test = fcntl(STDIN_FILENO, F_DUPFD, <span class="number">10</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"result of fcntl(STDIN_FILENO, F_DUPFD, 10) is:%d\n"</span>, test);</div><div class="line"></div><div class="line">  <span class="comment">//返回结果：test=11,与上一个函数功能相同</span></div><div class="line">  <span class="comment">//不同之处在于其设置了close_on_exec,当执行exec时关闭响应的文件描述符</span></div><div class="line">  <span class="comment">//注意有一些版本的系统上没有定义这个宏</span></div><div class="line">  <span class="comment">//test = fcntl(STDIN_FILENO, F_DUPFD_CLOEXEC, 10);</span></div><div class="line"></div><div class="line">  <span class="comment">//返回结果 test = 0. 标准输入的文件描述符标志(即关闭标志)为0，</span></div><div class="line">  <span class="comment">//意思是执行exec时关联的文件描述符不关闭</span></div><div class="line">  test = fcntl(STDIN_FILENO, F_GETFD);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"the result of fcntl(STDIN_FILENO, F_GETFD) is:%d\n"</span>, test);</div><div class="line"></div><div class="line">  <span class="comment">//将文件描述符标志设置为0</span></div><div class="line">  fcntl(STDIN_FILENO, F_SETFD, <span class="number">0</span>);</div><div class="line"></div><div class="line">  <span class="comment">//返回结果 test = 32270</span></div><div class="line">  test = fcntl(STDIN_FILENO, F_GETFL);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"the result of fcntl(STDIN_FILENO, F_GETFL) is:%d\n"</span>, test);</div><div class="line"></div><div class="line">  <span class="comment">//给STDIN_FILENO对应的IO添加非阻塞权限</span></div><div class="line">  test |= O_NONBLOCK;</div><div class="line">  fcntl(STDIN_FILENO, F_SETFL, test);</div><div class="line"></div><div class="line">  test = fcntl(STDIN_FILENO, F_GETFL);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"the result of fcntl(STDIN_FILENO, F_GETFL) is:%d\n"</span>, test);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="STDIN-FILENO，STDOUT-FILENO以及STDERR-FILENO"><a href="#STDIN-FILENO，STDOUT-FILENO以及STDERR-FILENO" class="headerlink" title="STDIN_FILENO，STDOUT_FILENO以及STDERR_FILENO"></a>STDIN_FILENO，STDOUT_FILENO以及STDERR_FILENO</h2><p>STDIN_FILENO等是系统API接口库中<unistd.h>的宏定义，它是一个int类型的值，是打开文件的句柄，<br>对应的主要函数有open,read,write和close等。<br>STDIN_FILENO的含义是标准输入（键盘）的文件描述符，STDOUT_FILENO是标准输出流的文件描述符，STDERR_FILENO<br>是标准错误流的文件描述符。</unistd.h></p>
<h3 id="STDIN-FILENO与stdin的区别"><a href="#STDIN-FILENO与stdin的区别" class="headerlink" title="STDIN_FILENO与stdin的区别"></a>STDIN_FILENO与stdin的区别</h3><ul>
<li>数据类型不同 stdin的数据类型为FILE*，STDIN_NO的数据类型为int</li>
<li>可用的函数不同 stdin主要用的函数有fread,fwrite,fclose，STDIN_FILENO可用的函数为write，read和close</li>
<li>stdin属于标准IO，高级的输入输出函数，在stdio.h中定义;STDIN_FILENO是文件描述符，一般定义为0,1,2,属于没有buffer的IO,直接调用系统调用，定义在unistd.h中</li>
<li>层次不同，stdin属于标注库处理的输入流，其声明为FILE*型，对应的函数前面都有f开头；而STDIN_FILENO属于系统API接口，对用的函数是一些系统级的调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux用于I-O的数据结构及fcntl函数详解&quot;&gt;&lt;a href=&quot;#Linux用于I-O的数据结构及fcntl函数详解&quot; class=&quot;headerlink&quot; title=&quot;Linux用于I/O的数据结构及fcntl函数详解&quot;&gt;&lt;/a&gt;Linux用于I/O的
    
    </summary>
    
      <category term="Linux环境高级编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="fcntl" scheme="http://yoursite.com/tags/fcntl/"/>
    
      <category term="文件描述符标志" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%A0%87%E5%BF%97/"/>
    
      <category term="文件状态标志" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97/"/>
    
      <category term="inode" scheme="http://yoursite.com/tags/inode/"/>
    
  </entry>
  
  <entry>
    <title>C语言free如何知道要free多大的空间</title>
    <link href="http://yoursite.com/2017/04/07/free%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E8%A6%81free%E5%A4%9A%E5%A4%A7%E7%9A%84%E7%A9%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2017/04/07/free如何知道要free多大的空间/</id>
    <published>2017-04-07T02:50:31.000Z</published>
    <updated>2017-04-07T04:48:27.464Z</updated>
    
    <content type="html"><![CDATA[<p>在C语言中，当向一个函数传递指针的时候，它的长度信息往往会被截断（如果是数组名），传入函数的只是一个指针，而无法标示数组的长度，在函数中我们也无法获取它的长度信息，除非显示的传递一个长度参数。但是使用free函数的过程中，我们只是向free中传递了一个指针，并没有标示它的大小，那free是如何知道将要被free掉的内存的大小呢？下面将详细解答这一问题。</p>
<p>malloc函数的实现是以块分配内存，在被分配的块中包括两部分。<strong>第一部分中存储含有报头的元数据，它其中包含有分配块的大小信息，是一个常量；第二部分中存储实际用户数据</strong>。而使用malloc分配内存返回的是第二部分用户数据的地址。而块的两个部分在内存中的存储取决有编译器的实现，一般有两种情况，第一种是最常见的，即元数据和用户数据是连续的，存储在连续空间位置。第二种是两部分分开存储。</p>
<p>对于第一种情况，malloc分配内存的空间图如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">____ The allocated block ____</div><div class="line">/                             \</div><div class="line">+--------+--------------------+</div><div class="line">| Header | Your data area ... |</div><div class="line">+--------+--------------------+</div><div class="line">         ^</div><div class="line">         |</div><div class="line">         +-- The address you are given</div></pre></td></tr></table></figure>
<p>对于上述情况，malloc中内存转换实现方式为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The corresponding word size */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_SZ                (sizeof(INTERNAL_SIZE_T))</span></div><div class="line">...</div><div class="line"><span class="comment">/* conversion from malloc headers to user pointers, and back */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> chunk2mem(p) ((void*)((char*)(p) + 2*SIZE_SZ))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))</span></div></pre></td></tr></table></figure></p>
<p>如上源码我们可以看出来，chunk2mem将原始指针转换为user_data的指针，mem2chunk做了相反的转换。这个时候free的实现为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span>* mem)</span> </span>&#123;</div><div class="line">  p = mem2chunk(mem);</div><div class="line">  <span class="comment">// Now that you know how large is chunk "p", go ahead and free the chunk.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，我们通过实验可以推测，标准库对void*的operator=做了重载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  int *a = (int*)malloc(sizeof(int));</div><div class="line">  int *b = (int*)malloc(sizeof(int));</div><div class="line">  short *c = (short*)malloc(sizeof(short));</div><div class="line">  std::cout &lt;&lt; a &lt;&lt; std::endl</div><div class="line">            &lt;&lt; b &lt;&lt; std::endl</div><div class="line">            &lt;&lt; c &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; b - a &lt;&lt; std::endl;</div><div class="line">  std::cout &lt;&lt; reinterpret_cast&lt;size_t&gt;(b) - reinterpret_cast&lt;size_t&gt;(a) &lt;&lt; std::endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x10b5c20</div><div class="line">0x10b5c40</div><div class="line">0x10b5c60</div><div class="line">8</div><div class="line">32</div></pre></td></tr></table></figure></p>
<p>参考:</p>
<p><a href="https://www.quora.com/How-does-free-function-in-C-knows-how-much-memory-to-be-released-deallocate" target="_blank" rel="external">https://www.quora.com/How-does-free-function-in-C-knows-how-much-memory-to-be-released-deallocate</a></p>
<p><a href="http://stackoverflow.com/questions/1518711/how-does-free-know-how-much-to-free" target="_blank" rel="external">http://stackoverflow.com/questions/1518711/how-does-free-know-how-much-to-free</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在C语言中，当向一个函数传递指针的时候，它的长度信息往往会被截断（如果是数组名），传入函数的只是一个指针，而无法标示数组的长度，在函数中我们也无法获取它的长度信息，除非显示的传递一个长度参数。但是使用free函数的过程中，我们只是向free中传递了一个指针，并没有标示它的大
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>why assigment operator can not be frined function</title>
    <link href="http://yoursite.com/2017/03/21/why-assigment-operator-can-not-be-frined-function/"/>
    <id>http://yoursite.com/2017/03/21/why-assigment-operator-can-not-be-frined-function/</id>
    <published>2017-03-21T06:30:41.000Z</published>
    <updated>2017-03-21T06:31:31.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why-assigment-operator-can-not-be-frined"><a href="#why-assigment-operator-can-not-be-frined" class="headerlink" title="why assigment operator can not be frined"></a>why assigment operator can not be frined</h1><blockquote>
<p>this is a problem in my work and I have find th solution on stackoverflow,so recorder here</p>
</blockquote>
<h2 id="problem-description"><a href="#problem-description" class="headerlink" title="problem description"></a>problem description</h2><p>When I refactor my object, I have a problem which need to change the return value<br>of and function std::string to a struct data, but I don’t want to change my code<br>where the function be used, so I want to overload the assignment operator which<br>will assign a struct to string.The code is as follows:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">class</span> data_struct&#123;</div><div class="line">  <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">operator</span> = (<span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, data_struct&amp; d);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">bool</span> success&#123;<span class="literal">false</span>&#125;;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> message&#123;<span class="string">""</span>&#125;;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  data_struct(<span class="keyword">bool</span> t_success, <span class="built_in">std</span>::<span class="built_in">string</span> t_message):</div><div class="line">            success(t_success), message(t_message) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">operator</span> = (<span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, data_struct&amp; d) &#123;</div><div class="line">  s = d.s;</div><div class="line">  <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">data_struct <span class="title">d</span><span class="params">(<span class="literal">false</span>,<span class="string">"haha"</span>)</span></span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s = d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>when I compile this file , this is an error follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">main.cpp:3:64: error: ‘std::__cxx11::string operator=(std::__cxx11::string&amp;, data_struct&amp;)’ must be a nonstatic member <span class="keyword">function</span></div><div class="line">   friend std::string operator = (std::string&amp; s, data_struct&amp; d);</div><div class="line">                                                                ^</div><div class="line">main.cpp:12:13: error: expected initializer before ‘operator’</div><div class="line"> std::string operator = (std::string&amp; s, data_struct&amp; d) &#123;</div><div class="line">             ^</div><div class="line">main.cpp: In <span class="keyword">function</span> ‘int main()’:</div><div class="line">main.cpp:19:19: error: conversion from ‘data_struct’ to non-scalar <span class="built_in">type</span> ‘std::__cxx11::string &#123;aka std::__cxx11::basic_string&lt;char&gt;&#125;’ requested</div><div class="line">   std::string s = d;</div></pre></td></tr></table></figure>
<h2 id="why-does-this-happen"><a href="#why-does-this-happen" class="headerlink" title="why does this happen?"></a>why does this happen?</h2><p>Firstly, it should be noted that this has nothing to do with the operator being implemented as a friend specifically. It is really about implementing the copy-assignment as a member function or as a non-member (standalone) function. Whether that standalone function is going to be a friend or not is completely irrelevant: it might be, it might not be, depending on what it wants to access inside the class.</p>
<p>Now, the answer to this question is given in D&amp;E book (The Design and Evolution of C++). The reason for this is that the compiler always declares/defines a member copy-assignment operator for the class (if you don’t declare your own member copy-assignment operator).</p>
<p>If the language also allowed declaring copy-assignment operator as a standalone (non-member) function, you could end up with the following</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Class definition</span></div><div class="line"><span class="keyword">class</span> SomeClass &#123;</div><div class="line">  <span class="comment">// No copy-assignment operator declared here</span></div><div class="line">  <span class="comment">// so the compiler declares its own implicitly</span></div><div class="line">  ...</div><div class="line">&#125;;</div><div class="line"></div><div class="line">SomeClass a, b;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">  a = b;</div><div class="line">  <span class="comment">// The code here will use the compiler-declared copy-assignment for `SomeClass`</span></div><div class="line">  <span class="comment">// because it doesn't know anything about any other copy-assignment operators</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Your standalone assignment operator</span></div><div class="line">SomeClass&amp; <span class="keyword">operator</span> =(SomeClass&amp; lhs, <span class="keyword">const</span> SomeClass&amp; rhs);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">  a = b;</div><div class="line">  <span class="comment">// The code here will use your standalone copy-assigment for `SomeClass`</span></div><div class="line">  <span class="comment">// and not the compiler-declared one</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As seen in the above example, the semantics of the copy-assignment would change in the middle of the translation unit - before the declaration of your standalone operator the compiler’s version is used. After the declaration your version is used. The behavior of the program will change depending on where you put the declaration of your standalone copy-assignment operator.</p>
<p>This was considered unacceptably dangerous (and it is), so C++ doesn’t allow copy-assignment operator to be declared as a standalone function.</p>
<p>It is true that in your particular example, which happens to use a friend function specifically, the operator is declared very early, inside the class definition (since that’s how friends are declared). So, in your case the compiler will, of course, know about the existence of your operator right away. However, from the point of view of C++ language the general issue is not related to friend functions in any way. From the point of view of C++ language it is about member functions vs. non-member functions, and non-member overloading of copy-assignment is just prohibited entirely for the reasons described above.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>due to the solution above is not proper.So I overWrite the orignal function, and<br>invoke different version in their needed place.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;why-assigment-operator-can-not-be-frined&quot;&gt;&lt;a href=&quot;#why-assigment-operator-can-not-be-frined&quot; class=&quot;headerlink&quot; title=&quot;why assigmen
    
    </summary>
    
      <category term="C++ problems" scheme="http://yoursite.com/categories/C-problems/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>工厂类模式家族之简单工厂模式</title>
    <link href="http://yoursite.com/2017/01/09/%E5%B7%A5%E5%8E%82%E7%B1%BB%E6%A8%A1%E5%BC%8F%E5%AE%B6%E6%97%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/01/09/工厂类模式家族之简单工厂模式/</id>
    <published>2017-01-09T08:57:04.000Z</published>
    <updated>2017-01-09T09:01:14.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂类模式家族之简单工厂模式"><a href="#工厂类模式家族之简单工厂模式" class="headerlink" title="工厂类模式家族之简单工厂模式"></a>工厂类模式家族之简单工厂模式</h1><p>在面向对象编程的领域，设计模式给我们提供了适合特定场景的软件设计思想，不过大多设计模式都可以通过一般的设计进行替代，但我们为什么还有费工夫去遵循设计模式呢？这就要说到设计模式的精髓了，我们通过对软件系统进行良好的设计，不但可以提高代码的可重用性，增强系统的可扩展性，给客户提供良好的接口，还可以减少编码过程中因代码组织太乱扩展过程中需要修改旧代码而带来的一连串的错误，降低维护成本。软件设计过程我们应该尽量追求符合软件设计的开闭原则。</p>
<blockquote>
<p> 开闭原则:在面向对象编程领域中，开闭原则规定“软件中的对象(类，模块，函数)应该<strong>对于扩展是开放的，但是对于修改是封闭的</strong>”。该特性在产品化的环境中是特别有价值的，在这种环境中我们认为一旦类完成，我们可以对它进行扩展改变其行为，但是不允许修改类。也就是说一个<strong>类的实现只应该因错误而修改</strong>。－－by wiki</p>
</blockquote>
<p>工厂模式家族包括三种重要的模式，分别是简单工厂模式，工厂模式以及抽象工厂模式。他们都属于类的创建型模式。创建型模式包括两种，分别是<strong>类的创建型模式</strong>和<strong>对象的创建型模式</strong>。类的创建型模式通常<strong>使用继承关系</strong>，将类的创建交由其具体的子类完成，这样就向外界隐藏了如何得到具体类的实现细节，以及这个类的实例是如何被创建或者组织在一起的。；对象创建型模式通常<strong>把一个类的创建委托给另一个对象完成</strong>，可以根据语境动态地决定生成哪个具体类的实例。</p>
<p>本节我们来讲解工厂模式中的简单工厂模式。主要包括以下几个部分：</p>
<ul>
<li>简单工厂模式的实质</li>
<li>简单工厂模式的适用性</li>
<li>简单工厂模式的结构</li>
<li>简单工厂模式的参与者</li>
<li>简单工厂模式各成分之间的交互</li>
<li>实际应用</li>
<li>简单工厂模式的优缺点</li>
<li>简单工厂模式实例代码</li>
</ul>
<h2 id="简单工厂模式的实质"><a href="#简单工厂模式的实质" class="headerlink" title="简单工厂模式的实质"></a>简单工厂模式的实质</h2><p>简单工厂模式又称为静态工厂模式。 <strong>它的实质是根据客户传递的信息，工厂类通过该信息制造出相应的产品的实例返回给客户。这样我们就做到了客户只是产品的消费者，而真正的创建者是工厂类。</strong> 在简单工厂模式中，待被创建的产品通常继承自同一个类。而这个类中包含了具体产品的所有的公共成员和方法。</p>
<h2 id="简单工厂模式的适用性"><a href="#简单工厂模式的适用性" class="headerlink" title="简单工厂模式的适用性"></a>简单工厂模式的适用性</h2><p>简单工厂模式将对象的创建和对象本身的业务分离开来，降低了系统的耦合度，当维护期间需要对客户代码或者产品代码进行修改的时候，修改其中之一不会影响另一个。</p>
<h2 id="简单工厂模式的结构"><a href="#简单工厂模式的结构" class="headerlink" title="简单工厂模式的结构"></a>简单工厂模式的结构</h2><p><img src="../assets/images/simpleFactoryclassDiagram.png" alt=""></p>
<h2 id="简单工厂模式的参与者"><a href="#简单工厂模式的参与者" class="headerlink" title="简单工厂模式的参与者"></a>简单工厂模式的参与者</h2><p>简单工厂模式中一般有以下几个部分:</p>
<ul>
<li>工厂类：简单工厂模式的核心，它的作用是根据客户提供的信息创建相应的具体产品</li>
<li>抽象产品：所有具体产品的父类，其中主要包含所有具体产品共有的方法或对象</li>
<li>具体产品：工厂类创建的具体实例。</li>
</ul>
<h2 id="简单工厂模式各成分之间的交互"><a href="#简单工厂模式各成分之间的交互" class="headerlink" title="简单工厂模式各成分之间的交互"></a>简单工厂模式各成分之间的交互</h2><p><img src="../assets/images/simplefactorysequence.png" alt=""></p>
<ul>
<li>客户首先创建factory类(一般为单例模式)，</li>
<li>factory类创建成功后，客户调用其createProduct方法，并传入相关信息，</li>
<li>具体产品实例被创建并返回给client,开始进行使用concreteProduct</li>
</ul>
<h2 id="简单工厂模式的实际应用"><a href="#简单工厂模式的实际应用" class="headerlink" title="简单工厂模式的实际应用"></a>简单工厂模式的实际应用</h2><p>在实际开发中使用简单工厂模式中，我们可以进行变通的使用。</p>
<p>在实际情况种可能会出现比较复杂的抽象产品和和具体产品之间的关系，这个时候我们依然也可以使用抽象工厂模式:</p>
<p><img src="../assets/images/simplefactory2.png" alt=""></p>
<h2 id="简单工厂模式的优缺点"><a href="#简单工厂模式的优缺点" class="headerlink" title="简单工厂模式的优缺点"></a>简单工厂模式的优缺点</h2><p>简单工厂模式的优点: 通过在中间添加一个工厂类，降低产品类和客户代码之间的耦合度；客户在获取产品的时候无需记住所有产品的构造方法，只需要通过同意的工厂类接口进行创建产品，大大提高了效率准确率。</p>
<p>简单工厂模式的缺点：所有的产品实例化的逻辑都在工厂类的一个创建方法中，当需要添加新产品的时候，不得不进行修改factory类，这样就违背了设计的开闭原则(对扩展开放，对修改封闭)；另外当产品类别过多的时候，会出现这个函数冗杂的问题，增加维护成本。最重要的是这个工厂类是所有产品的入口，当它不能工作的时候，所有的产品将陷入瘫痪状态。</p>
<h2 id="简单工厂的实例"><a href="#简单工厂的实例" class="headerlink" title="简单工厂的实例"></a>简单工厂的实例</h2><p>下面通过形状shape,circle以及rectangle来实现一个简单的简单工厂模式(如有问题，欢迎指正)：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//factory.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FACTORY_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FACTORY_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"circle.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rectangle.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">class</span> Factory &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  Factory() &#123;&#125;</div><div class="line">  Factory(<span class="keyword">const</span> Factory &amp;) = <span class="keyword">delete</span>;</div><div class="line">  Factory &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Factory &amp;) = <span class="keyword">delete</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Factory&gt; m_factory;</div><div class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Factory&gt; getInstance();</div><div class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt; getShape(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;flag);</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//factory.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.hpp"</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Factory&gt; Factory::m_factory = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Factory&gt; Factory::getInstance() &#123;</div><div class="line">  <span class="keyword">if</span> (m_factory == <span class="literal">nullptr</span>) &#123;</div><div class="line">    m_factory = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Factory&gt;(<span class="keyword">new</span> Factory());</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> m_factory;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt; Factory::getShape(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;flag) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="number">0</span> == flag.compare(<span class="string">"circle"</span>)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt;(<span class="keyword">new</span> Circle());</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == flag.compare(<span class="string">"rectangle"</span>)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt;(<span class="keyword">new</span> Rectangle());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//shape.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHAPE_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SHAPE_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">class</span> Shape &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//circle.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CIRCLE_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCLE_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shape.hpp"</span></span></div><div class="line"><span class="keyword">class</span> Circle : <span class="keyword">public</span> Shape &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Circle(<span class="keyword">double</span> t_radius = <span class="number">0</span>) : m_radius(t_radius) &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is a circle, the radius is : "</span> &lt;&lt; m_radius &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_radius * m_radius * <span class="number">3.14</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">double</span> m_radius;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//rectangle.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECTANGLE_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shape.hpp"</span></span></div><div class="line"><span class="keyword">class</span> Rectangle : <span class="keyword">public</span> Shape &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Rectangle(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>) : m_height(a), m_width(b) &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is a rectangle\n height: "</span> &lt;&lt; m_height</div><div class="line">              &lt;&lt; <span class="string">"\nwidth:"</span> &lt;&lt; m_width &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_height * m_width; &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> m_height;</div><div class="line">  <span class="keyword">int</span> m_width;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"circle.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rectangle.hpp"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Factory&gt; t = Factory::getInstance();</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt; c = t-&gt;getShape(<span class="string">"circle"</span>);</div><div class="line">  c-&gt;draw();</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the area is: "</span> &lt;&lt; c-&gt;getArea() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Shape&gt; r = t-&gt;getShape(<span class="string">"rectangle"</span>);</div><div class="line">  r-&gt;draw();</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the area is :"</span> &lt;&lt; r-&gt;getArea() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂类模式家族之简单工厂模式&quot;&gt;&lt;a href=&quot;#工厂类模式家族之简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂类模式家族之简单工厂模式&quot;&gt;&lt;/a&gt;工厂类模式家族之简单工厂模式&lt;/h1&gt;&lt;p&gt;在面向对象编程的领域，设计模式给我们提供了适
    
    </summary>
    
      <category term="设计模式之路" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="简单工厂方法" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GRASP设计原则（职责分配原则）</title>
    <link href="http://yoursite.com/2017/01/08/GRASP%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%88%E8%81%8C%E8%B4%A3%E5%88%86%E9%85%8D%E5%8E%9F%E5%88%99%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/08/GRASP设计原则（职责分配原则）/</id>
    <published>2017-01-08T11:45:46.000Z</published>
    <updated>2017-01-08T11:47:09.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GRASP设计原则（职责分配原则）"><a href="#GRASP设计原则（职责分配原则）" class="headerlink" title="GRASP设计原则（职责分配原则）"></a>GRASP设计原则（职责分配原则）</h1><p>GRASP(General responsibility assignment software Principle)设计原则是设计模式的基础,在GOF的23中设计模式中处处可以体现其中的一个或多个设计原则，所以在掌握设计模式之前需要对GRASP原则有一定的了解，本节我在这里总结一下grasp原则。</p>
<p>本文共分为以下几个内容：</p>
<ul>
<li>GRASP的九个原则</li>
<li>GRASP原则详解</li>
<li>GRASP原则在23中设计模式中的体现</li>
</ul>
<h2 id="GRASP的九个原则"><a href="#GRASP的九个原则" class="headerlink" title="GRASP的九个原则"></a>GRASP的九个原则</h2><ul>
<li>信息专家原则(information)</li>
<li>创造者原则(creator)</li>
<li>低耦合原则(low coupling)</li>
<li>高内聚原则(high cohesion)</li>
<li>控制器原则(controller)</li>
<li>多态原则(polymorphism)</li>
<li>纯虚构(pure Fabrication)</li>
<li>中介原则(indirect)</li>
<li>受保护变量原则(protected Variations)</li>
</ul>
<h2 id="Grasp原则详解"><a href="#Grasp原则详解" class="headerlink" title="Grasp原则详解"></a>Grasp原则详解</h2><h3 id="信息专家原则-information-expert"><a href="#信息专家原则-information-expert" class="headerlink" title="信息专家原则(information expert)"></a>信息专家原则(information expert)</h3><p>信息专家模式的本质指的是我们应该将<strong>职责委托给哪一个对象</strong>，这个职责可以是一个方法，也可以是一个算法或者其他内容。它是面向过程设计过程中最基本的原则。</p>
<p><strong>委托原则</strong>:我们在设计对象的时候，如果某个对象拥有完成某个职责所需要的所有信息，那么这个职责就分配给这个对象实现。这个时候，这个类就是相对于这个职责的信息专家。</p>
<p>示例：我们在设计购物网站的时候，为避免重复，一种商品只能在购物车中出现一次，如果多次出现，则需要将其数量增加。这个时候我们在将物品放入购物车的时候，要首先判断当前物品是否在购物车中，判断两个物品是否为同一个物品的方法这个职责应该委托给谁呢？显而易见，商品类中有唯一标识，所以这个职责由商品类实现，而不是购物车。</p>
<h3 id="创造者原则-creator"><a href="#创造者原则-creator" class="headerlink" title="创造者原则(creator)"></a>创造者原则(creator)</h3><p>creator原则的本质是创建类对象职责应该委托给那个对象，也就是谁应该负责产生某个类的实例。</p>
<p>解决方案:　如果符合下面的一个或者多个条件，则可以将创建A的实例的职责分配给B;</p>
<ul>
<li>B包含A</li>
<li>B聚合A</li>
<li>B拥有初始化A的数据并在创建A的实例时将数据传递给A</li>
<li>B记录A的实例</li>
<li>B频发使用A</li>
</ul>
<p>满足上述一种或者多种情况的时候，我们应该奖创建A的实例的职责分配给B。</p>
<p>合理的creator原则带来的<strong>优点</strong>：如果职责分配合理，设计就能降低耦合，提高设计的清晰度，封装性和重用性。</p>
<p>示例:例如订单和商品的关系是聚合关系，这个时候我们将在订单中创建商品。</p>
<h3 id="低耦合-Low-coupling"><a href="#低耦合-Low-coupling" class="headerlink" title="低耦合(Low coupling)"></a>低耦合(Low coupling)</h3><p><strong>耦合是评价一个系统中各个元素之间连接或者依赖关系强弱的尺度。</strong>低耦合的原则是我们在设计系统的时候尽量降低系统中各个元素之间的耦合度，这样对于系统的理解和维护都有很大的益处。</p>
<p>耦合性高的系统会带来的坏处:</p>
<ul>
<li>一个类的修改导致其他类产生较大的影响；</li>
<li>系统难以维护和理解；</li>
<li>系统的重用性差，在重用一个高耦合类的时候，不得不重用它所依赖的所有类。</li>
</ul>
<p>两个类具有以下特性中的其中一个，我们就说这两个类是耦合的：</p>
<ul>
<li>A具有一个类型为B的属性；</li>
<li>A调用B的方法</li>
<li>A的方法包含对B的引用(参数或者返回值的方式)</li>
<li>A是B的直接或者间接的子类</li>
<li>A是接口B的一种实现</li>
</ul>
<p>低耦合系统的<strong>设计方法</strong>：</p>
<ul>
<li>在类的划分上，尽量创建松耦合的类，类之间的耦合性越低，越有利于复用，修改一个类不会影响其他类。</li>
<li>在类的设计上，尽量降低类中成员和方法的访问权限。</li>
<li>在类的设计上，尽量将类设计为不变类</li>
<li>在类的引用上，将一个对象对另一个对象的引用降低到最小</li>
</ul>
<h3 id="高内聚-high-cohesion"><a href="#高内聚-high-cohesion" class="headerlink" title="高内聚(high cohesion)"></a>高内聚(high cohesion)</h3><p><strong>内聚是评价一个对象的职责被关联的尺度或者强弱，也可以说是功能性内聚的职责。</strong>也就是功能性紧密的相关职责应该放在同一个类中，并共同完成有限的功能。这样做更加有利于对类的理解和重用，也可以降低类的维护成本。</p>
<p>往往低内聚的系统设计会导致类的混乱，当对功能进行扩展或者改进的时候带来不必要的麻烦，低内聚的类也不利于重用，因为他们的职责如此之混乱。</p>
<p>为了达到高内聚，我们需要对类的职责进行分解，使分解出来的类具有独立的职责，满足单一职责原则。<strong>将一些需要在多个类中使用到的方法封装到一个类中，其他的类只负责他们需要负责的相关功能</strong>，这样我们可以提高类的内聚程度。</p>
<h3 id="控制器原则-controller"><a href="#控制器原则-controller" class="headerlink" title="控制器原则(controller)"></a>控制器原则(controller)</h3><p>控制器模式的实质是将一些<strong>系统事件的接受和处理</strong>委托给一个的对象controller，这个对象可以是一个<strong>类，系统或者子系统</strong>，它不与UI进行交互，它只负责系统信息的接收和处理。</p>
<p>一般情况下，控制器是一个系统，这个系统中包括多个处理器，分别对应处理不同的事务。通常情况下，一个控制器应当把要完成的功能委托给其他对象，而它只负责任务的协调控制和分配。</p>
<p>控制器原则与MVC模式相对应，MVC模式是一种比设计模式更高的架构模式。</p>
<h3 id="多态原则-polymorphism"><a href="#多态原则-polymorphism" class="headerlink" title="多态原则(polymorphism)"></a>多态原则(polymorphism)</h3><p>多态原则与面向对象设计原则中的多态概念类似，这里不再详细赘述。</p>
<h3 id="纯虚构-pure-Fabrication"><a href="#纯虚构-pure-Fabrication" class="headerlink" title="纯虚构(pure Fabrication)"></a>纯虚构(pure Fabrication)</h3><p>纯虚构原则与我们所说的纯虚函数类似。</p>
<p>　　纯虚构的作用是用来解决高内聚和低耦合之间的矛盾的。高内聚低耦合是我们系统设计的终极目标，高内聚意味着我们要将类拆分成多个功能集中的类，但是拆分的多个类之间需要进行协作才能正常工作，这样又增加了类之间的耦合性。</p>
<p>　　纯虚构原则是用来解决上述问题的方案。它要求将一部分类的职责转移到纯虚构类中，在理想的情况下，分配给这种虚构类的职责是为了达到高内聚低耦合的效果。在实际的操作过程中，纯虚构类的实现又很多种方式，例如将数据库中操作的方法从数据库实体中分离出来，形成专门的数据访问类；通过对类的分解来实现类的重用，新增加的数据访问类对应于数据的持久化存储，这是软件开发过程中为了方便虚构出来的一个概念。一般情况下，<strong>纯虚构模式通常基于功能进行划分的。</strong></p>
<h3 id="中介模式-indirect"><a href="#中介模式-indirect" class="headerlink" title="中介模式(indirect)"></a>中介模式(indirect)</h3><p>中介模式的目的是为了避免两个对象之间产生直接耦合，降低对象之间的耦合度。</p>
<p>解决方案是建立中间对象来协调两个对象之间的交互，避免耦合性过高。</p>
<h3 id="受保护模式-protected-variations"><a href="#受保护模式-protected-variations" class="headerlink" title="受保护模式(protected variations)"></a>受保护模式(protected variations)</h3><p>受保护模式的实质与OCP(开放闭合原则)类似，我们首先找到系统中不稳定的变化点，使用统一的接口封装起来，如果未来发生变化的时候，可以通过扩展接口来扩展新的功能，而不需要改变旧的代码。这样达到易于扩展的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GRASP设计原则（职责分配原则）&quot;&gt;&lt;a href=&quot;#GRASP设计原则（职责分配原则）&quot; class=&quot;headerlink&quot; title=&quot;GRASP设计原则（职责分配原则）&quot;&gt;&lt;/a&gt;GRASP设计原则（职责分配原则）&lt;/h1&gt;&lt;p&gt;GRASP(Gene
    
    </summary>
    
      <category term="设计模式之路" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="grasp" scheme="http://yoursite.com/tags/grasp/"/>
    
  </entry>
  
  <entry>
    <title>创建型设计模式之build模式</title>
    <link href="http://yoursite.com/2017/01/08/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8Bbuild%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/01/08/创建型设计模式之build模式/</id>
    <published>2017-01-07T17:36:19.000Z</published>
    <updated>2017-01-08T03:38:06.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型设计模式之build模式"><a href="#创建型设计模式之build模式" class="headerlink" title="创建型设计模式之build模式"></a>创建型设计模式之build模式</h1><p>最近在读《设计模式-可复用面向对象软件设计的基础》一书，在阅读的过程中我会结合书中的相关知识和实例以及在网络上的博客对相关的模式的理解进行总结，并在此基础上加入自己的一些理解，总结模式中需要注意的一些点，记录在此博客，以供大家交流分享，同时防止自己对内容遗忘，如有不正确指出，欢迎批评指正。</p>
<p>本节的主要内容是设计模式中的创建型模式之一:builder模式</p>
<p>要用好builder模式，必须对其机制了解透彻，将该模式用在合适的软件中才能显出它真正的威力，第五部分中实例将为您展示它的真正威力。</p>
<p>本文内容分为以下几个方面:</p>
<ul>
<li>builder模式的意图</li>
<li>builder模式的适用性</li>
<li>builder模式的结构(通用UML类图)及详解</li>
<li>builder模式中的参与者</li>
<li>builder模式中各个成分之间的交互</li>
<li>builder模式比较好的一个实例</li>
<li>builder模式使用过程中注意的点</li>
<li>KFC套餐实例代码</li>
</ul>
<p><strong>builder模式的精髓都隐藏于builder模式的意图和实用性中，让你真正理解这两个方面，可以说你已经掌握了builder模式（以下意图和模式都摘自《设计模式》书中）</strong></p>
<h2 id="builder模式的意图"><a href="#builder模式的意图" class="headerlink" title="builder模式的意图"></a>builder模式的意图</h2><p>builder模式的意图是将一个<strong>复杂对象的构建</strong>与它的<strong>表示</strong>分离，使得同样的构建过程可以创建不同的表示。</p>
<h2 id="builder模式的适用性"><a href="#builder模式的适用性" class="headerlink" title="builder模式的适用性"></a>builder模式的适用性</h2><ul>
<li>当<strong>创建复杂对象的算法</strong>应该独立于<strong>该对象的组成部分</strong>以及<strong>它们的装配方式</strong>时。</li>
<li>当构造过程必须<strong>允许被构造的对象有不同的表示</strong>时。</li>
</ul>
<p>提前记录一下:装配的工作是由导向器(director)完成的，复杂对象的创建是由具体的建造器完成(concreteBuilder)，这里不明白没问题，等你看完全文再过来看这里你就理解了。</p>
<blockquote>
<p> 当且仅当上面两个条件均满足的情况下我们要使用builder模式（完全理解这两条不一件重要的事情，但是不要着急,当你读完这篇文章的时候就会拨开它的庐山真面目了）</p>
</blockquote>
<h2 id="builder模式的结构-UML类图-及详解"><a href="#builder模式的结构-UML类图-及详解" class="headerlink" title="builder模式的结构(UML类图)及详解"></a>builder模式的结构(UML类图)及详解</h2><p>builder模式的UML类图关系如下:</p>
<p><img src="../assets/images/build_diagram.png" alt=""></p>
<p>注意的问题:</p>
<ul>
<li>在builder中一般不声明纯虚函数，而是把它们定义为空方法，这使客户只重定义他们感兴趣的操作。</li>
<li>在director中，注意我们不是把所有的buildPart都去执行一次，而是根据需要的客户的需求，进行定制的去buildPart部分构建，可以构建一次，也可以构建多次。</li>
<li>一般将m_product声明为protected成员，因为这样既保证了封装性，又能使得concreteBuilder能够正常操作product；</li>
</ul>
<h2 id="builder模式种的参与者"><a href="#builder模式种的参与者" class="headerlink" title="builder模式种的参与者"></a>builder模式种的参与者</h2><p>从上面的类图中我们也可以看出,在builder模式中的参与者有以下四种,以及他们的职责分别是:(此处为个人理解，与书中内容可能不一致,如果有问题欢迎指正)</p>
<ul>
<li>Director: 负责装配product的各个部件，使用Builder的类方法进行实现。它的作用是隔离了客户与product的具体生产过程；并负责控制product的生产过程。</li>
<li>Builder: 为创建一个product对象的各个部件指定抽象接口。一般情况下默认builderPart的操作默认为空。</li>
<li>concreteBuilder: 具体实现每一个部件的具体的复杂生产过程，如buildPartA()的具体实现，并提供一个检索产品的接口。</li>
<li>Product: 这个争议不大，即为被构造的复杂对象。此类对象会有不同的表示。</li>
</ul>
<h2 id="builder模式各个成分之间的交互方式"><a href="#builder模式各个成分之间的交互方式" class="headerlink" title="builder模式各个成分之间的交互方式"></a>builder模式各个成分之间的交互方式</h2><p>先上一张时序图:</p>
<p><img src="../assets/images/builder_sequence.png" alt=""></p>
<p>从上面的时序图可以分析出，各个成分之间的交互方式如下:</p>
<ul>
<li>客户首先创建一个concreteBuilder对象,然后创建一个Director,</li>
<li>创建结束之后，使用concreteBuilder修饰对象Director,</li>
<li>然后调用Director的construct()方法，进行构造Product,</li>
<li>最后客户通过concreteBuilder的getResult()方法取回生成的Product</li>
</ul>
<h2 id="builder模式中一个较好的实例"><a href="#builder模式中一个较好的实例" class="headerlink" title="builder模式中一个较好的实例"></a>builder模式中一个较好的实例</h2><p>两个实例来自网络对两本书籍实例的纠正,改编</p>
<p>上面这篇文章深刻的分析了builder模式的本质以及诸多误区的分析，收益颇多，在此感谢博主分享。</p>
<p>在本例中,设备(Equipment)是一个复杂对象，由一个machine和一个或多个输入端口(InputPort)或者输出端口(outputPort)组成；其中输入或输出端口可能有不同的类型(ordinary和super)。现在要你设计一个生成不同型号的产品，要求产品可能包含一进一出(普通或super)，一进两出(普通或super)。</p>
<p>　　在设计中,我们首先定义一个LCDFactory对象充当director，一个设备生成器(EQPBuilder),相当于Builder。</p>
<p>​    首先ordinary和super是port的内部实现方式不同，所以我们需要定义两个具体类，即 ordinaryEQPBuilder和superEQPBuilder。</p>
<p>​    在EQPbuilder中，我们将定义四个函数，分别是:buildMachine(), addInputPort(), addOutputPort()和getEQP()。两个concrete类继承EQPBuilder。</p>
<p>​    当我们需要获取不同数目的port的设备，这属于组装方面的范畴，所以我们将在LCDFactory中的createEQP中做。其UML类图如下:</p>
<p><img src="../assets/images/BuilderEquipment_thumb.jpg" alt=""></p>
<h2 id="builder模式在使用的过程中需要注意的问题"><a href="#builder模式在使用的过程中需要注意的问题" class="headerlink" title="builder模式在使用的过程中需要注意的问题"></a>builder模式在使用的过程中需要注意的问题</h2><p>这里所说的注意的问题可能上面已经提到了，但是这里还是要着重强调一下，因为我们稍不注意，就可能将模式滥用，导致系统设计的失败。</p>
<ul>
<li>在builder模式中Builder一定不要定义纯虚函数成员函数，而是定义为空方法的虚函数，这样就可以使得客户可以只定义他们感兴趣的操作。</li>
<li>Director负责<strong>装配产品</strong>，concreteBuilder负责实现<strong>复杂产品部件的具体实现</strong></li>
<li>在Director中调用Builder的buildPart函数的时候，并不是每个函数都被调用，而是根据要生成的product对其选择性调用，可能调用零次，也可能调用多次。</li>
<li>Builder中的m_product声明为protected,即保证对象的封装性，又能让具体类方便的使用。(这是我在写代码的时候的解决方法，如果有更好的将m_product声明为private的解决方法欢迎交流2824759538@qq.com)</li>
</ul>
<h2 id="KFC套餐实例代码"><a href="#KFC套餐实例代码" class="headerlink" title="KFC套餐实例代码"></a>KFC套餐实例代码</h2><p>这是本人使用KFC服务员生成套餐时的一种模拟，其实实际情况中并不需要使用builder模式，但是这里为了练手强行写成了builder模式，希望大家不要吐槽。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//KFCWaiter.hpp 注意此处water相当于Director的作用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KFCWAITER_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KFCWAITER_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilder.hpp"</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> KFCWaiter &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setMealBuilder</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MealBuilder&gt; t_builder)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MealBuilder&gt; m_builder;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//KFCWaiter.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KFCWaiter.hpp"</span></span></div><div class="line"><span class="keyword">void</span> KFCWaiter::setMealBuilder(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MealBuilder&gt; t_builder) &#123;</div><div class="line">  m_builder = t_builder;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> KFCWaiter::construct() &#123;</div><div class="line">  m_builder-&gt;buildFood();</div><div class="line">  m_builder-&gt;buildDrink();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Meal.hpp Meal相当于Product</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MEAL_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MEAL_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">class</span> Meal &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  Meal(<span class="built_in">std</span>::<span class="built_in">string</span> t_food = <span class="string">"hanbao"</span>, <span class="built_in">std</span>::<span class="built_in">string</span> t_drink = <span class="string">"kele"</span>);</div><div class="line">  ~Meal();</div><div class="line">  <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getFood</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">  <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getDrink</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getMeal</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">buildFood</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;t_food)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">buildDrink</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;t_drink)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> m_food;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> m_drink;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Meal.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Meal.hpp"</span></span></div><div class="line">Meal::Meal(<span class="built_in">std</span>::<span class="built_in">string</span> t_food, <span class="built_in">std</span>::<span class="built_in">string</span> t_drink)</div><div class="line">    : m_food(t_food), m_drink(t_drink) &#123;&#125;</div><div class="line">Meal::~Meal() &#123;&#125;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Meal::getFood() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_food; &#125;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Meal::getDrink() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_drink; &#125;</div><div class="line"><span class="keyword">void</span> Meal::getMeal() <span class="keyword">const</span> &#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"套餐为:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"食物:"</span> &lt;&lt; m_food &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"饮料:"</span> &lt;&lt; m_drink &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Meal::buildFood(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;t_food) &#123; m_food = t_food; &#125;</div><div class="line"><span class="keyword">void</span> Meal::buildDrink(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;t_drink) &#123; m_drink = t_drink; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilder.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BUILDER_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUILDER_HPP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Meal.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">class</span> MealBuilder &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  MealBuilder();</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildFood</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildDrink</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Meal&gt; getResult();</div><div class="line">  <span class="keyword">virtual</span> ~MealBuilder()&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Meal&gt; m_meal;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilder.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilder.hpp"</span></span></div><div class="line">MealBuilder::MealBuilder() : m_meal(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Meal&gt;(<span class="keyword">new</span> Meal())) &#123;&#125;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Meal&gt; MealBuilder::getResult() &#123; <span class="keyword">return</span> m_meal; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilderA.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MEALBUILDERA_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MEALBUILDERA_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilder.hpp"</span></span></div><div class="line"><span class="keyword">class</span> MealBuilderA : <span class="keyword">public</span> MealBuilder &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildFood</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildDrink</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilderA.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilderA.hpp"</span></span></div><div class="line"><span class="keyword">void</span> MealBuilderA::buildFood() &#123; m_meal-&gt;buildFood(<span class="string">"套餐A食物"</span>); &#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MealBuilderA::buildDrink() &#123; m_meal-&gt;buildDrink(<span class="string">"套餐A饮料"</span>); &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilderB.hpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MEALBUILDERB_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MEALBUILDERB_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilder.hpp"</span></span></div><div class="line"><span class="keyword">class</span> MealBuilderB : <span class="keyword">public</span> MealBuilder &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildFood</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildDrink</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MealBuilderB.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilderB.hpp"</span></span></div><div class="line"><span class="keyword">void</span> MealBuilderB::buildFood() &#123; m_meal-&gt;buildFood(<span class="string">"套餐B食物"</span>); &#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MealBuilderB::buildDrink() &#123; m_meal-&gt;buildDrink(<span class="string">"套餐B饮料"</span>); &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KFCWaiter.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilderA.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MealBuilderB.hpp"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MealBuilder&gt; Aptr =</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MealBuilder&gt;(<span class="keyword">new</span> MealBuilderA());</div><div class="line">  KFCWaiter k;</div><div class="line">  k.setMealBuilder(Aptr);</div><div class="line">  k.construct();</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Meal&gt; current_meal = Aptr-&gt;getResult();</div><div class="line"></div><div class="line">  current_meal-&gt;getMeal();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型设计模式之build模式&quot;&gt;&lt;a href=&quot;#创建型设计模式之build模式&quot; class=&quot;headerlink&quot; title=&quot;创建型设计模式之build模式&quot;&gt;&lt;/a&gt;创建型设计模式之build模式&lt;/h1&gt;&lt;p&gt;最近在读《设计模式-可复用面向对象软
    
    </summary>
    
      <category term="设计模式之路" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>UML时序图详解</title>
    <link href="http://yoursite.com/2017/01/07/UML%E6%97%B6%E5%BA%8F%E5%9B%BE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/01/07/UML时序图详解/</id>
    <published>2017-01-07T07:17:23.000Z</published>
    <updated>2017-01-07T07:25:30.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML时序图详解"><a href="#UML时序图详解" class="headerlink" title="UML时序图详解"></a>UML时序图详解</h1><p>　　这几天在阅读《设计模式》一书，书中总结了前人在面向对象软件设计过程中针对特定的问题提出的简洁而优雅的解决方案。在阅读的过程中，我一边理解书中给出的实例，一边结合自己写过的项目或者用过的框架与当前模式进行对比，发现之前的项目有一些还是有很大的改进空间。在阅读本书的过程中，书中很多例子都是通过UML类图和UML时序图进行说明，所以，理解这些例子的前提是对UML类图以及UML时序图有一定的了解，UML类图在前面的博客(<a href="https://langzi989.github.io/2017/01/05/UML%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/)中已经讲解，现在我们主要来看一下UML时序图中的重要概念。" target="_blank" rel="external">https://langzi989.github.io/2017/01/05/UML%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/)中已经讲解，现在我们主要来看一下UML时序图中的重要概念。</a></p>
<p>　　UML类关系以及时序图在大三上《系统分析与设计》课的时候学过，但是那个时候不知道这东西有什么用，所以没有认真学和理解。随着实战经验的增多，越来越能体会到这些在软件设计的过程中重中之重，不管是描述你的设计思想还是与团队中其他人进行交流。所以还是建议大家在学到这一部分的时候对这门课认真对待。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>时序图是一种按照时间顺序显示对象之间的交互的图。时序图中显示的是参与交互的对象和对象之间消息传递的顺序。</p>
<h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>时序图中包含的主要的元素有:</p>
<ul>
<li>角色(Actor)</li>
<li>对象(Object)</li>
<li>生命线(life line)</li>
<li>控制焦点(focus of control)</li>
<li>消息(message)</li>
<li>自关联消息(self-associated message)</li>
<li>组合片段(combined fragment)</li>
</ul>
<h2 id="基本元素详解"><a href="#基本元素详解" class="headerlink" title="基本元素详解"></a>基本元素详解</h2><h3 id="角色-actor"><a href="#角色-actor" class="headerlink" title="角色(actor)"></a>角色(actor)</h3><p>角色指的是系统角色，这个角色可以是人，其他系统或者子系统</p>
<p>图形表示:</p>
<p><img src="../assets/images/actor.png" alt=""></p>
<h3 id="对象-object"><a href="#对象-object" class="headerlink" title="对象(object)"></a>对象(object)</h3><p>对象包括三种:</p>
<ul>
<li>指定类名和对象名的对象objectName: className</li>
<li>指定类名但没有对象名的对象(匿名对象) :className</li>
<li>指定对象名但不指定类名的对象 objectName</li>
</ul>
<p>图形表示：<br>第一类:</p>
<p><img src="../assets/images/object1.png" alt=""></p>
<p>第二类:</p>
<p><img src="../assets/images/object2.png" alt=""></p>
<p>第三类:</p>
<p><img src="../assets/images/object3.png" alt=""></p>
<h3 id="生命线-life-line"><a href="#生命线-life-line" class="headerlink" title="生命线(life line)"></a>生命线(life line)</h3><p>生命线在时序图中使用向下的虚线表示,它指的是其所对应的对象的存活时间。从上到下表示时间的推后。</p>
<p>图像表示:</p>
<p><img src="../assets/images/lifeline.png" alt=""></p>
<h3 id="控制焦点-focus-of-control"><a href="#控制焦点-focus-of-control" class="headerlink" title="控制焦点(focus of control)"></a>控制焦点(focus of control)</h3><p>控制焦点在时序图中以方块的形式出现，它是一种表示时间段的方式，对象在这一时间段中执行相应的操作。</p>
<p>图像表示:</p>
<p><img src="../assets/images/control.png" alt=""></p>
<h3 id="消息-message"><a href="#消息-message" class="headerlink" title="消息(message)"></a>消息(message)</h3><p>消息有三种类型</p>
<ul>
<li>同步消息：发送者发送请求后被阻塞，直到接受者返回消息或者做完其他处理之后发送者才能继续执行之后的操作</li>
<li>异步消息：发送者发送消息给接受者之后不等待接受者返回响应而继续执行下面的操作。</li>
<li>返回消息:接受者返回消息给发送者</li>
</ul>
<p>消息的图形表示：<br>同步消息:</p>
<p><img src="../assets/images/message1.png" alt=""></p>
<p>异步消息:</p>
<p><img src="../assets/images/message2.png" alt=""></p>
<p>返回消息:</p>
<p><img src="../assets/images/message3.png" alt=""></p>
<h3 id="自关联消息-self-associated-message"><a href="#自关联消息-self-associated-message" class="headerlink" title="自关联消息(self-associated message)"></a>自关联消息(self-associated message)</h3><p>自关联消息一般指的是当前类调用自己的函数的情况</p>
<h3 id="组合片段-combined-fragment"><a href="#组合片段-combined-fragment" class="headerlink" title="组合片段(combined fragment)"></a>组合片段(combined fragment)</h3><p>组合片段中包括四个部分:</p>
<ul>
<li><p>Alternative fragment(alt表示):与if…then…else…对应</p>
</li>
<li><p>option fragment(opt表示):与switch对应</p>
</li>
<li><p>parallel fragment(par表示):表示同时发生</p>
</li>
<li><p>Loop Fragment(loop表示):与循环对应</p>
<p>图形表示:</p>
<p>alt:</p>
<p><img src="../assets/images/alt.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UML时序图详解&quot;&gt;&lt;a href=&quot;#UML时序图详解&quot; class=&quot;headerlink&quot; title=&quot;UML时序图详解&quot;&gt;&lt;/a&gt;UML时序图详解&lt;/h1&gt;&lt;p&gt;　　这几天在阅读《设计模式》一书，书中总结了前人在面向对象软件设计过程中针对特定的问题提出的
    
    </summary>
    
      <category term="设计模式之路" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>UML图表示常见的类之间的关系</title>
    <link href="http://yoursite.com/2017/01/05/UML%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2017/01/05/UML图表示常见的类之间的关系/</id>
    <published>2017-01-05T13:12:28.000Z</published>
    <updated>2017-01-05T13:16:34.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML图表示常见的类之间的关系"><a href="#UML图表示常见的类之间的关系" class="headerlink" title="UML图表示常见的类之间的关系"></a>UML图表示常见的类之间的关系</h1><p>类之间的关系常见的主要包括以下几种:</p>
<ul>
<li>继承</li>
<li>实现</li>
<li>依赖</li>
<li>关联</li>
<li>聚合</li>
<li>组合</li>
</ul>
<h2 id="继承（inheritance）"><a href="#继承（inheritance）" class="headerlink" title="继承（inheritance）"></a>继承（inheritance）</h2><p>继承的概念大家都比较熟悉，他主要指的是派生类继承父类或者接口之间的继承，派生类继承了父类中原有的功能，并在此基础上添加了新的功能。例如public继承实质上是一种is-a的关系,(子类is a 基类)</p>
<p>图形表示:</p>
<p><img src="../assets/images/继承.png" alt=""></p>
<h2 id="实现-implement"><a href="#实现-implement" class="headerlink" title="实现(implement)"></a>实现(implement)</h2><p>实现指的是一个类实现一个接口,一个类可以实现一个或者多个接口。实现是类和接口之间常见的一种关系。在java中通常通过implements实现。</p>
<p>图形表示：</p>
<p><img src="../assets/images/实现.png" alt=""></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>依赖指的是一个类A使用另外一个类B,这种该使用关系是偶然性的，临时的，非常弱的一种关系。但是类B的变化会影响到类A;比如人要使用船过河中，这个时候人和船就是一种依赖关系。具体表现在代码中就是<strong>B是类A中的某个方法的参数。</strong></p>
<p>图形表示:</p>
<p><img src="../assets/images/依赖.png" alt=""></p>
<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><p>关联是指俩个类之间的或者类和接口之间的一种强依赖关系。而这种强依赖关系不是偶然性的，而是长期的，而且双方的关系是平等的，关联可以是单向的，也可以是双向的。具体表现在代码中是<strong>(1):B以类属性的方式出现在类A中（２）A引用类型为B的全局变量</strong></p>
<p>图形表示:</p>
<p><img src="../assets/images/关联.png" alt=""></p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>聚合是关联关系的一种特例，它表现的是一种has-a的关系，即整体与部分的关系，此时整体与部分可以是分离的，他们可以具有各自的声明周期，部分可以属于多个整体对象，也可以被多个整体对象共享；如计算机与CPU的关系<strong>聚合中部分和整体都有各自的生命周期，并且互相影响</strong></p>
<p>图形表示：</p>
<p><img src="../assets/images/聚合.png" alt=""></p>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>组合也是关联的一种特例，它体现的是一种contain-a的关系，这种关系比聚合强；这个时候整体和部分是不可分离的，<strong>整体的声明周期与部分的声明周期相同，当整体的周期结束时，部分的周期也随之结束</strong>。如人和大脑的关系</p>
<p>图形表示：</p>
<p><img src="../assets/images/组合.png" alt=""></p>
<h2 id="依赖性强弱"><a href="#依赖性强弱" class="headerlink" title="依赖性强弱:"></a>依赖性强弱:</h2><p>组合&gt;聚合&gt;关联&gt;依赖</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UML图表示常见的类之间的关系&quot;&gt;&lt;a href=&quot;#UML图表示常见的类之间的关系&quot; class=&quot;headerlink&quot; title=&quot;UML图表示常见的类之间的关系&quot;&gt;&lt;/a&gt;UML图表示常见的类之间的关系&lt;/h1&gt;&lt;p&gt;类之间的关系常见的主要包括以下几种:
    
    </summary>
    
      <category term="设计模式之路" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>docker防止fork炸弹</title>
    <link href="http://yoursite.com/2016/12/29/docker%E9%98%B2%E6%AD%A2fork%E7%82%B8%E5%BC%B9/"/>
    <id>http://yoursite.com/2016/12/29/docker防止fork炸弹/</id>
    <published>2016-12-29T11:00:25.000Z</published>
    <updated>2016-12-29T13:01:08.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker防止fork炸弹"><a href="#docker防止fork炸弹" class="headerlink" title="docker防止fork炸弹"></a>docker防止fork炸弹</h1><p>在开发过程中，我们使用了docker作为容器来进行编程语言代码的评测，以用于防止有害代码破坏宿主物理机器，但是在昨天发现docker还是会受fork炸弹的影响将宿主物理机器挂掉。针对这个问题，我在docker官网找到了相关的解决方法，记录分享并以备之后再次遇到此类问题可以很快找到解决方案。<br>当前解决方案只适用于docker1.1版本及之后(通过docker.io进行安装,sudo apt install docker.io)。<br>解决方案的思想就是:在启动docker的时候给其加上启动选项–pids-limit来限制cgroup中的fork的进程的最大数，我这里限制的30,可以根据自己的需求去限制。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --pids-limit <span class="number">30</span> Ubuntu:<span class="number">14.04</span></div></pre></td></tr></table></figure></p>
<p>上述方法即可防止fork炸弹。<br>以下内容转载自<a href="http://blog.csdn.net/thinkhy/article/details/50995720" target="_blank" rel="external">http://blog.csdn.net/thinkhy/article/details/50995720</a></p>
<h2 id="Docker容器与安全"><a href="#Docker容器与安全" class="headerlink" title="Docker容器与安全"></a>Docker容器与安全</h2><p>Docker能否大规模用于生产环境，尤其是公有云环境，就在于Docker是否能提供安全的环境。本文将总结《Docker容器与容器云》一书3.9节『Docker与容器安全』的主要内容，包括Docker现有安全机制、存在的安全问题以及Docker安全增强三个方面。</p>
<h3 id="1-Docker的安全机制"><a href="#1-Docker的安全机制" class="headerlink" title="1. Docker的安全机制"></a>1. Docker的安全机制</h3><h4 id="1-1-Docker-daemon安全"><a href="#1-1-Docker-daemon安全" class="headerlink" title="1.1 Docker daemon安全"></a>1.1 Docker daemon安全</h4><ul>
<li>Docker向外界服务提供了四种通信方式，默认是以Unix域套接字的方式来与客户端通信，这种方式较TCP形式更为安全。</li>
<li>Docker也提供了TLS传输层安全协议，通过–tlsverify(安全传输校验），–tlscacert(信任证书)、–tlskey(服务器或者客户端秘钥）、–tlscert（证书位置）来配置。<h4 id="1-2-镜像安全"><a href="#1-2-镜像安全" class="headerlink" title="1.2 镜像安全"></a>1.2 镜像安全</h4></li>
<li><p>Docker registry镜像库访问控制</p>
<ul>
<li>Docker daemon第一次启动时，通过公网（Amazon CDN）载入official.json包，饮食公共image和用户image的目录以及数字签名信息。</li>
<li>official.json在Docker daemon启动时加载到MemoryGraph，MemoryGraph用于存储公钥以及命名之间的授权映射，默认授权节点对授权空间有读写权限。</li>
</ul>
</li>
<li><p>镜像校验和</p>
<ul>
<li>镜像校验和用来保证镜像的完整性，以预防可能出现的镜像破环。</li>
<li>目前Docker对于镜像校验和和验证失败不采取任何措施，仅输出警告信息<h4 id="1-3-内核安全"><a href="#1-3-内核安全" class="headerlink" title="1.3 内核安全"></a>1.3 内核安全</h4></li>
</ul>
</li>
<li>内核为容器提供了两种技术cgroup和namespace，分别对容器进行资源限制和资源隔离。<ul>
<li>容器本质是进程，cgroup用来限制容器的资源使用量，避免单个容器耗尽系统资源。</li>
</ul>
</li>
<li>namespace用来隔离容器与宿主机，以及不同的容器。<ul>
<li>Docker目前仅完整支持uts、ipc、pid、network、mount这5种ns,user ns尚未完全支持。</li>
<li>系统资源未进行隔离，如/proc，/sys、SELinux、time、syslog、/dev设备信息等均未进行隔离。<h4 id="1-4-容器之间的网络安全"><a href="#1-4-容器之间的网络安全" class="headerlink" title="1.4 容器之间的网络安全"></a>1.4 容器之间的网络安全</h4></li>
</ul>
</li>
<li>Docker可通过iptabls设定规则实现禁止或允许容器之间的通信。<h4 id="1-5-Docker容器Capability限制"><a href="#1-5-Docker容器Capability限制" class="headerlink" title="1.5 Docker容器Capability限制"></a>1.5 Docker容器Capability限制</h4></li>
<li>容器的行为通过Linux超级用户分组限制，具体包括了CHOWN、DAC_OVERRIDe、FSETID、FOWNER、MKNOD、NET_RAW、SETGID、SETUID、SETFCAP、SETPCAP、NET_BIND_SERVICE、SYS_CHROOT、KILL和AUDIT_WRITE。</li>
<li>Docker进程的Capability可通过docker run命令的参数进行配置<h3 id="2-Docker安全问题"><a href="#2-Docker安全问题" class="headerlink" title="2. Docker安全问题"></a>2. Docker安全问题</h3><h4 id="2-1-磁盘资源限制问题"><a href="#2-1-磁盘资源限制问题" class="headerlink" title="2.1 磁盘资源限制问题"></a>2.1 磁盘资源限制问题</h4></li>
<li>Docker容器通过镜像层叠的方式来构建容器内的文件系统，本质上还是在宿主机文件系统的目录(/var/lib/docker)下存储文件。</li>
<li>极有可能出现一个容器将宿主机上所有的磁盘空间耗尽，导致其它容器无法存储文件，所以有必要对容器的磁盘使用量进行限制。<h4 id="2-2-容器逃逸问题"><a href="#2-2-容器逃逸问题" class="headerlink" title="2.2 容器逃逸问题"></a>2.2 容器逃逸问题</h4></li>
<li>Docker使用操作系统进行虚拟化，共享内核、内存、CPU以及磁盘，易造成容器逃逸问题。</li>
<li>Docker1.0之后采用白名单来限制容器的能力，会给出默认的容器Capability清单，禁止容器拥有清单之外的Capability。<h4 id="2-3-容器DoS攻击与流量限制问题"><a href="#2-3-容器DoS攻击与流量限制问题" class="headerlink" title="2.3 容器DoS攻击与流量限制问题"></a>2.3 容器DoS攻击与流量限制问题</h4></li>
<li>公有云基于虚拟化技术实现，攻击数据包可能不需要通过物理网卡就可以攻击同一个宿主机下的其他容器，传统Dos预防措施无法适用容器之间的攻击。</li>
<li>的Docker容器连接在网桥上，通过veth pari技术创建网卡，其一端在容器内命名为eth0，另一张网上驻留在宿主机环境之中。</li>
<li>同一宿主机下所有容器共用一张物理网卡，如果一个容器抢占大部分带宽，会影响其它容器使用。<h4 id="2-4-超级权限问题"><a href="#2-4-超级权限问题" class="headerlink" title="2.4 超级权限问题"></a>2.4 超级权限问题</h4></li>
<li>docker run时加入–privileged参数能使容器获得所有的超级用户权限能力，并将所有的宿主机的所有设备挂载到容器内。<h3 id="3-Docker安全的解决方案"><a href="#3-Docker安全的解决方案" class="headerlink" title="3. Docker安全的解决方案"></a>3. Docker安全的解决方案</h3><h4 id="3-1-SELinux"><a href="#3-1-SELinux" class="headerlink" title="3.1 SELinux"></a>3.1 SELinux</h4></li>
<li>SELinux三种控制方式<ul>
<li>Type Enforcement: 主要的访问控制机制。</li>
<li>Role-Based Access Control(RBAC)：基于SELinux用户的权限控制手段。</li>
<li>Multi-Level Security(MLS): 多级分类安全，指定level标签。</li>
</ul>
</li>
<li>为什么要在Docker中使用SELinux<ul>
<li>SELinux将所有进程和文件打上标签，而容器以进程方式运行，所以控制进程如何访问资源，也就是限制容器如何去访问资源。</li>
<li>SELinux策略是全局的，它不是针对具体用户设定，而是强制整个系统遵循。</li>
<li>减少提权攻击风险。<h4 id="3-2-user-namespace"><a href="#3-2-user-namespace" class="headerlink" title="3.2 user namespace"></a>3.2 user namespace</h4></li>
</ul>
</li>
<li>容器的超级用户权限通过ns映射到宿主机是一个普通用户。</li>
<li>容器被恶意程序攻击，所做的也就是这个普通用户的权限，而非宿主机的超级权限。<h4 id="3-3-磁盘限额"><a href="#3-3-磁盘限额" class="headerlink" title="3.3 磁盘限额"></a>3.3 磁盘限额</h4></li>
<li>Docker仅对Device Mapper文件系统的限额提供了–storage-opt参数进行限制。</li>
<li>cgroup没有对磁盘进行限制，Linux磁盘限额技术主要基于用户和文件系统。</li>
<li>可能的解决方案<ul>
<li>所有用户共有宿主机的一块磁盘，限制用户在磁盘上的使用量来限定容器的磁盘使用量。</li>
<li>选择支持目录限额的文件系统，如XFS。</li>
<li>Docker定期检查每一个容器磁盘使用量，会对性能造成影响。</li>
<li>创建虚拟文件系统，些文件系统仅供某一个容器使用。<h4 id="3-4-容器流量限制"><a href="#3-4-容器流量限制" class="headerlink" title="3.4 容器流量限制"></a>3.4 容器流量限制</h4></li>
</ul>
</li>
<li>Docker没对容器的网络带宽做限制。</li>
<li>可以采用Traffic Controller容器对容器网卡流量进行限制，一定程序上减少容器Dos攻击危害。<h4 id="3-5-GRSecurity内核安全增强工具"><a href="#3-5-GRSecurity内核安全增强工具" class="headerlink" title="3.5 GRSecurity内核安全增强工具"></a>3.5 GRSecurity内核安全增强工具</h4></li>
<li>Docker容器共享宿主机的内存，在内存安全上存在不少问题，需要针对内存破坏做防御。</li>
<li>GRSecurity是一个对内核的安全扩展，通过智能访问控制来阻止内存破坏，预防0day漏洞。<h4 id="3-6-fork炸弹"><a href="#3-6-fork炸弹" class="headerlink" title="3.6 fork炸弹"></a>3.6 fork炸弹</h4></li>
<li>fork炸弹以极快速度创建大量进程，以此消耗系统资源，使系统无法运行新程序，现有进程运行速度放缓。</li>
<li>容器本身在内核层面隔离性不足，fork bomb会给容器带来灾难性影响。</li>
<li>fork bomb受到社区关注（Issue 6479），但目前还没有完美解决方案。</li>
<li>Docker无法使用ulimit来限制forkbomb问题，因为一个宿主机用户可能同时启动多个容器，无法对每个容器做进程数的限制。</li>
</ul>
<ol>
<li>总结<br>Docker自身已经提供了不少安全机制，但Docker目前仍然只适于运行可信应用程序（内部使用），如果需要运行任意代码，安全很难得到保证。在日常应用中，还可以通过SELinux、GRSecurity、seccomp等工具来增强容器安全。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker防止fork炸弹&quot;&gt;&lt;a href=&quot;#docker防止fork炸弹&quot; class=&quot;headerlink&quot; title=&quot;docker防止fork炸弹&quot;&gt;&lt;/a&gt;docker防止fork炸弹&lt;/h1&gt;&lt;p&gt;在开发过程中，我们使用了docker作为容器
    
    </summary>
    
      <category term="docker技术" scheme="http://yoursite.com/categories/docker%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>time命令详解</title>
    <link href="http://yoursite.com/2016/12/27/time%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/27/time命令详解/</id>
    <published>2016-12-27T13:18:33.000Z</published>
    <updated>2016-12-27T15:19:33.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-time命令详解"><a href="#Linux-time命令详解" class="headerlink" title="Linux time命令详解"></a>Linux time命令详解</h1><p>参考:<a href="http://blog.he96.com/2011/01/linux-timewhat-do-real-user-and-sys.html" target="_blank" rel="external">http://blog.he96.com/2011/01/linux-timewhat-do-real-user-and-sys.html</a></p>
<h2 id="real-user-sys"><a href="#real-user-sys" class="headerlink" title="real,user,sys"></a>real,user,sys</h2><p>我们常用linux中的time命令计算某个程序的运行耗时，用户态CPU耗时，系统态COU耗时。<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">time foo</div><div class="line">real	0m0.020s</div><div class="line">user	0m0.020s</div><div class="line">sys	0m0.000s</div></pre></td></tr></table></figure></p>
<p>现在我们探讨一下上述三个时间分别代表的含义:</p>
<ul>
<li>real: 表示a.out程序的实际的运行耗时，也就是在a.out运行开始时刻你看了一下手表，a.out运行结束时刻看了一眼手表，两次时间的差值就是real的值。例如使用time sleep 2的时候real值为2</li>
<li>user: a.out运行在用户态CPU的时间</li>
<li>sys: a.out运行在核心态CPU的时间</li>
</ul>
<h2 id="用户态和核心态"><a href="#用户态和核心态" class="headerlink" title="用户态和核心态"></a>用户态和核心态</h2><p>然后我们讲一下用户态和核心态：</p>
<ul>
<li>核心态(kernal mode): 在内核态，代码拥有完全的，不受任何限制的访问底层硬件的能力。可以执行任意的CPU指令，访问任意的内存地址。内核态通常情况下，都是为哪些最底层的，由操作系统提供的，可信可靠耳朵代码来运行的。内核态崩溃将是灾难性的，它会影响到整个系统。</li>
<li>用户态(User mode):在用户态，代码不具备直接访问底层硬件或者内存的能力，而必须借助操作系统提供的可靠的,底层的API来访问硬件或者内存。由于这种隔离带来的保护作用，用户态代码崩溃，操作系统可以正常恢复。我们大多数代码是运行在用户态。</li>
</ul>
<blockquote>
<p>区分内核态和用户态的<strong>作用</strong>:隔离保护，使得系统更稳定。<br>使用这三个时间我们可以计算当前程序CPU的使用率：<br>CPU Usage = (user + sys) / real_time</p>
</blockquote>
<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><ul>
<li>realtime = user + sys</li>
<li>realtime &gt; user + sys<br>由于有一些程序需要等待I/O等导致realtime与user+sys不相等<br>当在多核CPU的情况下第二种情况不成立</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-time命令详解&quot;&gt;&lt;a href=&quot;#Linux-time命令详解&quot; class=&quot;headerlink&quot; title=&quot;Linux time命令详解&quot;&gt;&lt;/a&gt;Linux time命令详解&lt;/h1&gt;&lt;p&gt;参考:&lt;a href=&quot;http://blo
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>C++前置声明</title>
    <link href="http://yoursite.com/2016/12/22/C-%E5%89%8D%E7%BD%AE%E5%A3%B0%E6%98%8E/"/>
    <id>http://yoursite.com/2016/12/22/C-前置声明/</id>
    <published>2016-12-22T14:08:31.000Z</published>
    <updated>2016-12-22T16:10:28.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-前置声明"><a href="#C-前置声明" class="headerlink" title="C++前置声明"></a>C++前置声明</h1><p>以个人理解，C++的前置声明的意思是在类定义之前对其进行声明。它在现实编程的场景中可以解决很多问题。比如解决两个类相互依赖的问题，降低类之间的编译依存关系等等。</p>
<h2 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h2><p>我们分别定义一个锁(Lock)和钥匙(Key)的类(默认一把钥匙只能开一把锁，一把锁只能被一把钥匙打开)。代码如下：<br>Lock.hpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Key.hpp"</span></span></div><div class="line"><span class="keyword">class</span> Lock &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Lock();</div><div class="line">		<span class="keyword">virtual</span> ~Lock();</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		Key m_key;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Key.hpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Lock.hpp"</span></span></div><div class="line"><span class="keyword">class</span> Key &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Key();</div><div class="line">		<span class="keyword">virtual</span> ~Key();</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		m_lock;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候出现了两个类相互包含的情况，因为在编译Lock.cpp的时候，我们需要去查看Key的定义，于是去定义Key,在Key中需要Lock的定义，于是又去构造Lock,这样下去，就出现了一个无限循环包含的情况，有些编译器会直接编译错误，而其他编译器会无限包含下去。<br>这该怎么办呢？有办法，C++为我们提供了前置声明。前置声明是什么？就这个例子来讲，我们要造一把锁，光有锁不行啊，我们还得有能打开这把锁的钥匙。但是锁还没有造好，总不能先打造钥匙吧，钥匙的形状我定了，改天在造。先把锁造好，造锁的时候我要先给要是留一个位置，等锁造好了，我再决定造什么样的钥匙。<strong>前置声明就是我在声明一个类(Lock)的时候,用到了另外一个类（Key）的定义，但是Key还没定义呢，而且我先不需要Key的定义，只需要直到Key是一个类就好了。那好，我就先声明类Key,告诉编译器Key是一个类(不需要包含Key.hpp)</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Key;</div></pre></td></tr></table></figure></p>
<p>然后在Lock中用到Key的时候，都用指针或者引用代替(因为指针是固定大小的，但Key的大小只有知道了Key的定义才能确定)。然后上面的代码就可以改造为如下：</p>
<p>Lock.hpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Key;</div><div class="line"><span class="keyword">class</span> Lock&#123;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		Key *mp_key;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Lock();</div><div class="line">		<span class="keyword">virtual</span> ~Lock();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Key.hpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Lock;</div><div class="line"><span class="keyword">class</span> Key &#123;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		Lock* mp_lock;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Key();</div><div class="line">		<span class="keyword">virtual</span> ~Key();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="前置声明注意的问题"><a href="#前置声明注意的问题" class="headerlink" title="前置声明注意的问题"></a>前置声明注意的问题</h2><h3 id="必须使用前置声明的指针或引用形式"><a href="#必须使用前置声明的指针或引用形式" class="headerlink" title="必须使用前置声明的指针或引用形式"></a>必须使用前置声明的指针或引用形式</h3><p>在需要使用前置声明的文件中，不可以使用类的定义式，因为类的定义式只有在类定义之后才能获取，这个时候类还没有定义，所以会出错。另一个类在构造的时候编译器是需要计算该对象所占的字节的大小给其分配内存的，但是如果使用类的定义式，这个时候类还未定义，所以无法计算其大小，所以只能使用指针或者引用的形式进行引用。</p>
<h3 id="避免在Lock中使用Key的方法"><a href="#避免在Lock中使用Key的方法" class="headerlink" title="避免在Lock中使用Key的方法"></a>避免在Lock中使用Key的方法</h3><h3 id="避免在Key定义之前调用Key的析构函数"><a href="#避免在Key定义之前调用Key的析构函数" class="headerlink" title="避免在Key定义之前调用Key的析构函数"></a>避免在Key定义之前调用Key的析构函数</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-前置声明&quot;&gt;&lt;a href=&quot;#C-前置声明&quot; class=&quot;headerlink&quot; title=&quot;C++前置声明&quot;&gt;&lt;/a&gt;C++前置声明&lt;/h1&gt;&lt;p&gt;以个人理解，C++的前置声明的意思是在类定义之前对其进行声明。它在现实编程的场景中可以解决很多问题。比如
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>条款27:尽量少做转型动作</title>
    <link href="http://yoursite.com/2016/12/21/%E6%9D%A1%E6%AC%BE27-%E5%B0%BD%E9%87%8F%E5%B0%91%E5%81%9A%E8%BD%AC%E5%9E%8B%E5%8A%A8%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/12/21/条款27-尽量少做转型动作/</id>
    <published>2016-12-21T12:57:15.000Z</published>
    <updated>2016-12-21T14:28:46.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条款27-尽量少做转型动作-Effective-C"><a href="#条款27-尽量少做转型动作-Effective-C" class="headerlink" title="条款27:尽量少做转型动作(Effective C++)"></a>条款27:尽量少做转型动作(Effective C++)</h1><p>C++规则设计的目标之一是，保证类型错误决不可能发生。理论上如果你的程序很干净的通过编译，就表示它并不企图在任何对象身上执行任何不安全，无意义，愚蠢荒谬的操作。这是一个及其具有价值的保证，不要轻易放弃它。<br>但是在很多种情况下，我们不得不进行转型操作，转型操作破坏了类型系统。这可能会导致任何可能种类的麻烦，有些容易辨识，但是有些可能会很隐晦。所以在需要进行转型操作的时候一定要慎重，尽量通过设计避免不必要的转型操作。</p>
<h2 id="类型转换的形式"><a href="#类型转换的形式" class="headerlink" title="类型转换的形式"></a>类型转换的形式</h2><p>首先我们回顾一下类型转换的语法，因为通常有三种不同的形式，可写出相同的类型转换动作。</p>
<ul>
<li>C风格类型转换： (T)expression    //将expression转换为类型T</li>
<li>函数式风格类型转换： T(expression) //同上<br>上面的两种形式并无差别，纯粹只是把小括号摆放的位置不同而已，我们称上述两种转为为”旧式转型”(old style cast)。</li>
</ul>
<p>C++还提供四中新式转型(new style):</p>
<ul>
<li>const_cast&lt; T &gt;(expression)</li>
<li>dynamic_cast&lt; T &gt;(expression)</li>
<li>reinterpret_cast&lt; T &gt;(expression)</li>
<li><p>static_cast&lt; T &gt;(expression)</p>
</li>
<li><p>const_cast通常被用来将对象的常量性移除(cast away the constness)。它也是唯一有此能力的C++-style转型操作符。</p>
</li>
<li>dynamic_cast主要用来执行类型向下转型(safe downcasting),也就是用来决定某对象是否归属继承体系中的某个类型。它是<strong>唯一无法由旧式语法执行的动作，也是唯一一个可能耗费重大运行成本的转型动作</strong>。</li>
<li>reinterpret_cast 意图执行低级转型，实际动作及结果可能取决于编译器。这也就表示它<strong>不可移植</strong>，例如将一个pointer to int 转型为int。这一类型转换在低级代码以外很少见。</li>
<li>static_cast 用来强迫隐式转换(implicit conversion)，例如将non-const对象转换为const对象，或者将int转换为double等等。也可以用来执行上述多种转换的反向转换,例如将void指针转换为type指针，将pointer to derive 转化为point to bas。但是无法将const转换为non-const。</li>
</ul>
<h2 id="dynamic-cast与static-cast详解"><a href="#dynamic-cast与static-cast详解" class="headerlink" title="dynamic_cast与static_cast详解"></a>dynamic_cast与static_cast详解</h2><p> static_cast是用来强迫隐式类型转换，它可以用于1.基本数据类型以及指针之间的转换；2.类层次中基类与子类成员函数指针的转换；3.类层次结构中基类与子类指针或者引用之间的转换。<br> dynamic_cast可以用于1.继承关系中类指针或者引用之间的转换；2.包含虚函数之间对象指针的转换3.以及保证转换的安全性。</p>
<h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><h4 id="用于基本数据类型转换和指针之间的转换"><a href="#用于基本数据类型转换和指针之间的转换" class="headerlink" title="用于基本数据类型转换和指针之间的转换"></a>用于基本数据类型转换和指针之间的转换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> a;</div><div class="line"><span class="keyword">int</span> b = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(a);</div><div class="line"><span class="keyword">char</span> c = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(b);</div><div class="line"><span class="keyword">char</span> *pa = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">int</span> *pb = (<span class="keyword">int</span>*)pa;</div><div class="line">pb = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(pa); <span class="comment">//编译错误static_cast只能用于void指针和type指针之间的转换</span></div><div class="line"><span class="keyword">void</span> *pv = <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(pa); <span class="comment">//正确</span></div><div class="line">pb = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(pv);</div></pre></td></tr></table></figure>
<h4 id="类层次中基类与子类成员函数指针的转换"><a href="#类层次中基类与子类成员函数指针的转换" class="headerlink" title="类层次中基类与子类成员函数指针的转换"></a>类层次中基类与子类成员函数指针的转换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  base(<span class="keyword">int</span> t_data) : m_data(t_data) &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printData</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m_data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> m_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> child : <span class="keyword">public</span> base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  child(<span class="keyword">int</span> t_data) : base(t_data) &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printData</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is in the child"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(base::*basefun)</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">base <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line">  basefun func = &amp;base::printData;</div><div class="line">  func = <span class="keyword">static_cast</span>&lt;basefun&gt;(&amp;child::printData);</div><div class="line">  (a.*func)();  <span class="comment">//this is in the child</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类层次结构中基类与子类指针或者引用之间的转换"><a href="#类层次结构中基类与子类指针或者引用之间的转换" class="headerlink" title="类层次结构中基类与子类指针或者引用之间的转换"></a>类层次结构中基类与子类指针或者引用之间的转换</h4><p>上行转换:子类指针或引用转换为基类的指针或引用 —安全<br>下行转换:基类的指针或者引用转换为子类的指针或引用 —危险(避免这样做)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> B:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> C:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> D</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">A objA;</div><div class="line">B objB;</div><div class="line">A* pObjA = <span class="keyword">new</span> A();</div><div class="line">B* pObjB = <span class="keyword">new</span> B();</div><div class="line">C* pObjC = <span class="keyword">new</span> C();</div><div class="line">D* pObjD = <span class="keyword">new</span> D();</div><div class="line"></div><div class="line">objA = <span class="keyword">static_cast</span>&lt;A&amp;&gt;(objB);     <span class="comment">//转换为基类引用    </span></div><div class="line">objA = <span class="keyword">static_cast</span>&lt;A&gt;(objB);</div><div class="line">objB = <span class="keyword">static_cast</span>&lt;B&gt;(objA);      <span class="comment">//error 不能进行转换  </span></div><div class="line"></div><div class="line">pObjA = pObjB;                    <span class="comment">//right 基类指针指向子类对象</span></div><div class="line"><span class="comment">//objB = objA;                      //error 子类指针指向基类对象</span></div><div class="line">pObjA = <span class="keyword">static_cast</span>&lt;A*&gt;(pObjB);   <span class="comment">//right 基类指针指向子类</span></div><div class="line">pObjB = <span class="keyword">static_cast</span>&lt;B*&gt;(pObjA);   <span class="comment">//强制转换 OK 基类到子类</span></div><div class="line"><span class="comment">//pObjC = static_cast&lt;C*&gt;(pObjB);   //error 继承于统一类的派生指针之间转换</span></div><div class="line"><span class="comment">//pObjD = static_cast&lt;D*&gt;(pObjC);   //error 两个无关联之间转换</span></div></pre></td></tr></table></figure></p>
<h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><h4 id="继承关系的类指针对象或者引用之间的转换"><a href="#继承关系的类指针对象或者引用之间的转换" class="headerlink" title="继承关系的类指针对象或者引用之间的转换"></a>继承关系的类指针对象或者引用之间的转换</h4><p>若积累中没有虚函数，使用dynamic_cast可以将子类的指针或引用转换为基类的指针或引用，与static_cast用法相同，不同的是,这个时候使用dynamic_cast将基类指针转换为子类指针的时候会出现编译错误(static_cast不会，但是很危险)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> B:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> C:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> D</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">A objA;</div><div class="line">B objB;</div><div class="line">A* pObjA = <span class="keyword">new</span> A();</div><div class="line">B* pObjB = <span class="keyword">new</span> B();</div><div class="line">C* pObjC = <span class="keyword">new</span> C();</div><div class="line">D* pObjD = <span class="keyword">new</span> D();</div><div class="line"><span class="comment">//objA = dynamic_cast&lt;A&gt;(objB);         //error 非引用</span></div><div class="line"></div><div class="line">objA = <span class="keyword">dynamic_cast</span>&lt;A&amp;&gt;(objB);</div><div class="line"><span class="comment">//objB = dynamic_cast&lt;B&amp;&gt;(objA);      //error A 不是多态类型不能转换 若有虚函数则可以进行转换</span></div><div class="line"></div><div class="line">pObjA = <span class="keyword">dynamic_cast</span>&lt;A*&gt;(pObjB);</div><div class="line"><span class="comment">//pObjB = dynamic_cast&lt;B*&gt;(pObjA);    //error A 继承关系 不是多态类型不能转换</span></div><div class="line"><span class="comment">//pObjB = dynamic_cast&lt;B*&gt;(pObjC);    //error C 兄弟关系 不是多态类型不能转换</span></div><div class="line"><span class="comment">//pObjB = dynamic_cast&lt;B*&gt;(pObjD);    //error D 没有关系 不是多态类型不能转换</span></div></pre></td></tr></table></figure></p>
<h4 id="包含有虚函数之间的对象指针的转换"><a href="#包含有虚函数之间的对象指针的转换" class="headerlink" title="包含有虚函数之间的对象指针的转换"></a>包含有虚函数之间的对象指针的转换</h4><p>使用dynamic_cast将基类指针转换为子类指针的时候并不是永远有效：只有基类指针本身指向的就是一个派生类对象的时候有效。其他时候结果为NULL;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line">Public:</div><div class="line">     Virtual ~A()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> B:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> C:<span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> D</div><div class="line">&#123;</div><div class="line">Public:</div><div class="line">Virtual ~D()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">pObjB = <span class="keyword">dynamic_cast</span>&lt;B*&gt;(pObjA);    <span class="comment">// worning 继承关系 父类具有虚函数 多态</span></div><div class="line">pObjB = <span class="keyword">dynamic_cast</span>&lt;B*&gt;(pObjD);    <span class="comment">//worning 没有关系 D是多态类型可以转换</span></div><div class="line"><span class="comment">//以上结果：pObjB == NULL 此处会发生一个运行时错误</span></div></pre></td></tr></table></figure></p>
<h4 id="dynamic-cast转换的安全性"><a href="#dynamic-cast转换的安全性" class="headerlink" title="dynamic_cast转换的安全性"></a>dynamic_cast转换的安全性</h4><p>当涉及到基类和派生类对象之间的转换的时候，总使用dynamic_cast会避免很多错误，它是安全的，但是它会给程序运行带来巨大的开销。<br>当子类指针转换为基类指针的时候,两种转型都OK,dynamic_cast开销较大。<br>当基类指针转换为派生类指针的时候，若基类中没有虚函数，static_cast不会报错，但是做法很危险，dynamic_cast编译不通过。当含有虚函数的时候，若基类指针没有指向派生类，这个时候会返回NULL,所以也是安全的。</p>
<h4 id="虚函数对于dynamic-cast转换的作用"><a href="#虚函数对于dynamic-cast转换的作用" class="headerlink" title="虚函数对于dynamic_cast转换的作用"></a>虚函数对于dynamic_cast转换的作用</h4><p>为什么dynamic_cast转换类指针的时候需要虚函数呢？<br>dynamic_cast转换是在运行时进行转换，运行时转换就需要知道类对象的信息(继承关系等)。<br>在运行时或者这个信息的是虚函数表指针，通过这个指针可以获取到该类对象的所有的虚函数，包括父类的。因为派生类会继承基类的虚函数表，所以通过这个虚函数表，我们就可以知道类对象的父类，在转换的时候就可以用来判断对象有无继承关系。<br><strong>所以虚函数对于正确的基类指针转换为子类指针是非常重要的。</strong></p>
<h2 id="effective的三点建议"><a href="#effective的三点建议" class="headerlink" title="effective的三点建议"></a>effective的三点建议</h2><ul>
<li>如果可以，尽量避免转型，特别是在注重效率的代码中避免dynamic_cast。如果有个设计需要转型动作，试着发展无需转型的替代设计。</li>
<li>如果转型是必要的，试着将它隐藏与某个函数的背后。客户随后可以调用该函数，而不需要将转型放到他们自己的代码中。</li>
<li>宁可使用C++-style转型，不要使用旧式转型。前者很容易辨识出来，而且也比较有着分门别类的职掌</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条款27-尽量少做转型动作-Effective-C&quot;&gt;&lt;a href=&quot;#条款27-尽量少做转型动作-Effective-C&quot; class=&quot;headerlink&quot; title=&quot;条款27:尽量少做转型动作(Effective C++)&quot;&gt;&lt;/a&gt;条款27:尽量少
    
    </summary>
    
      <category term="effective C++" scheme="http://yoursite.com/categories/effective-C/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
</feed>
